<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hjqjk&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-09T07:00:08.384Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>hjqjk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用P2P软件(Murder)大规模分发大文件</title>
    <link href="http://yoursite.com/2018/Murder-distribute-large-file-via-P2p-technology.html"/>
    <id>http://yoursite.com/2018/Murder-distribute-large-file-via-P2p-technology.html</id>
    <published>2018-03-07T10:08:06.000Z</published>
    <updated>2018-03-09T07:00:08.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>当服务器超过20+时，为了管理方便和提升效率，就会用到自动化管理工具（如Ansible）来自动部署和批量分发文件。</p><blockquote><p>场景描述：目前有50+台服务器，已部署Ansible用于自动化部署和批量分发文件。批量分发文件时，一般把文件传到 Ansible 所在的服务器并通过 copy 模块传输，文件小于100M时，分发正常。当传输大文件时（100M+），受单节点及其带宽的影响，整个分发过程变得非常缓慢，甚至出现Ansible卡死。</p></blockquote><p>使用 Ansible 来分发小文件速度很快，但对于大文件，文件分发就是一个很大的问题。在使用单一分布点和固定出口带宽的情况下，经常存在带宽拥堵、耗费时间长的问题。</p><p>对于大文件分发，首先想到的是 BitTorrent ，利用 P2P 协议实现快速分发，节省带宽，提高效率。</p><a id="more"></a><h1 id="P2P软件介绍"><a href="#P2P软件介绍" class="headerlink" title="P2P软件介绍"></a>P2P软件介绍</h1><p>为了解决上面的问题，这里我们使用 Murder 。</p><p><a href="https://github.com/lg/murder" target="_blank" rel="external"><strong>Murder</strong></a> 是 Twitter 的开源项目，很适合大文件分发。（该项目还能用，但官方已经不再继续维护）</p><p>项目介绍中有这么一段话：<code>Large scale server deploys using BitTorrent and the BitTornado library</code></p><p>根据 <a href="https://blog.twitter.com/engineering/en_us/a/2010/murder-fast-datacenter-code-deploys-using-bittorrent.html" target="_blank" rel="external">Murder 开发者的博客</a>，可以知道这个项目的来龙去脉：</p><blockquote><p>Twitter 在早期便依赖 Capistrano 来进行应用程序的部署，每当有新版本需要发布时，Capistrano 会根据预设好的各种设置和流程到 Twitter 所有的服务器上进行更新的操作。<br>在过去服务器还不多的情況下一切都很美好，但随着 Twitter 服务器数量的增长，到了几百台服务器时，事情已经不再像过去一样美好，甚至到后来拥有数千台服务器时，更新的操作会耗费 40 分钟。<br>Twitter 针对这个问题，认为问题的关键在于：使用集中式的系统，也就是所有的服务器要轮流排队到同一台版本控制系统上进行代码更新。</p><p>Twitter 最初的想法是将版本控制系统也做出分散式的架构，服务器的代码更新就可以分散到不同的机器来压缩部署时间，但事实上版本控制系统即使分散在多台服务器上，这些服务器要更新文件也同样需要时间。<br>因此 Twitter 发现或许需要一个完全去中心化、最好是像 BitTorrent 这样的，利用 P2P 的特点让所有的节点都可以协助进行程序代码的更新。</p><p>从结果来看，在采用了 BitTorrent 的方式来更新代码，部署的时间从 40 分钟大幅减少到只要 12 秒！实在是非常惊人的改善，数千台服务器的代码更新居然只要短短 12 秒就能完成。</p></blockquote><p>集中式架构和Murder架构对比：<br><img src="http://orku2pa7o.bkt.clouddn.com/2018-03-08-15204933934905.jpg" alt=""><br><img src="http://orku2pa7o.bkt.clouddn.com/2018-03-08-15204934306246.jpg" alt=""></p><h1 id="部署Murder"><a href="#部署Murder" class="headerlink" title="部署Murder"></a>部署Murder</h1><h2 id="Murder-组件介绍"><a href="#Murder-组件介绍" class="headerlink" title="Murder 组件介绍"></a>Murder 组件介绍</h2><p>Murder 是基于 BitTornado 来实现的。有以下几个主要组件：</p><ul><li><strong>torrent tracker</strong> ：tracker 使用 <code>murder_tracker.py</code> 运行，tracker 实际上是运行中一台服务器上的单个服务，其他任何成员都要依赖它。Murder为了保持简单，并没有实现tracker-less distribution（DHT）功能。tracker 实际上是个迷你的 httpd 服务，存放着BitTorrent客户端需要更新状态的路径。</li><li><strong>seeder</strong> ：sender 是存放要分发到其他主机的文件的服务器。这些文件存放在 seeder 的一个目录中，Murder 会将这个目录打包成 tgz 格式并创建一个 <code>.torrent</code> 文件（非常小的文件，包含有关这个tgz文件的基本hash信息）。这个 <code>.torrent</code> 文件让各个 peer 节点知道他们下载的是什么文件。同时，tracker 会保持跟踪有哪些 <code>.torrent</code> 文件正在被分发。一旦 Murder 开始传输文件，seeder 服务器将是各个 peer 节点获取种子的地方。</li><li><strong>peers</strong> ：peer 是成百上千需要接收文件的服务器，并且它们之间可以相互传输文件（下载、上传）。一旦一个peer节点下载完整个 tgz 文件，还将继续 seeding 一段时间，防止蜜罐效应。 </li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在 tracker 服务器下载并安装 Murder，写成脚本运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</div><div class="line">wget https://codeload.github.com/lg/murder/zip/master</div><div class="line">mv master murder.zip</div><div class="line">unzip murder.zip</div><div class="line">mv murder-master /usr/<span class="built_in">local</span>/murder</div></pre></td></tr></table></figure><p>配置好 ansible 服务，连通各个 peer 节点。 </p><p>通过 ansible 将tracker服务器下的 <code>master.zip</code> 分发到各个 peer 节点的家目录下，并解压安装 Murder ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># ansible all -m copy -a &quot;src=/usr/local/src/murder.zip dest=~&quot;</div><div class="line"># ansible all -m shell -a &quot;unzip murder.zip ; mv murder-master murder&quot;</div></pre></td></tr></table></figure><p>各个节点ip和环境说明：</p><ul><li>tracker : 192.168.1.100</li><li>seeder : 192.168.1.100</li><li>peers : 192.168.1.101-111</li><li>服务器都在同一个机房</li><li>都是 CentOS 6.5 系统</li></ul><h2 id="启动-tracker-服务"><a href="#启动-tracker-服务" class="headerlink" title="启动 tracker 服务"></a>启动 tracker 服务</h2><p>在 Tracker 服务器，启动 tracker 服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># python /usr/local/murder/dist/murder_tracker.py &gt; /var/log/murder_tracker.log 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure><p>检查端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># netstat -tnlp|grep 8998</div></pre></td></tr></table></figure><p>实时查看日志输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># tailf /var/log/murder_tracker.log</div></pre></td></tr></table></figure><p><code>murder_tracker.py</code> 实际上是调用 <code>BitTornado/BT1/track.py</code> 这个文件。 <code>track.py</code> 有很多参数，如果需要添加参数，可以修改 <code>murder_tracker.py</code>。</p><p>几个重要参数：</p><ul><li>port ：tracker 监听的端口，默认 8998</li><li>dfile ：存储近期下载信息的文件</li><li>logfile ：tracker 日志文件，默认是标准输出</li></ul><h2 id="在-seeder-服务器上准备要分发的文件并创建种子"><a href="#在-seeder-服务器上准备要分发的文件并创建种子" class="headerlink" title="在 seeder 服务器上准备要分发的文件并创建种子"></a>在 seeder 服务器上准备要分发的文件并创建种子</h2><p>这里将 seeder 和 tracker 服务 放在同一台服务器。</p><p>准备分发文件，并放在 <code>/home/data/murder/</code> 目录下。</p><p>生成种子文件的脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="comment"># 定义变量</span></div><div class="line">deploy_file=/home/data/murder/deploy.test.tar.gz</div><div class="line"><span class="comment"># 因所有peer节点已经打通内网，这里用seeder服务器的内网地址</span></div><div class="line">Seeder_IP=192.168.1.100</div><div class="line">make_torrent_command=/usr/<span class="built_in">local</span>/murder/dist/murder_make_torrent.py</div><div class="line"></div><div class="line"><span class="comment"># 生成种子</span></div><div class="line">python <span class="variable">$&#123;make_torrent_command&#125;</span> <span class="variable">$&#123;deploy_file&#125;</span> <span class="variable">$&#123;Seeder_IP&#125;</span>:8998 <span class="variable">$&#123;deploy_file&#125;</span>.torrent</div></pre></td></tr></table></figure><h2 id="分发种子文件给所有的peer节点"><a href="#分发种子文件给所有的peer节点" class="headerlink" title="分发种子文件给所有的peer节点"></a>分发种子文件给所有的peer节点</h2><p>利用 ansible 分发seeder服务器上的种子文件给所有的 peer 节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ansible all -m synchronize -a &quot;src=/home/data/murder/deploy.test.tar.gz.torrent dest=~&quot;</div></pre></td></tr></table></figure><h2 id="启动-seeder-服务"><a href="#启动-seeder-服务" class="headerlink" title="启动 seeder 服务"></a>启动 seeder 服务</h2><p>启动 seeder 服务的脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="comment"># 定义变量</span></div><div class="line">deploy_file=/home/data/murder/deploy.test.tar.gz</div><div class="line">start_ip=192.168.1.100</div><div class="line">make_torrent_command=/usr/<span class="built_in">local</span>/murder/dist/murder_client.py</div><div class="line"></div><div class="line"><span class="comment"># 启动 seeder，放到后台运行</span></div><div class="line">python <span class="variable">$&#123;make_torrent_command&#125;</span> seed <span class="variable">$&#123;deploy_file&#125;</span>.torrent <span class="variable">$&#123;deploy_file&#125;</span> <span class="variable">$&#123;start_ip&#125;</span> &amp;</div></pre></td></tr></table></figure><p>要确保 seeder 服务在启动状态，否则 peer 节点下载时连接不到。</p><h2 id="在各个peer节点执行下载任务"><a href="#在各个peer节点执行下载任务" class="headerlink" title="在各个peer节点执行下载任务"></a>在各个peer节点执行下载任务</h2><p>编写下载脚本 <code>peer_download.sh</code> ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="comment"># 用于各个 peer 节点根据种子文件信息，执行下载任务</span></div><div class="line"></div><div class="line"><span class="comment"># 定义变量</span></div><div class="line">torrent_file=~/deploy.test.tar.gz.torrent</div><div class="line">download_file=~/download/deploy.test.tar.gz</div><div class="line"><span class="comment"># 这里获取各个 peer 节点自己的内网IP</span></div><div class="line">local_ip=$(hostname -I|awk <span class="string">'&#123;print $2&#125;'</span>)</div><div class="line">murder_client_bin=~/murder/dist/murder_client.py</div><div class="line"></div><div class="line"><span class="comment"># 在各个 peer 节点执行 P2P 下载命令</span></div><div class="line">python  <span class="variable">$murder_client_bin</span> peer <span class="variable">$torrent_file</span> <span class="variable">$download_file</span> <span class="variable">$local_ip</span></div></pre></td></tr></table></figure><p>利用ansible远程操控，在每个peer节点都执行下载脚本。使用ansible的 script 模块，在本地写一个脚本，然后在远程服务器执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># ansible all -m script -a &quot;peer_download.sh&quot;</div></pre></td></tr></table></figure><p>服务器越多时，P2P方式分发文件速度越快。服务器不超过50+时，还是用 ansible 直接分发更快。</p><h2 id="文件都下载完后，关闭-seeder-服务器进程"><a href="#文件都下载完后，关闭-seeder-服务器进程" class="headerlink" title="文件都下载完后，关闭 seeder 服务器进程"></a>文件都下载完后，关闭 seeder 服务器进程</h2><p>kill 掉 seeder 的进程PID，避免它一直做种子和提升安全性。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://blog.51cto.com/john88wang/1793080" target="_blank" rel="external">结合P2P软件使用Ansible分发大文件</a></li><li><a href="http://jaminzhang.github.io/p2p/use-Murder-to-distribute-big-software-package-in-production-environment/" target="_blank" rel="external">Murder 在生产环境中分发大软件包的应用</a></li><li><a href="https://wuyanteng.github.io/2017/10/12/%E5%9C%A8%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%ADP2P%E5%88%86%E5%8F%91%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%9A%84%E5%BA%94%E7%94%A8-Murder/" target="_blank" rel="external">在生产环境中-P2P分发大软件包的应用-Murder</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;当服务器超过20+时，为了管理方便和提升效率，就会用到自动化管理工具（如Ansible）来自动部署和批量分发文件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;场景描述：目前有50+台服务器，已部署Ansible用于自动化部署和批量分发文件。批量分发文件时，一般把文件传到 Ansible 所在的服务器并通过 copy 模块传输，文件小于100M时，分发正常。当传输大文件时（100M+），受单节点及其带宽的影响，整个分发过程变得非常缓慢，甚至出现Ansible卡死。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用 Ansible 来分发小文件速度很快，但对于大文件，文件分发就是一个很大的问题。在使用单一分布点和固定出口带宽的情况下，经常存在带宽拥堵、耗费时间长的问题。&lt;/p&gt;
&lt;p&gt;对于大文件分发，首先想到的是 BitTorrent ，利用 P2P 协议实现快速分发，节省带宽，提高效率。&lt;/p&gt;
    
    </summary>
    
      <category term="技术杂项" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="P2P" scheme="http://yoursite.com/tags/P2P/"/>
    
      <category term="DevOps" scheme="http://yoursite.com/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>Python-tricks</title>
    <link href="http://yoursite.com/2018/Python-tricks.html"/>
    <id>http://yoursite.com/2018/Python-tricks.html</id>
    <published>2018-02-09T07:20:08.000Z</published>
    <updated>2018-02-28T09:50:07.691Z</updated>
    
    <content type="html"><![CDATA[<p>收集于 <a href="https://dbader.org/" target="_blank" rel="external">Dan Bader 博客</a></p><a id="more"></a><h1 id="一行代码合并字典-dict"><a href="#一行代码合并字典-dict" class="headerlink" title="一行代码合并字典(dict)"></a>一行代码合并字典(dict)</h1><p>实际开发中，经常需要合并字典，例如：<code>default={&#39;name&#39;:&#39;Tom&#39;,&#39;age&#39;:18,&#39;gender&#39;:&#39;man&#39;}</code> 默认配置，用户的配置 <code>user={&#39;name&#39;:&#39;Jak&#39;,&#39;age&#39;:20}</code>，这时就需要合并两个字典，获取总的配置。</p><p>假设有两个字典(dict)： x 和 y ，合并成一个新的 dict ，不改变 x 和 y 的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; x = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2&#125;</div><div class="line">&gt;&gt;&gt; y = &#123;&apos;b&apos;: 3, &apos;c&apos;: 4&#125;</div></pre></td></tr></table></figure><p>期待得到一个新的结果 z ，如果 key 相同，则 y 会覆盖 x ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; z</div><div class="line">&#123;&apos;a&apos;: 1, &apos;b&apos;: 3, &apos;c&apos;: 4&#125;</div></pre></td></tr></table></figure><h2 id="python3-5"><a href="#python3-5" class="headerlink" title="python3.5+"></a>python3.5+</h2><p>在 PEP448 中，有个新语法可以实现，并且在 python3.5中支持该语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; z = &#123;**x,**y&#125;</div><div class="line">&gt;&gt;&gt; z</div><div class="line">&#123;&apos;a&apos;: 1, &apos;b&apos;: 3, &apos;c&apos;: 4&#125;</div></pre></td></tr></table></figure><p>一行代码搞定</p><p>这种语法还支持一次合并多个字典（三个及三个以上）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; u = &#123;&apos;c&apos;:5,&apos;d&apos;:6&#125;</div><div class="line">&gt;&gt;&gt; &#123;**x,**y,**u&#125;</div><div class="line">&#123;&apos;a&apos;: 1, &apos;b&apos;: 3, &apos;c&apos;: 5, &apos;d&apos;: 6&#125;</div></pre></td></tr></table></figure><h2 id="python2-x"><a href="#python2-x" class="headerlink" title="python2.x"></a>python2.x</h2><p>对于 python2.x 和 python3.0-3.4 的版本，有比较优雅的合并，但需要两行代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; z = x.copy()</div><div class="line">&gt;&gt;&gt; z.update(y)</div></pre></td></tr></table></figure><p>当然，还有个一行代码合并的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; z = dict(x,**y)</div><div class="line">&gt;&gt;&gt; z</div><div class="line">&#123;&apos;a&apos;: 1, &apos;b&apos;: 3, &apos;c&apos;: 4&#125;</div></pre></td></tr></table></figure><h1 id="一次测试多个标记的不同方法"><a href="#一次测试多个标记的不同方法" class="headerlink" title="一次测试多个标记的不同方法"></a>一次测试多个标记的不同方法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># 一次测试多个标记</div><div class="line">x, y, z = 0, 1, 0</div><div class="line"></div><div class="line">if x == 1 or y == 1 or z == 1:</div><div class="line">    print(&apos;passed&apos;)</div><div class="line"></div><div class="line">if 1 in (x, y, z):</div><div class="line">    print(&apos;passed&apos;)</div><div class="line"></div><div class="line"># 只测试是否为真</div><div class="line">if x or y or z:</div><div class="line">    print(&apos;passed&apos;)</div><div class="line"></div><div class="line">if any((x, y, z)):</div><div class="line">    print(&apos;passed&apos;)</div></pre></td></tr></table></figure><h1 id="对字典按key排序和按value排序"><a href="#对字典按key排序和按value排序" class="headerlink" title="对字典按key排序和按value排序"></a>对字典按key排序和按value排序</h1><p>字典类型是无序的，因而对字典排序的原理是，将字典转变为列表或者元组。</p><p>对字典排序，需要借助函数 <code>sorted()</code>，这是python内置的一个排序函数，它会从一个迭代器返回一个排好序的新列表。</p><blockquote><p><code>sorted(iterable,key,reverse)</code> 共有三个参数。<br><code>iterable</code> 表示可迭代的对象，如 dict.items( )、dict.key( )等。<br><code>key</code> 是一个函数，用来选取参与排序的元素。<code>reverse</code> 用来指定排序是倒序还是顺序。<code>true</code>是倒序，<code>false</code>是顺序，默认 <code>reverse=false</code>。</p></blockquote><h2 id="按value排序"><a href="#按value排序" class="headerlink" title="按value排序"></a>按value排序</h2><p>借助 <code>lambda</code> 表达式选取参与排序的元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; xs = &#123;&apos;a&apos;: 4, &apos;b&apos;: 3, &apos;c&apos;: 2, &apos;d&apos;: 1&#125;</div><div class="line">&gt;&gt;&gt; sorted(xs.items(), key=lambda x: x[1])</div><div class="line">[(&apos;d&apos;, 1), (&apos;c&apos;, 2), (&apos;b&apos;, 3), (&apos;a&apos;, 4)]</div></pre></td></tr></table></figure><blockquote><p>items() : 将字典转为可迭代对象，会将字典元素转为元组<br>lambda x: x[1] : 选取元组中第二个元素作为排序参数并输出</p></blockquote><p>或者可以借助 <code>operator</code> 模块的 <code>itemgetter( )</code> 函数，该函数用于获取对象的哪些维的数据，参数为一些序号（即需要获取的数据在对象中的序号）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import operator</div><div class="line">&gt;&gt;&gt; sorted(xs.items(), key=operator.itemgetter(1))</div><div class="line">[(&apos;d&apos;, 1), (&apos;c&apos;, 2), (&apos;b&apos;, 3), (&apos;a&apos;, 4)]</div></pre></td></tr></table></figure><p>注意，<code>operator.itemgetter</code> 函数获取的不是值，而是定义了一个函数，通过该函数作用到对象上才能获取值。</p><h2 id="按key排序"><a href="#按key排序" class="headerlink" title="按key排序"></a>按key排序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; xs = &#123;&apos;c&apos;: 4, &apos;a&apos;: 3, &apos;d&apos;: 2, &apos;b&apos;: 1&#125;</div><div class="line"></div><div class="line">&gt;&gt;&gt; sorted(xs.items(),key=lambda x:x[0])</div><div class="line">[(&apos;a&apos;, 3), (&apos;b&apos;, 1), (&apos;c&apos;, 4), (&apos;d&apos;, 2)]</div><div class="line"></div><div class="line">&gt;&gt;&gt; sorted(xs.keys())</div><div class="line">[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;]</div></pre></td></tr></table></figure><p>sorted函数的key参数选默认时，字典默认是按 key 排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; sorted(xs.items())</div><div class="line">[(&apos;a&apos;, 3), (&apos;b&apos;, 1), (&apos;c&apos;, 4), (&apos;d&apos;, 2)]</div></pre></td></tr></table></figure><h1 id="巧用dict的get-方法返回默认值"><a href="#巧用dict的get-方法返回默认值" class="headerlink" title="巧用dict的get()方法返回默认值"></a>巧用dict的get()方法返回默认值</h1><blockquote><p>python 的 dict 自带有 <code>get(key)</code> 方法，根据指定的key，返回对应的value</p></blockquote><p>想象下，我们有个字典结构的数据，user ID 为 key，user name 为 value。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">name_for_userid = &#123;</div><div class="line">    382: &quot;Alice&quot;,</div><div class="line">    950: &quot;Bob&quot;,</div><div class="line">    590: &quot;Dilbert&quot;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在想写一个函数 <code>greeting()</code> ，可以根据 user ID 返回对应的 user name 。</p><p>第一个版本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">def greeting(userid):</div><div class="line">    return &quot;Hi %s!&quot; % name_for_userid[userid]</div></pre></td></tr></table></figure><p>然而当输入非法的key时，会抛出 exception。这样非常不好，会直接导致运行中断。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; greeting(382)</div><div class="line">&apos;Hi Alice!&apos;</div><div class="line">&gt;&gt;&gt; greeting(23333)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 2, in greeting</div><div class="line">KeyError: 23333</div></pre></td></tr></table></figure><p>所以，我们需要考虑输入的 user ID 找不到的情况，可以设置个默认返回值。</p><p>第二个版本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">def greeting(userid):</div><div class="line">    if userid in name_for_userid:</div><div class="line">        return &quot;Hi %s!&quot; % name_for_userid[userid]</div><div class="line">    else:</div><div class="line">        return &quot;Hi there!&quot;</div><div class="line"></div><div class="line">&gt;&gt;&gt; greeting(382)</div><div class="line">&quot;Hi Alice!&quot;</div><div class="line"></div><div class="line">&gt;&gt;&gt; greeting(23333)</div><div class="line">&quot;Hi there!&quot;</div></pre></td></tr></table></figure><p>然而这种方法很不好：</p><ul><li>这是低效的，因为查询了两次字典。</li><li>代码冗长的，不简洁。</li><li>没有[pythonic]的味道。</li></ul><p>因而，一个更好的方法是用 <code>try ... except</code> 语句来捕捉并处理异常。</p><p>第三个版本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">def greeting(userid):</div><div class="line">    try:</div><div class="line">        return &quot;Hi %s!&quot; % name_for_userid[userid]</div><div class="line">    except KeyError:</div><div class="line">        return &quot;Hi there&quot;</div></pre></td></tr></table></figure><p>以上方法的处理，虽然正确，但仍然不够简洁。python 的 dict 自带 <code>get()</code> 方法，支持设置一个默认返回值。</p><p>第四个版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">def greeting(userid):</div><div class="line">    return &quot;Hi %s!&quot; % name_for_userid.get(userid, &quot;there&quot;)</div><div class="line">    </div><div class="line">&gt;&gt;&gt; greeting(950)</div><div class="line">&quot;Hi Bob!&quot;</div><div class="line"></div><div class="line">&gt;&gt;&gt; greeting(23333)</div><div class="line">&quot;Hi there!&quot;</div></pre></td></tr></table></figure><p>相比这四种方法，最后一种更加的简洁、干净、只靠使用pyhton标准库的特性就能处理完成。</p><h1 id="更方便的两个变量换值的方法"><a href="#更方便的两个变量换值的方法" class="headerlink" title="更方便的两个变量换值的方法"></a>更方便的两个变量换值的方法</h1><p>通常我们编程，都是通过借用一个临时变量来交换两个变量的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a = 23</div><div class="line">&gt;&gt;&gt; b = 56</div><div class="line">&gt;&gt;&gt; tmp = a</div><div class="line">&gt;&gt;&gt; a = b</div><div class="line">&gt;&gt;&gt; b = tmp</div></pre></td></tr></table></figure><p>但在 Python 中，有更方便、更简洁的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a,b = b,a</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;收集于 &lt;a href=&quot;https://dbader.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dan Bader 博客&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>免费SSL证书</title>
    <link href="http://yoursite.com/2018/HTTPS-free-SSL-certificate.html"/>
    <id>http://yoursite.com/2018/HTTPS-free-SSL-certificate.html</id>
    <published>2018-01-23T03:34:12.000Z</published>
    <updated>2018-03-01T08:12:16.907Z</updated>
    
    <content type="html"><![CDATA[<p>根据 <a href="https://letsencrypt.org/stats/" target="_blank" rel="external"><strong>Let’s Encrypt CA 统计</strong></a>，截至 2018 年 1 月，Firefox 加载的网页中启用 HTTPS 的比例占 67%，比去年底的 45% 有巨大提升，单年增长21个百分点。浏览器开发商如 Mozilla, Google 准备采取下一步措施：将所有 HTTP 网站标记为不安全。<br>随着 HTTPS 的普及，给网站加个 SSL 证书已经是大势所趋而且很有必要了。</p><p>目前已经存在不少的免费又好用的SSL证书，以下介绍几个。</p><a id="more"></a><h1 id="Let’s-Encrypt"><a href="#Let’s-Encrypt" class="headerlink" title="Let’s Encrypt"></a>Let’s Encrypt</h1><p><a href="https://letsencrypt.org/" target="_blank" rel="external"><strong>Let’s Encrypt</strong></a> 是国外一个公共的免费SSL项目，它由 ISRG（Internet Security Research Group，互联网安全研究小组）提供服务，而 ISRG 是来自于美国加利福尼亚州的一个公益组织。Let’s Encrypt 由 Linux 基金会托管，它的来头不小，由 Mozilla、Cisco、Akamai、IdenTrust、Electronic Frontier Foundation（EFF）等组织发起，目的就是向网站自动签发和管理免费证书，以便加速互联网由 HTTP 过渡到 HTTPS ，目前 Facebook 等大公司开始加入赞助行列。</p><p>Let’s Encrypt 已成为目前使用范围最广泛的免费 SSL 证书，目前不支持通配符SSL证书。但根据 <a href="https://letsencrypt.org/2017/07/06/wildcard-certificates-coming-jan-2018.html" target="_blank" rel="external"> <strong>官方博客</strong> </a>宣布，2018年2月27号 将开始提供通配符证书，这是相当不错的利好消息。唯一遗憾的是，Let’s Encrypt 发行的证书有限期只有三个月，虽然可以通过任务计划来自动续期。</p><h2 id="申请并生成证书"><a href="#申请并生成证书" class="headerlink" title="申请并生成证书"></a>申请并生成证书</h2><h3 id="网上申请"><a href="#网上申请" class="headerlink" title="网上申请"></a>网上申请</h3><p>可通过以下在线申请网站，手动申请证书。</p><p><a href="https://freessl.org/" target="_blank" rel="external"><strong>在线申请地址(中文)</strong></a></p><p><a href="https://letsencrypt.org/" target="_blank" rel="external"><strong>在线申请地址(英文)</strong></a></p><h3 id="shell-申请"><a href="#shell-申请" class="headerlink" title="shell 申请"></a>shell 申请</h3><p>使用该方法的前提是：拥有 shell 权限<br>官方推荐使用自动化工具 <a href="https://certbot.eff.org" target="_blank" rel="external"> <strong>Certbot</strong> </a> 来完成全自动化的申请，Certbot 支持所有 Unix 内核的操作系统。详情请看 <a href="https://github.com/certbot/certbot" target="_blank" rel="external">Certbot的项目地址</a>。</p><p>本系统是 CentOS6.5 和 Nginx 环境，根据环境获取到相应的<a href="https://certbot.eff.org/#centos6-nginx" target="_blank" rel="external"> <strong>安装教程</strong> </a>。</p><h4 id="下载-Certbot-auto-脚本，并修改权限"><a href="#下载-Certbot-auto-脚本，并修改权限" class="headerlink" title="下载 Certbot-auto 脚本，并修改权限"></a>下载 Certbot-auto 脚本，并修改权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># wget https://dl.eff.org/certbot-auto</div><div class="line"># chmod a+x certbot-auto</div><div class="line"># mv certbot-auto /usr/local/bin/</div></pre></td></tr></table></figure><h4 id="获取证书"><a href="#获取证书" class="headerlink" title="获取证书"></a>获取证书</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># certbot-auto certonly --webroot -w /var/www/html --email admin@xxx.com -d xxx.com -d www.xxx.com</div></pre></td></tr></table></figure><blockquote><p>1、该命令会为 <code>xxx.com</code> 和 <code>www.xxx.com</code> 两个域名生成一个证书。<br>2、<code>certonly</code> 子命令作用：生成SSL证书，但不去修改 Nginx或Apache 的配置，需要你手动添加。<br>3、使用 <code>--webroot</code> 模式会在网站根目录 <code>/var/www/html</code> 中创建 <code>.well-known</code> 目录，该目录包含一些验证文件，certbot 会通过访问 <code>http://xxx.com/.well-known/acme-challenge</code> 来验证你的域名是否绑定的这个服务器。这个验证是 Let’s Encrypt 为了验证你是否拥有域名的控制权，避免其他人随意来申请证书。<br>4、<code>--email</code> 指定邮箱，在证书将要过期后，会有邮件提醒发到这个邮箱。不用 <code>--email</code> 指定邮箱的话，脚本运行过程中会有交互，让你填写邮箱，不利于自动化安装。<br>5、<code>-d</code> 指定要申请SSL证书的域名。</p></blockquote><p>但有时候，一些域名并没有根目录，如一些微服务，这时候使用 <code>--webroot</code> 就行不通了。Certbot 提供了另外一种模式 <code>--standalone</code>，这种模式不需要指定网站根目录，它会自动启动服务器的 80或者443 端口，来验证域名的归属。若还有其他服务（如 nginx ）占用了 80或者443 端口，就必须先停止这些服务，等证书生成后，再启用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># certbot-auto certonly --standalone --email admin@xxx.com -d xxx.com -d www.xxx.com</div></pre></td></tr></table></figure><p>证书生成后，在 <code>/etc/letsencrypt/live/</code> 目录下会看到对应域名的文件夹，里边存放了指向证书的快捷方式。</p><p>每个域名一个目录，主要包含以下文件：</p><ul><li>cert.pem ：申请的服务器证书文件</li><li>chain.pem ：除服务器证书外，浏览器解析所需的其他全部证书，比如根证书和中间证书</li><li>fullchain.pem ：包含服务器证书的全部证书链文件</li><li>privkey.pem ：服务器证书对应的私钥</li></ul><h4 id="Nginx配置启用HTTPS"><a href="#Nginx配置启用HTTPS" class="headerlink" title="Nginx配置启用HTTPS"></a>Nginx配置启用HTTPS</h4><p>修改Nginx配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    server_name xxx.com www.xxx.com;</div><div class="line">    listen 443;</div><div class="line">    </div><div class="line">    ssl on;</div><div class="line">    # 公钥路径</div><div class="line">    ssl_certificate /etc/letsencrypt/live/xxx.com/fullchain.pem;</div><div class="line">    # 私钥路径</div><div class="line">    ssl_certificate_key /etc/letsencrypt/live/xxx.com/privkey.pem;</div><div class="line">        </div><div class="line">    ...</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使配置生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># nginx -t </div><div class="line"># nginx -s reload</div></pre></td></tr></table></figure><h4 id="自动更新-SSL-证书"><a href="#自动更新-SSL-证书" class="headerlink" title="自动更新 SSL 证书"></a>自动更新 SSL 证书</h4><p>Let’s Encrypt 提供的证书只有90天的有效期，必须在证书到期之前续期，Certbot 提供了一个很方便的子命令 <code>renew</code> 用于续期 SSL 证书(重新生成证书)，他会自动检查系统内的证书，并且自动更新这些证书。</p><p>测试 <code>renew</code> 子命令运行，即重新生成证书是否报错（注意，这只是测试，还没真正重新生成证书）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># certbot-auto renew --dry-run</div></pre></td></tr></table></figure><p>对于 <code>--webroot</code> 模式生成的证书，编写任务计划如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 每隔两个月，凌晨2点，重新生成证书</div><div class="line">0 2 * */2 * certbot-auto renew</div></pre></td></tr></table></figure><p>对于 <code>--standalone</code> 模式生成的证书，重新生成证书还得占用80或者443端口，得提前关闭Nginx服务，编写任务计划如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 每隔两个月，凌晨2点，重新生成证书</div><div class="line">1 2 * */2 * certbot-auto renew --pre-hook &quot;service nginx stop&quot; --post-hook &quot;service nginx start&quot;</div></pre></td></tr></table></figure><blockquote><p><code>--pre-hook</code> 执行更新之前要做的操作<br><code>--post-hook</code> 执行更新后要做的操作</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据 &lt;a href=&quot;https://letsencrypt.org/stats/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Let’s Encrypt CA 统计&lt;/strong&gt;&lt;/a&gt;，截至 2018 年 1 月，Firefox 加载的网页中启用 HTTPS 的比例占 67%，比去年底的 45% 有巨大提升，单年增长21个百分点。浏览器开发商如 Mozilla, Google 准备采取下一步措施：将所有 HTTP 网站标记为不安全。&lt;br&gt;随着 HTTPS 的普及，给网站加个 SSL 证书已经是大势所趋而且很有必要了。&lt;/p&gt;
&lt;p&gt;目前已经存在不少的免费又好用的SSL证书，以下介绍几个。&lt;/p&gt;
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="https" scheme="http://yoursite.com/tags/https/"/>
    
      <category term="ssl" scheme="http://yoursite.com/tags/ssl/"/>
    
  </entry>
  
  <entry>
    <title>安装nginx的lua-nginx-module模块</title>
    <link href="http://yoursite.com/2017/Nginx-install-lua-nginx-module.html"/>
    <id>http://yoursite.com/2017/Nginx-install-lua-nginx-module.html</id>
    <published>2017-12-15T08:52:07.000Z</published>
    <updated>2018-03-01T10:58:15.834Z</updated>
    
    <content type="html"><![CDATA[<p>要在 Nginx 中安装 lua-nginx-module 模块，有两种方法。</p><a id="more"></a><h1 id="编译安装lua-nginx-module模块"><a href="#编译安装lua-nginx-module模块" class="headerlink" title="编译安装lua-nginx-module模块"></a>编译安装lua-nginx-module模块</h1><p>手动编译 lua-nginx-module ，参考 <a href="https://github.com/openresty/lua-nginx-module#installation" target="_blank" rel="external"><strong>官方安装文档</strong></a>，完成以下安装。</p><p>安装需要：</p><ul><li><a href="http://nginx.org/" target="_blank" rel="external"><strong>Nginx</strong></a></li><li><a href="http://luajit.org/download.html" target="_blank" rel="external"><strong>LuaJIT</strong></a> : Lua 或者 LuaJIT都可以，但出于性能的考虑，推荐安装LuaJIT</li><li><a href="https://github.com/simpl/ngx_devel_kit/tags" target="_blank" rel="external"><strong>ngx_devel_kit</strong></a></li><li><a href="https://github.com/openresty/lua-nginx-module/tags" target="_blank" rel="external"><strong>lua-nginx-module</strong></a></li></ul><p>依赖包安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum install pcre-devel openssl openssl-devel</div></pre></td></tr></table></figure><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><p>nginx已经安装，这里就不介绍了</p><h2 id="下载安装LuaJIT"><a href="#下载安装LuaJIT" class="headerlink" title="下载安装LuaJIT"></a>下载安装LuaJIT</h2><p>2.0 或者 2.1 版本都支持，但官方推荐2.1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/src</div><div class="line"># wget  http://luajit.org/download/LuaJIT-2.1.0-beta3.tar.gz</div><div class="line"># tar zxvf LuaJIT-2.1.0-beta3.tar.gz</div><div class="line"># cd LuaJIT-2.1.0</div><div class="line"># make</div><div class="line"># make install</div></pre></td></tr></table></figure><h2 id="下载ngx-devel-kit-NDK-模块"><a href="#下载ngx-devel-kit-NDK-模块" class="headerlink" title="下载ngx_devel_kit(NDK)模块"></a>下载ngx_devel_kit(NDK)模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># curl -L -O https://github.com/simpl/ngx_devel_kit/archive/v0.3.0.tar.gz</div><div class="line"># tar zxvf v0.3.0.tar.gz</div></pre></td></tr></table></figure><h2 id="下载安装lua-nginx-module模块"><a href="#下载安装lua-nginx-module模块" class="headerlink" title="下载安装lua-nginx-module模块"></a>下载安装lua-nginx-module模块</h2><p>下载解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># curl -L -O https://github.com/openresty/lua-nginx-module/archive/v0.10.11.tar.gz</div><div class="line"># tar zxvf v0.10.11.tar.gz</div></pre></td></tr></table></figure><p>查看原nginx版本的编译参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># nginx -V</div><div class="line">configure arguments: --prefix=/usr/local/nginx --with-http_sysguard_module --with-http_realip_module</div></pre></td></tr></table></figure><p>编译安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">用于告诉 nginx 如何找到 LuaJIT 2.1:</div><div class="line"># export LUAJIT_LIB=/usr/local/luajit/lib</div><div class="line"># export LUAJIT_INC=/usr/local/luajit/include/luajit-2.1</div><div class="line"></div><div class="line">进入 nginx 源码包，重新编译安装</div><div class="line"># ./configure  --prefix=/usr/local/nginx --with-http_sysguard_module --with-http_realip_module --with-ld-opt=&quot;-Wl,-rpath,/usr/local/lib&quot; --add-module=/usr/local/src/ngx_devel_kit-0.3.0 --add-module=/usr/local/src/lua-nginx-module-0.10.11</div><div class="line"># make </div><div class="line"># make install</div></pre></td></tr></table></figure><h2 id="验证-lua-nginx-module-安装是否成功"><a href="#验证-lua-nginx-module-安装是否成功" class="headerlink" title="验证 lua-nginx-module 安装是否成功"></a>验证 lua-nginx-module 安装是否成功</h2><p>在 server段 配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">location /hello_lua &#123; </div><div class="line">      default_type &apos;text/plain&apos;; </div><div class="line">      content_by_lua &apos;ngx.say(&quot;hello, lua&quot;)&apos;; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使得配置生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># nginx -t</div><div class="line"># nginx -s reload</div></pre></td></tr></table></figure><p>访问显示 <code>hello, lua</code>，则说明 lua-nginx-module 安装成功。</p><h1 id="直接安装-openresty"><a href="#直接安装-openresty" class="headerlink" title="直接安装 openresty"></a>直接安装 openresty</h1><h2 id="安装-openresty"><a href="#安装-openresty" class="headerlink" title="安装 openresty"></a>安装 openresty</h2><p>OpenResty （也称为 ngx_openresty）是一个全功能的 Web 应用服务器，它打包了标准的 Nginx 核心，很多高质量的第三方模块，以及它们的大多数依赖项。通过汇聚各种nginx模块，从而将nginx有效地变成一个强大的web应用服务器，从而使web开发人员可以使用lua脚本语言调用nginx支持的各种C和lua模块，快速构造出足以胜任10K+并发连接响应的超高性能web应用。</p><p>安装依赖包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum install readline-devel pcre-devel openssl-devel</div></pre></td></tr></table></figure><p>去 <a href="http://openresty.org/cn/" target="_blank" rel="external"><strong>官方</strong></a> 下载并安装 openrestry</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># wget https://openresty.org/download/openresty-1.13.6.1.tar.gz</div><div class="line"># tar zxvf openresty-1.13.6.1.tar.gz</div><div class="line"># cd openresty-1.13.6.1</div><div class="line"># ./configure</div><div class="line"># make</div><div class="line"># make install</div></pre></td></tr></table></figure><p>默认配置，openresty会安装在/usr/local/openresty 中</p><p>设置环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># vim /etc/profile</div><div class="line">PATH=/usr/local/openresty/nginx/sbin:$PATH</div><div class="line">export PATH</div></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># nginx -v</div><div class="line">nginx version: openresty/1.13.6.1</div></pre></td></tr></table></figure><h2 id="lua-包管理"><a href="#lua-包管理" class="headerlink" title="lua 包管理"></a>lua 包管理</h2><p>openresty 基于 Lua 语言开发，所以lua的开发环境和包管理器是开发一个重要支持。Luarocks 是一个 Lua 包管理器，，提供一个命令行的方式来管理 Lua 包依赖、安装第三方 Lua 包等。 </p><p>去 <a href="http://luarocks.github.io/luarocks/releases/" target="_blank" rel="external"><strong>Luarocks官网</strong></a> 下载并安装:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># wget http://luarocks.github.io/luarocks/releases/luarocks-2.4.3.tar.gz</div><div class="line"># tar zxvf luarocks-2.4.3.tar.gz</div><div class="line"># cd luarocks-2.4.3</div><div class="line"># ./configure --with-lua-bin=/usr/bin/  --with-lua-include=/usr/local/openresty/luajit/include/luajit-2.1/</div><div class="line"># make </div><div class="line"># make install</div></pre></td></tr></table></figure><p>dddfWe2d32</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要在 Nginx 中安装 lua-nginx-module 模块，有两种方法。&lt;/p&gt;
    
    </summary>
    
      <category term="技术杂项" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx动态黑名单</title>
    <link href="http://yoursite.com/2017/Nginx-auto-add-blacklist.html"/>
    <id>http://yoursite.com/2017/Nginx-auto-add-blacklist.html</id>
    <published>2017-12-13T09:15:22.000Z</published>
    <updated>2018-01-18T08:03:22.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="没挂上CDN"><a href="#没挂上CDN" class="headerlink" title="没挂上CDN"></a>没挂上CDN</h2><p>没使用CDN的情况下，通过 <code>remote_addr</code> 可获取用户的真实IP，进而利用 nginx 的 <code>deny</code> 功能来禁止指定IP访问。</p><p>nginx的accesslog日志格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class="line">                     &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class="line">                     &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &quot;$request_time&quot;&apos;;</div></pre></td></tr></table></figure><p>在 <code>conf</code> 目录新建 <code>blacklist.conf</code></p><p>添加 <code>blacklist.conf</code> 到配置文件中</p><ul><li>全站屏蔽：把 <code>include blacklist.conf;</code> 放到 <code>http{ ... }</code> 语句块中。</li><li>单独站点屏蔽：把 <code>include blacklist.conf;</code> 放到网站对应的 <code>server{ ... }</code> 语句块中。</li></ul><p>编写脚本 <code>auto_add_blacklist.sh</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">conf_path=/usr/local/nginx/conf/blacklist.conf</div><div class="line">log_path=/usr/local/nginx/logs/access.log</div><div class="line">nginx_command=/usr/local/nginx/sbin/nginx</div><div class="line">spider=&quot;Google|Baidu|msnbot|FeedSky|Sogou|360|bing|yahoo&quot;</div><div class="line"></div><div class="line"># 实时查询日志最后的5万条记录，过滤掉正常的蜘蛛访问，对用户真实ip访问量做统计，这段时间内访问量超过峰值会自动添加ip到黑名单文件</div><div class="line">tail -n50000 $&#123;log_path&#125; | \</div><div class="line">awk &apos;&#123;print $1,$12,$14&#125;&apos;|grep -i -v -E $&#123;spider&#125;| \</div><div class="line">awk &apos;&#123;print $1&#125;&apos;|sort|uniq -c|sort -rn| \</div><div class="line">awk &apos;&#123; if($1 &gt; 1000) print &quot;deny &quot;$2 &quot;;&quot;&#125;&apos; &gt; $&#123;conf_path&#125;</div><div class="line"></div><div class="line">$&#123;nginx_command&#125; -t</div><div class="line">if [ $? -eq 0 ]</div><div class="line">then</div><div class="line">    $&#123;nginx_command&#125; -s reload</div><div class="line">fi</div></pre></td></tr></table></figure><p>添加任务计划：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 半小时检查一次，自动添加ip黑名单</div><div class="line">*/30 * * * * sh /root/crontab_sh/auto_add_blacklist.sh</div></pre></td></tr></table></figure><p>重启 <code>crond</code> 服务。</p><p>该方法可以防范少量的DDOS攻击，也可用于高并发时临时限制访问量偏高的ip。</p><h2 id="挂上CDN"><a href="#挂上CDN" class="headerlink" title="挂上CDN"></a>挂上CDN</h2>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;没挂上CDN&quot;&gt;&lt;a href=&quot;#没挂上CDN&quot; class=&quot;headerlink&quot; title=&quot;没挂上CDN&quot;&gt;&lt;/a&gt;没挂上CDN&lt;/h2&gt;&lt;p&gt;没使用CDN的情况下，通过 &lt;code&gt;remote_addr&lt;/code&gt;
        
      
    
    </summary>
    
      <category term="nginx" scheme="http://yoursite.com/categories/nginx/"/>
    
    
      <category term="安全" scheme="http://yoursite.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>MySQL慢查询日志</title>
    <link href="http://yoursite.com/2017/Mysql-slowlog.html"/>
    <id>http://yoursite.com/2017/Mysql-slowlog.html</id>
    <published>2017-11-23T08:59:03.000Z</published>
    <updated>2017-11-27T03:49:45.521Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>The slow query log consists of SQL statements that took more than long_query_time seconds to execute and required at least min_examined_row_limit rows to be examined. The minimum and default values of long_query_time are 0 and 10, respectively. The value can be specified to a resolution of microseconds. For logging to a file, times are written including the microseconds part. For logging to tables, only integer times are written; the microseconds part is ignored.</p><p>By default, administrative statements are not logged, nor are queries that do not use indexes for lookups. This behavior can be changed using log_slow_admin_statements and log_queries_not_using_indexes, as described later.</p></blockquote><p>MySQL慢查询日志是MySQL提供的一种日志记录，用来记录执行时长超过指定时长的查询语句，具体指运行时间超过 <code>long_query_time</code> 值的 SQL 语句，则会被记录到慢查询日志中。</p><p><code>long_query_time</code> 默认值是 <code>10</code> ，单位是 <code>s</code>，即默认是 10秒 。默认情况下，MySQL数据库并不会开启慢查询日志，需要手动设置这个参数。</p><p>通过慢查询日志，可以查找出哪些查询语句的执行效率很低，以便进行优化。一般建议开启，它对服务器性能的影响微乎其微，但是可以记录MySQL服务器上执行了很长时间的查询语句。慢查询日志可以帮助我们定位mysql性能问题所在。</p><a id="more"></a><h1 id="MySQL慢查询日志"><a href="#MySQL慢查询日志" class="headerlink" title="MySQL慢查询日志"></a>MySQL慢查询日志</h1><h2 id="慢查询日志相关参数"><a href="#慢查询日志相关参数" class="headerlink" title="慢查询日志相关参数"></a>慢查询日志相关参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">slow_query_log : 是否启用慢查询日志，[1 | 0] 或者 [ON | OFF]</div><div class="line"></div><div class="line">slow_query_log_file : MySQL数据库（5.6及以上版本）慢查询日志存储路径。</div><div class="line">                    可以不设置该参数，系统则会默认给一个缺省的文件 HOST_NAME-slow.log</div><div class="line"></div><div class="line">long_query_time : 慢查询的阈值，当查询时间超过设定的阈值时，记录该SQL语句到慢查询日志。</div><div class="line"></div><div class="line">log_queries_not_using_indexes ：设置为 ON ，可以捕获到所有未使用索引的SQL语句(不建议启用)，默认为 OFF 。</div><div class="line">log_slow_admin_statements : 是否将慢管理语句（例如ANALYZE TABLE和ALTER TABLE等）记录进慢查询日志中，默认为 OFF 。</div><div class="line"></div><div class="line">log_output : 日志存储方式。</div><div class="line">            log_output=&apos;FILE&apos;，表示将日志存入文件，默认值是&apos;FILE&apos;。      </div><div class="line">            log_output=&apos;TABLE&apos;，表示将日志存入数据库，这样日志信息就会被写入到 mysql.slow_log 表中。</div><div class="line">            MySQL数据库支持同时两种日志存储方式，配置的时候以逗号隔开即可，如：log_output=&apos;FILE,TABLE&apos;。</div><div class="line">            日志记录到系统的专用日志表中，要比记录到文件耗费更多的系统资源，因此对于需要启用慢查询日志，又需要能够获得更高的系统性能，那么建议优先记录到文件。</div></pre></td></tr></table></figure><p>5.6之前的版本，有些参数名字不一样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">log-slow-queries : MySQL数据库（5.6以下版本）慢查询日志存储路径。</div></pre></td></tr></table></figure><h2 id="开启日志"><a href="#开启日志" class="headerlink" title="开启日志"></a>开启日志</h2><h3 id="立即生效，重启失效"><a href="#立即生效，重启失效" class="headerlink" title="立即生效，重启失效"></a>立即生效，重启失效</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql&gt; set global slow_query_log=ON;</div><div class="line">mysql&gt; set global slow_query_log_file=&apos;/xxx/mysql-slow.log&apos;;</div><div class="line">mysql&gt; set global long_query_time=1;</div></pre></td></tr></table></figure><h3 id="永久生效"><a href="#永久生效" class="headerlink" title="永久生效"></a>永久生效</h3><p>修改 <code>my.cnf</code> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[mysqld]</div><div class="line">slow_query_log           = 1</div><div class="line">slow_query_log_file      = /xxx/mysql-slow.log</div><div class="line">long_query_time          = 1</div><div class="line"></div><div class="line"># 也可以写成这种形式</div><div class="line">slow-query-log           = 1</div><div class="line">slow-query-log-file      = /xxx/mysql-slow.log</div><div class="line">long-query-time          = 1</div></pre></td></tr></table></figure><p>重启mysql服务。</p><h2 id="关闭日志"><a href="#关闭日志" class="headerlink" title="关闭日志"></a>关闭日志</h2><p>临时关闭，重启失效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; set global slow_query_log=OFF;</div></pre></td></tr></table></figure><p>永久关闭，修改 <code>my.cnf</code>，重启mysql服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[mysqld]</div><div class="line">slow_query_log           = 0</div></pre></td></tr></table></figure><h1 id="MySQL慢查询日志分析"><a href="#MySQL慢查询日志分析" class="headerlink" title="MySQL慢查询日志分析"></a>MySQL慢查询日志分析</h1><h2 id="慢查询日志格式说明"><a href="#慢查询日志格式说明" class="headerlink" title="慢查询日志格式说明"></a>慢查询日志格式说明</h2><p>打开慢查询日志 <code>mysql-slow.log</code> ，内容都是以下格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Time: 2017-11-22T12:22:32.554299Z</div><div class="line"># User@Host: www[www] @  [192.168.10.2]  Id: 580785559</div><div class="line"># Query_time: 24.354270  Lock_time: 0.000238 Rows_sent: 1  Rows_examined: 511156</div><div class="line">SET timestamp=1511353352;</div><div class="line">SELECT * FROM mo_user WHERE email = &apos;chxxx@hotmail.com&apos; LIMIT 1;</div></pre></td></tr></table></figure><p>其中参数说明如下：</p><ul><li>log 记录的时间：<code># Time: 2017-11-22T12:22:32.554299Z</code></li><li>SQL 的执行主机：<code># User@Host: www[www] @  [192.168.10.2]  Id: 580785559</code></li><li>SQL 的执行信息（执行时间(单位：s)，锁时间，返回结果行数，查询总行数）：<code># Query_time: 24.354270  Lock_time: 0.000238 Rows_sent: 1  Rows_examined: 511156;</code></li><li>SQL 执行发生的时间：<code>SET timestamp=1511353352;</code></li><li>SQL 的执行内容：<code>SELECT * FROM mo_user WHERE email = &#39;chxxx@hotmail.com&#39; LIMIT 1;</code></li></ul><h3 id="新增参数log-timestamps说明"><a href="#新增参数log-timestamps说明" class="headerlink" title="新增参数log_timestamps说明"></a>新增参数log_timestamps说明</h3><p><code># Time: 2017-11-22T12:22:32.554299Z</code>用的是 <code>UTC</code> 时间，国内标准时间是 <code>CST</code> ，<code>UTC</code> 时间比 <code>CST</code> 时间慢8个小时。</p><blockquote><p>This variable was added in MySQL 5.7.2. Before 5.7.2, timestamps in log messages were written using the local system time zone by default, not UTC. If you want the previous log message time zone default, set log_timestamps=SYSTEM.</p></blockquote><p>根据官网介绍，在 <code>MySQL 5.7.2</code> 新增了 <code>log_timestamps</code> 这个参数，该参数主要是控制 <code>error log</code>、<code>genera log</code>、<code>slow log</code>等等记录日志的显示时间参数。<br>在 <code>5.7.2</code>及其以后的版本，新增了该参数，该参数默认为 UTC ，这样会导致日志中记录的时间比中国这边的慢8个小时，使得查看日志不方便。解决方案，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SHOW GLOBAL VARIABLES LIKE &apos;log_timestamps&apos;;</div><div class="line">+----------------+--------+</div><div class="line">| Variable_name  | Value  |</div><div class="line">+----------------+--------+</div><div class="line">| log_timestamps | UTC    |</div><div class="line">+----------------+--------+</div><div class="line">mysql&gt; SET GLOBAL log_timestamps=SYSTEM;</div></pre></td></tr></table></figure><p>要想永久生效，就在 <code>my.cnf</code>的 <code>mysqld</code>段下，加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">log_timestamps  = SYSTEM</div></pre></td></tr></table></figure><h2 id="mysqldumpslow"><a href="#mysqldumpslow" class="headerlink" title="mysqldumpslow"></a>mysqldumpslow</h2><p>mysqldumpslow 是MySQL自带的慢查询日志分析工具(perl脚本)。执行命令 <code>mysqldumpslow --help</code>，显示命令参数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">Usage: mysqldumpslow [ OPTS... ] [ LOGS... ]</div><div class="line"></div><div class="line">Parse and summarize the MySQL slow query log. Options are</div><div class="line"></div><div class="line">  --verbose    verbose</div><div class="line">  --debug      debug</div><div class="line">  --help       write this text to standard output</div><div class="line"></div><div class="line">  -v           verbose</div><div class="line">  -d           debug</div><div class="line">  -s ORDER     what to sort by (al, at, ar, c, l, r, t), &apos;at&apos; is default</div><div class="line">                al: average lock time</div><div class="line">                ar: average rows sent</div><div class="line">                at: average query time</div><div class="line">                 c: count</div><div class="line">                 l: lock time</div><div class="line">                 r: rows sent</div><div class="line">                 t: query time</div><div class="line">  -r           reverse the sort order (largest last instead of first)</div><div class="line">  -t NUM       just show the top n queries</div><div class="line">  -a           don&apos;t abstract all numbers to N and strings to &apos;S&apos;</div><div class="line">  -n NUM       abstract numbers with at least n digits within names</div><div class="line">  -g PATTERN   grep: only consider stmts that include this string</div><div class="line">  -h HOSTNAME  hostname of db server for *-slow.log filename (can be wildcard),</div><div class="line">               default is &apos;*&apos;, i.e. match all</div><div class="line">  -i NAME      name of server instance (if using mysql.server startup script)</div><div class="line">  -l           don&apos;t subtract lock time from total time</div></pre></td></tr></table></figure><p>参数说明：</p><ul><li>-v、–verbose : 在详细模式下运行，打印有关该程序的更多信息。</li><li>-d、–debug : 在调试模式下运行。</li><li>–help : 显示帮助信息并退出程序</li><li><p>-s [sort_type] : sort_type 是信息排序的依据</p><blockquote><p>al：average lock time，按平均等待锁的时间排序<br>  ar：average rows sent，按平均发给客户端的行总数排序<br>  at：average query time，按平均查询时间排序<br>  c：count，按出现总次数排序<br>  l：lock time，按等待锁的时间排序<br>  r：rows sent，按扫描的行总数排序<br>  t：query time，按累计总耗费时间排序</p></blockquote></li><li>-r : 倒序信息排序</li><li>-t NUM: 只显示前 n 个查询，降序</li><li>-a : 不把数字抽象为’N’，不把字符串抽象为’S’</li><li>-n NUM : 「abstract numbers with at least n digits within names」</li><li>-g PATTERN : 根据字符串筛选慢查询日志，可写正则匹配，大小写不敏感。</li><li>-h HOSTNAME : 根据服务器名称选择慢查询日志</li><li>-i NAME : 根据服务器 MySQL 实例名称选择慢查询日志</li><li>-l : 不要将总时间减去锁定时间</li></ul><p><code>mysqldumpslow</code> 分析的结果如下:</p><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-11-23-15114445062395.jpg" alt=""></p><ul><li>Count : 出现次数(Count)</li><li>Time : 执行最长时间(Time) 和 累计总耗费时间(Time)</li><li>Lock : 等待锁的时间(Lock)</li><li>Rows : 发送给客户端的行总数(Rows) 和 扫描的行总数(Rows)</li><li>root[root]@localhost : 用户</li><li>SHOW FULL … : SQL语句本身(抽象了格式, 比如 limit 1, 20 用 limit N,N 表示。’N’表示数字，’S’表示字符串)。</li></ul><p>例子:<br>返回出现次数最多的10个SQL</p><blockquote><p>mysqldumpslow -s c -t 10 mysql-slow.log</p></blockquote><p>返回按照总时间排序的前10条里边含有左连接的SQL</p><blockquote><p>mysqldumpslow -s t -t 10 -g “left join” mysql-slow.log</p></blockquote><h2 id="mysqlsla"><a href="#mysqlsla" class="headerlink" title="mysqlsla"></a>mysqlsla</h2><p>mysqlsla是 <a href="http://hackmysql.com" target="_blank" rel="external">hackmysql.com</a> 推出的一款日志分析工具，Perl脚本(该网站还维护了 <code>mysqlreport</code>, <code>mysqlidxchk</code> 等比较实用的mysql工具)。<br>整体来说, 功能非常强大。数据报表,非常有利于分析慢查询的原因, 包括执行频率, 数据量, 查询消耗等。</p><font color="red" size="4" face="黑体">但是，hackmysql.com官方已经在2015年1月份放弃了对 mysqlsla（<a href="https://github.com/daniel-nichter/hackmysql.com" target="_blank" rel="external">项目地址</a>）的维护，官方推荐用 Percona Toolkit。</font><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-11-23-15114473814469.jpg" alt=""></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="解决依赖关系"><a href="#解决依赖关系" class="headerlink" title="解决依赖关系"></a>解决依赖关系</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum install  perl-DBI perl-DBD-MySQL</div></pre></td></tr></table></figure><p>可能会遇到的问题：<code>Can&#39;t locate ExtUtils/MakeMaker.pm</code>，解决如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum install  perl-ExtUtils-CBuilder  perl-ExtUtils-MakeMaker</div></pre></td></tr></table></figure><p>可能会遇到的问题：<code>Can&#39;t locate Time/HiRes.pm in @INC</code>，解决如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum install perl-Time-HiRes</div></pre></td></tr></table></figure><h4 id="下载mysqlsla"><a href="#下载mysqlsla" class="headerlink" title="下载mysqlsla"></a>下载mysqlsla</h4><p>当前 mysqlsla 的最新版本为 <code>2.03</code>，到官网下载（官方链接已经失效），可以去这个 <a href="http://down.51cto.com/data/960754" target="_blank" rel="external"><strong>有效下载地址</strong></a> 下载。</p><h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># tar xvfz mysqlsla-2.03.tar.gz </div><div class="line"># cd mysqlsla-2.03</div><div class="line"># perl Makefile.PL</div><div class="line"># make</div><div class="line"># make install</div></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># mysqlsla -lt slow mysql-slow.log </div><div class="line"></div><div class="line">或者 </div><div class="line"># mysqlsla -lt slow mysql-slow.log -sf &quot;+SELECT&quot; -db dbName -top 10 -sort t_sum</div></pre></td></tr></table></figure><p>参数意义 ：</p><ul><li>-lt ：表示日志类型，有: slow, general, binary, msl, udl </li><li>-sf ：[+-][TYPE]，包括|不包括，过滤sql语句的类型 [TYPE]有 SELECT, CREATE, DROP, UPDATE, INSERT，例如 “+SELECT,INSERT”，不出现的默认是 - ，即不包括。 </li><li>-db ：要处理哪个库的日志。 </li><li>-top ：表示取按规则排序的前多少条。 </li><li>-sort ：按某种规则排序，t_sum 按总时间排序， c_sum 按总次数排序。c_sum_p : sql语句执行次数占总执行次数的百分比。</li></ul><p>对慢查询日志文件的分析，最简化的调用方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># mysqlsla -lt slow [SlowLogFilePath] &gt; [ResultFilePath]</div></pre></td></tr></table></figure><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-11-23-15114481005166.jpg" alt=""></p><p>格式说明如下:</p><ul><li>总查询次数 (queries total), 去重后的sql数量 (unique)</li><li>输出报表的内容排序方式(sorted by)</li><li>最重大的慢sql统计信息, 包括平均执行时间, 等待锁时间, 结果行的总数, 扫描的行总数。</li></ul><hr><ul><li>Count： sql的执行次数及占总的slow log数量的百分比.</li><li>Time：执行时间, 包括总时间, 平均时间, 最小, 最大时间, 时间占总慢sql时间的百分比.</li><li>95% of Time：去除最快和最慢的sql, 覆盖率占95%的sql的执行时间.</li><li>Lock Time：等待锁的时间.</li><li>95% of Lock ：95%的慢sql等待锁时间.</li><li>Rows sent：结果行统计数量, 包括平均, 最小, 最大数量.</li><li>Rows examined： 扫描的行数量.</li><li>Database：属于哪个数据库</li><li>Users：哪个用户,IP, 占到所有用户执行的sql百分比</li></ul><hr><ul><li>Query abstract：抽象后的sql语句</li><li>Query sample：sql语句个例</li></ul><h2 id="pt-query-digest"><a href="#pt-query-digest" class="headerlink" title="pt-query-digest"></a>pt-query-digest</h2><h3 id="percona-toolkit-工具介绍"><a href="#percona-toolkit-工具介绍" class="headerlink" title="percona-toolkit 工具介绍"></a>percona-toolkit 工具介绍</h3><p><code>percona-toolkit</code> 是一组高级命令行工具的集合，用来执行各种通过手工执行非常复杂和麻烦的mysql和系统任务。这些任务包括：</p><ul><li>检查master和slave数据的一致性</li><li>有效地对记录进行归档</li><li>查找重复的索引</li><li>对服务器信息进行汇总</li><li>分析来自日志和tcpdump的查询</li><li>当系统出问题的时候收集重要的系统信息</li></ul><p>Percona Toolkit整个工具箱提供了非常多实用的工具，具体的使用方法可以参看 <a href="https://www.percona.com/doc/percona-toolkit/2.1/index.html#tools" target="_blank" rel="external"><strong>官方文档</strong></a><br><img src="http://orku2pa7o.bkt.clouddn.com/2017-11-23-15114484414443.jpg" alt=""></p><h3 id="percona-toolkit安装"><a href="#percona-toolkit安装" class="headerlink" title="percona-toolkit安装"></a>percona-toolkit安装</h3><p>安装  <code>percona-toolkit</code> 非常简单，到 <a href="https://www.percona.com/software/mysql-tools/percona-toolkit" target="_blank" rel="external"><strong>官网</strong></a> 下载 .tar.gz 包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># wget percona.com/get/percona-toolkit.tar.gz</div><div class="line"># tar -zxvf percona-toolkit-2.2.5.tar.gz</div></pre></td></tr></table></figure><p>然后依次执行下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># perl Makefile.PL</div><div class="line"># make</div><div class="line"># make install</div></pre></td></tr></table></figure><p>默认的会被安装在 <code>/usr/local/bin</code> 目录下。执行 <code>man percona-toolkit</code> 可以查看安装了哪些工具。</p><p>运行工具可能会遇到下面的错误：</p><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-11-23-15114487082277.jpg" alt=""><br>这是因为缺少相应包，.pm包实际上是perl的包，运行下面的命令安装即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y perl-Time-HiRes</div></pre></td></tr></table></figure><p>如果安装过程中出现 <code>Error Downloading Packages</code> 错误，尝试 <code>yum clean all</code> 后再安装。使用其Percona Toolkit中其他工具也可能会遇到类似的问题，按照提示安装相应的perl包就可以了。</p><blockquote><p>问题：Can’t locate Digest/MD5.pm in @INC<br>解决：# yum install perl-Digest-MD5</p><p>问题：Can’t locate ExtUtils/MakeMaker.pm in @INC<br>解决：# yum install perl-ExtUtils-CBuilder perl-ExtUtils-MakeMaker</p></blockquote><h3 id="pt-query-digest使用"><a href="#pt-query-digest使用" class="headerlink" title="pt-query-digest使用"></a>pt-query-digest使用</h3><p><code>pt-query-digest</code> 可以从普通MySQL日志，慢查询日志以及二进制日志中分析查询，甚至可以从 <code>SHOW PROCESSLIST;</code> 和MySQL协议的tcpdump中进行分析，如果没有指定文件，它从标准输入流（STDIN）中读取数据。</p><h4 id="命令用法"><a href="#命令用法" class="headerlink" title="命令用法"></a>命令用法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pt-query-digest [OPTIONS] [FILES] [DSN]</div></pre></td></tr></table></figure><p>参数说明：</p><ul><li>–create-review-table : 当使用–review参数把分析结果输出到表中时，如果没有表就自动创建。</li><li>–create-history-table : 当使用–history参数把分析结果输出到表中时，如果没有表就自动创建。</li><li>–filter  : 对输入的慢查询按指定的字符串进行匹配过滤后再进行分析</li><li>–limit  :  限制输出结果百分比或数量，默认值是20,即将最慢的20条语句输出，如果是50%则按总响应时间占比从大到小排序，输出到总和达到50%位置截止。</li><li>–host  : mysql服务器地址</li><li>–user : mysql用户名</li><li>-password : mysql用户密码</li><li>–history : 将分析结果保存到表中，分析结果比较详细，下次再使用–history时，如果存在相同的语句，且查询所在的时间区间和历史表中的不同，则会记录到数据表中，可以通过查询同一CHECKSUM来比较某类型查询的历史变化。</li><li>–review : 将分析结果保存到表中，这个分析只是对查询条件进行参数化，一个类型的查询一条记录，比较简单。当下次使用–review时，如果存在相同的语句分析，就不会记录到数据表中。</li><li>–output : 分析结果输出类型，值可以是report(标准分析报告)、slowlog(Mysql slow log)、json、json-anon，一般使用report，以便于阅读。</li><li>–since : 从什么时间开始分析，值为字符串，可以是指定的某个 “yyyy-mm-dd [hh:mm:ss]” 格式的时间点，也可以是简单的一个时间值：s(秒)、h(小时)、m(分钟)、d(天)，如12h就表示从12小时前开始统计。</li><li>–until : 截止时间，配合—since可以分析一段时间内的慢查询。</li></ul><h4 id="输出信息详情"><a href="#输出信息详情" class="headerlink" title="输出信息详情"></a>输出信息详情</h4><p>最简单的用法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># pt-query-digest mysql-slow.log</div></pre></td></tr></table></figure><p>输出信息大致如下:<br><img src="http://orku2pa7o.bkt.clouddn.com/2017-11-23-15114489626016.jpg" alt=""></p><p>整个输出分为三大部分：</p><h5 id="整体概要（Overall）"><a href="#整体概要（Overall）" class="headerlink" title="整体概要（Overall）"></a>整体概要（Overall）</h5><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-11-23-15114489793568.jpg" alt=""></p><p>这个部分是一个大致的概要信息(类似loadrunner给出的概要信息)，通过它可以对当前MySQL的查询性能做一个初步的评估，比如各个指标的最大值(max)，平均值(min)，95%分布值，中位数(median)，标准偏差(stddev)。<br>这些指标有查询的执行时间（Exec time），锁占用的时间（Lock time），MySQL执行器需要检查的行数（Rows examine），最后返回给客户端的行数（Rows sent），查询的大小。</p><h5 id="查询的汇总信息（Profile）"><a href="#查询的汇总信息（Profile）" class="headerlink" title="查询的汇总信息（Profile）"></a>查询的汇总信息（Profile）</h5><p>这个部分对所有 “重要” 的查询(通常是比较慢的查询)做了个一览表:</p><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-11-23-15114490001505.jpg" alt=""><br>每个查询都有一个Query ID，这个ID通过Hash计算出来的。<code>pt-query-digest</code> 是根据这个所谓的Fingerprint来group by的。举例下面两个查询的Fingerprint是一样的都是 <code>select * from table1 where column1 = ?</code>，工具箱中也有一个与之相关的工具 <code>pt-fingerprint</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">select * from table1 where column1 = 2</div><div class="line">select * from table1 where column1 = 3</div></pre></td></tr></table></figure><ul><li>Rank整个分析中该“语句”的排名，一般也就是性能最常的。</li><li>Response time  “语句”的响应时间以及整体占比情况。</li><li>Calls 该“语句”的执行次数。</li><li>R/Call 每次执行的平均响应时间。</li><li>V/M 响应时间的差异平均对比率。</li></ul><p>在尾部有一行输出，显示了其他2个占比较低而不值得单独显示的查询的统计数据。</p><h5 id="详细信息"><a href="#详细信息" class="headerlink" title="详细信息"></a>详细信息</h5><p>这个部分会列出Profile表中每个查询的详细信息：（默认是按照总的Exec time排序，降序）</p><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-11-23-15114490222535.jpg" alt=""></p><p>包括Overall中有的信息、查询响应时间的分布情况以及该查询 “入榜” 的理由，最底下会显示该查询SQL语句（真实显示，非抽象格式）。</p><h4 id="用例示范"><a href="#用例示范" class="headerlink" title="用例示范"></a>用例示范</h4><p>分析最近12小时内的查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># pt-query-digest  --since=12h  mysql-slow.log &gt; slow_report1.log</div></pre></td></tr></table></figure><p>分析指定时间范围内的查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># pt-query-digest mysql-slow.log --since &apos;2014-05-17 09:30:00&apos; --until &apos;2014-06-17 10:00:00&apos; &gt; slow_report2.log</div></pre></td></tr></table></figure><p>分析只含有select语句的慢查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># pt-query-digest --filter &apos;$event-&gt;&#123;fingerprint&#125; =~ m/^select/i&apos; mysql-slow.log&gt; slow_report3.log</div></pre></td></tr></table></figure><p>通过tcpdump抓取mysql的tcp协议数据，然后分析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># tcpdump -s 65535 -x -nn -q -tttt -i any -c 1000 port 3306 &gt; mysql.tcp.txt</div><div class="line"># pt-query-digest --type tcpdump mysql.tcp.txt &gt; slow_report4.log</div></pre></td></tr></table></figure><p>还可以跟一些过滤条件。详见 <a href="http://www.percona.com/doc/percona-toolkit/2.2/pt-query-digest.html" target="_blank" rel="external"><strong>官方文档</strong></a></p><p>另外结合一些第三方工具还能生成相应的报表。</p><p><font color="red"> 建议 </font>：当 <code>slow log</code> 很大的时候最好还是将日志文件移到其他机器上进行分析，避免分析时过度消耗该服务器资源。</p><p>参考：<a href="http://blog.csdn.net/hjqjk11/article/details/78626943" target="_blank" rel="external">关于 MySQL 慢日志，你想知道的都在这</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;The slow query log consists of SQL statements that took more than long_query_time seconds to execute and required at least min_examined_row_limit rows to be examined. The minimum and default values of long_query_time are 0 and 10, respectively. The value can be specified to a resolution of microseconds. For logging to a file, times are written including the microseconds part. For logging to tables, only integer times are written; the microseconds part is ignored.&lt;/p&gt;
&lt;p&gt;By default, administrative statements are not logged, nor are queries that do not use indexes for lookups. This behavior can be changed using log_slow_admin_statements and log_queries_not_using_indexes, as described later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MySQL慢查询日志是MySQL提供的一种日志记录，用来记录执行时长超过指定时长的查询语句，具体指运行时间超过 &lt;code&gt;long_query_time&lt;/code&gt; 值的 SQL 语句，则会被记录到慢查询日志中。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;long_query_time&lt;/code&gt; 默认值是 &lt;code&gt;10&lt;/code&gt; ，单位是 &lt;code&gt;s&lt;/code&gt;，即默认是 10秒 。默认情况下，MySQL数据库并不会开启慢查询日志，需要手动设置这个参数。&lt;/p&gt;
&lt;p&gt;通过慢查询日志，可以查找出哪些查询语句的执行效率很低，以便进行优化。一般建议开启，它对服务器性能的影响微乎其微，但是可以记录MySQL服务器上执行了很长时间的查询语句。慢查询日志可以帮助我们定位mysql性能问题所在。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>运维常用操作</title>
    <link href="http://yoursite.com/2017/Common-operations-of-OPS.html"/>
    <id>http://yoursite.com/2017/Common-operations-of-OPS.html</id>
    <published>2017-11-16T07:40:15.000Z</published>
    <updated>2018-02-09T02:39:24.601Z</updated>
    
    <content type="html"><![CDATA[<p>记录日常运维中，经常要用到的一些操作，也是备忘。</p><a id="more"></a><h1 id="运维常用操作"><a href="#运维常用操作" class="headerlink" title="运维常用操作"></a>运维常用操作</h1><h2 id="Nginx日志"><a href="#Nginx日志" class="headerlink" title="Nginx日志"></a>Nginx日志</h2><p>nginx 访问日志格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#访问日志格式</div><div class="line">log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$http_host&quot; &quot;$request&quot; &apos; </div><div class="line">    &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class="line">    &apos;&quot;$http_user_agent&quot; $http_x_forwarded_for $request_time&apos;;</div></pre></td></tr></table></figure><p>1、快速截取某个时间段的日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">awk &apos;$4 &gt;=&quot;[01/Jun/2017:02:15:00&quot; &amp;&amp; $4 &lt;=&quot;[01/Jun/2017:02:30:00&quot;&apos; xxx.log &gt; xxx_cut.log</div></pre></td></tr></table></figure><p>2、统计日志里访问次数最多的前十个IP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># awk &apos;&#123;print $1&#125;&apos; xxx.log|sort|uniq -c|sort -nr|head -10</div><div class="line"></div><div class="line"># awk &apos;&#123;a[$1]++&#125; END&#123;for (i in a) print i,a[i]&#125;&apos; xxx.log |sort -k2 -rn|head</div></pre></td></tr></table></figure><h2 id="比较两个目录的差异"><a href="#比较两个目录的差异" class="headerlink" title="比较两个目录的差异"></a>比较两个目录的差异</h2><p>只比较目录中文件名的不同，不比较相同文件名的内容，输出结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># rsync --ignore-existing -rnc --out-format=&quot;%n&quot; test/ test2/</div></pre></td></tr></table></figure><p>参数说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">--ignore-existing ：忽略那些已经存在于接收端的文件，仅同步那些新创建的文件</div><div class="line">-n : 仅输出要同步的文件名，不做同步</div></pre></td></tr></table></figure><h2 id="Nginx-跳转"><a href="#Nginx-跳转" class="headerlink" title="Nginx 跳转"></a>Nginx 跳转</h2><h3 id="xxx-com-跳转-www-xxx-com"><a href="#xxx-com-跳转-www-xxx-com" class="headerlink" title="xxx.com 跳转 www.xxx.com"></a>xxx.com 跳转 www.xxx.com</h3><p>第一种方法，可以在 <code>www.xxx.com</code> 的 <code>server</code> 里边配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">server</div><div class="line">&#123;</div><div class="line">    listen       80;</div><div class="line">    server_name www.xxx.com xxx.com ;</div><div class="line">    ...</div><div class="line"></div><div class="line">    if ( $host != &apos;www.xxx.com&apos; ) &#123;</div><div class="line">        rewrite ^/(.*)$ http://www.xxx.com/$1 permanent;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>第二种方法，在配置文件里边写两个 <code>server</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">server</div><div class="line">&#123;</div><div class="line">    listen       80;</div><div class="line">    server_name www.xxx.com ;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在该配置下面添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">server</div><div class="line">&#123;</div><div class="line">    listen       80;</div><div class="line">    server_name xxx.com ;</div><div class="line">    rewrite ^/(.*)$ http://www.xxx.com/$1 permanent;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使配置生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># nginx -t</div><div class="line"># nginx -s reload</div></pre></td></tr></table></figure><p>注意：这样跳转的结果，浏览器的地址栏上会变成：<code>http://www.xxx.com/xxx</code>，URL 会改变。</p><h3 id="首页跳转"><a href="#首页跳转" class="headerlink" title="首页跳转"></a>首页跳转</h3><p>将原本 <code>www.xxx.com</code> 的页面跳转到 <code>www.xxx.com/list</code> 页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">location / &#123;</div><div class="line">    if ( $request_uri = &quot;/&quot; ) &#123;</div><div class="line">        rewrite &quot;/&quot; http://www.xxx.com/list break;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意：URL会改变。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录日常运维中，经常要用到的一些操作，也是备忘。&lt;/p&gt;
    
    </summary>
    
      <category term="技术杂项" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="杂项" scheme="http://yoursite.com/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>Mysql导表</title>
    <link href="http://yoursite.com/2017/Mysql-import-table.html"/>
    <id>http://yoursite.com/2017/Mysql-import-table.html</id>
    <published>2017-11-07T09:16:54.000Z</published>
    <updated>2017-11-08T07:16:09.388Z</updated>
    
    <content type="html"><![CDATA[<p>根据业务的需求，整合数据，想把 <code>test</code> 库所有的表（表结构 + 表数据）导入到主库 <code>dev</code> 中，并且这些表的前缀都为 <code>dev_</code>。</p><a id="more"></a><h2 id="导表"><a href="#导表" class="headerlink" title="导表"></a>导表</h2><h3 id="备份-test-库数据"><a href="#备份-test-库数据" class="headerlink" title="备份 test 库数据"></a>备份 test 库数据</h3><p>利用 <code>mysqldump</code> 工具，备份 <code>test</code> 库的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># mysqldump -uroot -p test &gt; test_lastest.sql</div></pre></td></tr></table></figure><h3 id="修改备份文件中的表名"><a href="#修改备份文件中的表名" class="headerlink" title="修改备份文件中的表名"></a>修改备份文件中的表名</h3><p>利用 <code>sed</code> 工具，在命令行修改备份文件里的表名，加上前缀 <code>dev_</code>，以下几项都必须修改，否则导入表时会出错。( <code>test</code> 库的表是没有表前缀的。)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># sed -i &apos;s@^DROP TABLE IF EXISTS `@DROP TABLE IF EXISTS `dev_@g&apos; test_lastest.sql</div><div class="line"># sed -i &apos;s@^CREATE TABLE `@CREATE TABLE `dev_@g&apos; test_lastest.sql</div><div class="line"># sed -i &apos;s@^LOCK TABLES `@LOCK TABLES `dev_@g&apos; test_lastest.sql</div><div class="line"># sed -i &apos;s@^INSERT INTO `@INSERT INTO `dev_@g&apos; test_lastest.sql</div><div class="line"># sed -i &apos;s@40000 ALTER TABLE `@40000 ALTER TABLE `dev_@g&apos; test_lastest.sql</div></pre></td></tr></table></figure><p>还要加上以下这行，在第6行（只要在第一条建表语句之前，无论哪一行可以）加入 <code>USE master;</code>，方便导入数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># sed -i &apos;N;6iUSE dev;&apos; test_lastest.sql</div></pre></td></tr></table></figure><p>查看给表加入前缀是否成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># grep &apos;DROP TABLE&apos; $sql_name</div><div class="line"># grep &apos;CREATE&apos; $sql_name</div><div class="line"># grep &apos;LOCK TABLES `&apos; $sql_name</div></pre></td></tr></table></figure><h3 id="导入表"><a href="#导入表" class="headerlink" title="导入表"></a>导入表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># mysql -uroot -p &lt; test_lastest.sql</div></pre></td></tr></table></figure><p>检查数据。</p><h3 id="shell脚本版"><a href="#shell脚本版" class="headerlink" title="shell脚本版"></a>shell脚本版</h3><p>把以上的操作写成脚本，迁移时方便些。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">sql_name=&quot;test_lastest.sql&quot;</div><div class="line"></div><div class="line">mysqldump -uroot -hlocalhost -pxxx test &gt; $sql_name</div><div class="line"></div><div class="line">sed -i &apos;s@^DROP TABLE IF EXISTS `@DROP TABLE IF EXISTS `dev_@g&apos; $sql_name</div><div class="line">sed -i &apos;s@^CREATE TABLE `@CREATE TABLE `dev_@g&apos; $sql_name</div><div class="line">sed -i &apos;s@^LOCK TABLES `@LOCK TABLES `dev_@g&apos; $sql_name</div><div class="line">sed -i &apos;s@^INSERT INTO `@INSERT INTO `dev_@g&apos; $sql_name</div><div class="line">sed -i &apos;s@40000 ALTER TABLE `@40000 ALTER TABLE `dev_@g&apos; $sql_name</div><div class="line"></div><div class="line">sed -i &apos;N;6iUSE dev;&apos; $sql_name</div><div class="line"></div><div class="line">mysql -uroot -hlocalhost -pxxx &lt; $sql_name</div></pre></td></tr></table></figure><h2 id="扩展：MySQL批量修改表前缀"><a href="#扩展：MySQL批量修改表前缀" class="headerlink" title="扩展：MySQL批量修改表前缀"></a>扩展：MySQL批量修改表前缀</h2><p>本方法通过命令的方式实现批量修改表前缀。<br>假设有数据库 <code>test</code> ，原来表前缀是 <code>test_</code> ，现在全部换成 <code>dev_</code>。</p><h3 id="生成替换命令"><a href="#生成替换命令" class="headerlink" title="生成替换命令"></a>生成替换命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT CONCAT( &apos;ALTER TABLE &apos;, table_name, &apos; RENAME TO dev_&apos;, substring(table_name, 6), &apos;;&apos;) </div><div class="line">FROM information_schema.tables </div><div class="line">WHERE table_schema=&apos;test&apos; and table_name LIKE &apos;test_%&apos;;</div></pre></td></tr></table></figure><ul><li><code>substring(table_name, 6)</code> ：从 <code>test_</code>后面字符(第6个字符)开始替换</li><li><code>table_schema</code> ：指定数据库名</li></ul><h3 id="批量替换"><a href="#批量替换" class="headerlink" title="批量替换"></a>批量替换</h3><p>上一步命令执行完，会生成替换表名的sql语句，复制到编辑器中，只保留sql语句(把 <code>|</code> 替换成空格就行了)，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE test_thread RENAME TO dev_thread;                             </div><div class="line">ALTER TABLE test_announcement RENAME TO dev_announcement;                     </div><div class="line">ALTER TABLE test_article RENAME TO dev_article;</div><div class="line">...</div><div class="line">...</div></pre></td></tr></table></figure><p>将上面结果保存为 <code>test2dev.sql</code> 文件，在到MySQL服务器上导入修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># mysql -uroot -p test &lt; test2dev.sql</div></pre></td></tr></table></figure><h2 id="扩展：改数据库名"><a href="#扩展：改数据库名" class="headerlink" title="扩展：改数据库名"></a>扩展：改数据库名</h2><p>注意：改数据库名是很危险的操作，改名之前一定记得先备份数据库数据。</p><h3 id="方法1：重命名所有的表"><a href="#方法1：重命名所有的表" class="headerlink" title="方法1：重命名所有的表"></a>方法1：重命名所有的表</h3><p>可以利用 <code>RENMAE</code> 命令来修改，核心语句如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 创建新数据库</div><div class="line">CREATE DATABASE new_db_name;</div><div class="line"></div><div class="line"># 逐一修改所有的表</div><div class="line">RENAME TABLE db_name.table1 TO new_db_name.table1</div><div class="line">RENAME TABLE db_name.table2 TO new_db_name.table3;</div><div class="line">...</div><div class="line"></div><div class="line"># 删除旧数据库</div><div class="line">DROP DATABASE db_name;</div></pre></td></tr></table></figure><p>写成shell脚本，则如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">mysqlconn=&quot;mysql -uxxx -hxxx -pxxx -S /xxx/mysql.sock&quot;</div><div class="line">olddb=&quot;test&quot;</div><div class="line">newdb=&quot;test_dev&quot;</div><div class="line"></div><div class="line">$&#123;mysqlconn&#125; -e &quot;CREATE DATABASE $newdb&quot;</div><div class="line"></div><div class="line"># 查出旧数据库的所有表名</div><div class="line">params=$($&#123;mysqlconn&#125; -N -e &quot;SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE table_schema=&apos;$&#123;olddb&#125;&apos; ;&quot;)</div><div class="line"></div><div class="line"># 循环修改每个表</div><div class="line">for name in $params</div><div class="line">do</div><div class="line">    $mysqlconn -e &quot;RENAME TABLE $olddb.$name to $newdb.$name&quot;</div><div class="line">done</div><div class="line"></div><div class="line">$&#123;mysqlconn&#125; -e &quot;DROP DATABASE $olddb&quot;</div></pre></td></tr></table></figure><h3 id="方法2：利用mysqldump导出数据再导入"><a href="#方法2：利用mysqldump导出数据再导入" class="headerlink" title="方法2：利用mysqldump导出数据再导入"></a>方法2：利用mysqldump导出数据再导入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># mysqldump -uxxxx -pxxxx -h xxxx db_name &gt; db_name_dump.sql</div><div class="line"># mysql -uxxxx -pxxxx -h xxxx -e “CREATE DATABASE new_db_name”</div><div class="line"># mysql -uxxxx -pxxxx -h xxxx new_db_name &lt; db_name_dump.sql</div><div class="line"># mysql -uxxxx -pxxxx -h xxxx -e “DROP DATABASE db_name”</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据业务的需求，整合数据，想把 &lt;code&gt;test&lt;/code&gt; 库所有的表（表结构 + 表数据）导入到主库 &lt;code&gt;dev&lt;/code&gt; 中，并且这些表的前缀都为 &lt;code&gt;dev_&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Python的伪造数据生成器:Faker</title>
    <link href="http://yoursite.com/2017/Python-moudle-Faker.html"/>
    <id>http://yoursite.com/2017/Python-moudle-Faker.html</id>
    <published>2017-11-01T07:31:19.000Z</published>
    <updated>2017-11-02T07:38:32.689Z</updated>
    
    <content type="html"><![CDATA[<p>我们在开发中常常需要利用一些假数据来做测试,这种时候就可以使用 <code>Faker</code> 来伪造数据从而用来测试.</p><p><a href="https://github.com/joke2k/faker" target="_blank" rel="external"><strong>Faker</strong></a> 是一个可以让你生成伪造数据的Python包。当你需要初始化数据库，创建美观的XML文档，不断产生数据来进行压力测试或者想从生产服务器上拉取匿名数据的时候，Faker将是你最棒的选择。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Faker库已经被提交到 <a href="https://pypi.python.org/pypi/Faker" target="_blank" rel="external"><strong>pip</strong></a>，可以通过 pip 工具直接安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># pip install Faker</div></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><a href="http://faker.readthedocs.io/en/master/" target="_blank" rel="external"><strong>官方文档</strong></a></p><p>faker 提供了一个工厂函数，用来创建数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> faker <span class="keyword">import</span> Factory</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake1 = Factory.create()</div></pre></td></tr></table></figure><p>当然，也提供一个Faker类来创建实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake2 = Faker()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake2.name()</div><div class="line"><span class="string">'Audrey Robinson'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake2.address()</div><div class="line"><span class="string">'4266 Fritz Shore\nLewischester, AL 24594-7593'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake2.text()</div><div class="line"><span class="string">'Odio porro unde sint aliquid beatae. Ex officiis porro nostrum laboriosam deleniti nisi. A aut molestiae ratione ipsam perspiciatis facere.\nDicta incidunt at deleniti recusandae accusamus quisquam.'</span></div></pre></td></tr></table></figure><p>每次调用方法 <code>fake.name()</code> 都会产生不同的（随机）结果。这是因为 faker 向 <code>faker.Generator.method_name()</code> 调用了 <code>faker.Generator.format(method_name)</code>。</p><h2 id="本地化"><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h2><p>在用 <code>Faker()</code> 创建 faker 实例时，可以为实例指定本地化区域参数，默认为 ‘en_US`，因此生成的姓名、地址等都是美国的。<br>要生成中文伪造数据，只需：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; fake = Faker(&quot;zh_CN&quot;)</div></pre></td></tr></table></figure><h2 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h2><p>如上面例子，每次调用 fake 实例的 <code>name()</code>方法时，都会产生不同随机姓名。fake 实例还有很多方法可用，这些方法分为以下几类：</p><ul><li>address 地址</li><li>person 人物类：性别、姓名等</li><li>barcode 条码类</li><li>color 颜色类</li><li>company 公司类：公司名、公司email、公司名前缀等</li><li>credit_card 银行卡类：卡号、有效期、类型等</li><li>currency  货币</li><li>date_time 时间日期类：日期、年、月等</li><li>file 文件类：文件名、文件类型、文件扩展名等</li><li>internet 互联网类</li><li>job 工作</li><li>lorem 乱数假文</li><li>misc 杂项类</li><li>phone_number 手机号码类：手机号、运营商号段</li><li>python python数据</li><li>profile 人物描述信息：姓名、性别、地址、公司等</li><li>ssn 社会安全码(身份证号码)</li><li>user_agent 用户代理</li></ul><h3 id="address-地址"><a href="#address-地址" class="headerlink" title="address 地址"></a>address 地址</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.country()  <span class="comment"># 国家</span></div><div class="line"><span class="string">'奥地利'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.city()  <span class="comment"># 城市</span></div><div class="line"><span class="string">'郑州市'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.city_suffix()  <span class="comment"># 城市的后缀,中文是：市或县</span></div><div class="line"><span class="string">'市'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.address()  <span class="comment"># 地址</span></div><div class="line"><span class="string">'河北省巢湖县怀柔南宁路f座 169812'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.street_address()  <span class="comment"># 街道</span></div><div class="line"><span class="string">'邯郸路W座'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.street_name()  <span class="comment"># 街道名</span></div><div class="line"><span class="string">'合肥路'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.postcode()  <span class="comment"># 邮编</span></div><div class="line"><span class="string">'314548'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.latitude()  <span class="comment"># 维度</span></div><div class="line">Decimal(<span class="string">'68.0228435'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.longitude()  <span class="comment"># 经度</span></div><div class="line">Decimal(<span class="string">'155.964341'</span>)</div></pre></td></tr></table></figure><h3 id="person-人物"><a href="#person-人物" class="headerlink" title="person 人物"></a>person 人物</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.name() <span class="comment"># 姓名</span></div><div class="line"><span class="string">'单玉珍'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.last_name() <span class="comment"># 姓</span></div><div class="line"><span class="string">'潘'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.first_name() <span class="comment"># 名</span></div><div class="line"><span class="string">'琴'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.name_male() <span class="comment"># 男性姓名</span></div><div class="line"><span class="string">'官平'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.last_name_male() <span class="comment"># 男性姓</span></div><div class="line"><span class="string">'安'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.first_name_male() <span class="comment"># 男性名</span></div><div class="line"><span class="string">'文'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.name_female() <span class="comment"># 女性姓名</span></div><div class="line"><span class="string">'许颖'</span></div></pre></td></tr></table></figure><h3 id="barcode-条码"><a href="#barcode-条码" class="headerlink" title="barcode 条码"></a>barcode 条码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.ean8()  <span class="comment"># 8位条码</span></div><div class="line"><span class="string">'12771363'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.ean13()  <span class="comment"># 13位条码</span></div><div class="line"><span class="string">'9133134950963'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.ean(length=<span class="number">8</span>)  <span class="comment"># 自定义位数条码,只能选8或者13</span></div><div class="line"><span class="string">'20417161'</span></div></pre></td></tr></table></figure><h3 id="color-颜色"><a href="#color-颜色" class="headerlink" title="color 颜色"></a>color 颜色</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.hex_color() <span class="comment"># 16进制表示的颜色</span></div><div class="line"><span class="string">'#671f6d'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.rgb_css_color() <span class="comment"># css用的rgb色</span></div><div class="line"><span class="string">'rgb(237,74,237)'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.rgb_color()  <span class="comment"># 表示rgb色的字符串</span></div><div class="line"><span class="string">'208,102,218'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.color_name() <span class="comment"># 颜色名字</span></div><div class="line"><span class="string">'Brown'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.safe_hex_color()  <span class="comment">#安全16进制色</span></div><div class="line"><span class="string">'#ee4400'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.safe_color_name() <span class="comment"># 安全颜色名字</span></div><div class="line"><span class="string">'maroon'</span></div></pre></td></tr></table></figure><h3 id="company-公司"><a href="#company-公司" class="headerlink" title="company 公司"></a>company 公司</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.company() <span class="comment"># 公司名</span></div><div class="line"><span class="string">'时空盒数字科技有限公司'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.company_suffix() <span class="comment"># 公司名后缀</span></div><div class="line"><span class="string">'科技有限公司'</span></div></pre></td></tr></table></figure><h3 id="credit-card-银行信用卡"><a href="#credit-card-银行信用卡" class="headerlink" title="credit_card 银行信用卡"></a>credit_card 银行信用卡</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.credit_card_number(card_type=<span class="keyword">None</span>) <span class="comment"># 卡号</span></div><div class="line"><span class="string">'375325478746231'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.credit_card_provider(card_type=<span class="keyword">None</span>) <span class="comment"># 卡的提供者</span></div><div class="line"><span class="string">'VISA 13 digit'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.credit_card_security_code(card_type=<span class="keyword">None</span>)<span class="comment"># 卡的安全密码</span></div><div class="line"><span class="string">'450'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.credit_card_expire() <span class="comment"># 卡的有效期</span></div><div class="line"><span class="string">'04/22'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.credit_card_full(card_type=<span class="keyword">None</span>) <span class="comment"># 完整卡信息</span></div><div class="line"><span class="string">'Maestro\n秀芳 商\n502001016117 04/27\nCVV: 144\n'</span></div></pre></td></tr></table></figure><h3 id="currency-货币"><a href="#currency-货币" class="headerlink" title="currency 货币"></a>currency 货币</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.currency_code()  <span class="comment"># 货币代码</span></div><div class="line"><span class="string">'HNL'</span></div></pre></td></tr></table></figure><h3 id="date-time-时间日期"><a href="#date-time-时间日期" class="headerlink" title="date_time 时间日期"></a>date_time 时间日期</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.date_time(tzinfo=<span class="keyword">None</span>) <span class="comment"># 随机日期时间</span></div><div class="line">datetime.datetime(<span class="number">2001</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">44</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.iso8601(tzinfo=<span class="keyword">None</span>) <span class="comment"># 以iso8601标准输出的日期</span></div><div class="line"><span class="string">'1973-11-16T22:58:37'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.date_time_this_month(before_now=<span class="keyword">True</span>, after_now=<span class="keyword">False</span>, tzinfo=<span class="keyword">None</span>) <span class="comment"># 本月的某个日期</span></div><div class="line">datetime.datetime(<span class="number">2017</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">33</span>, <span class="number">48</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.date_time_this_year(before_now=<span class="keyword">True</span>, after_now=<span class="keyword">False</span>, tzinfo=<span class="keyword">None</span>) <span class="comment"># 本年的某个日期</span></div><div class="line">datetime.datetime(<span class="number">2017</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">55</span>, <span class="number">31</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.date_time_this_decade(before_now=<span class="keyword">True</span>, after_now=<span class="keyword">False</span>, tzinfo=<span class="keyword">None</span>)  <span class="comment"># 本年代内的一个日期</span></div><div class="line">datetime.datetime(<span class="number">2010</span>, <span class="number">3</span>, <span class="number">26</span>, <span class="number">6</span>, <span class="number">33</span>, <span class="number">23</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.date_time_this_century(before_now=<span class="keyword">True</span>, after_now=<span class="keyword">False</span>, tzinfo=<span class="keyword">None</span>)  <span class="comment"># 本世纪一个日期</span></div><div class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">7</span>, <span class="number">21</span>, <span class="number">19</span>, <span class="number">27</span>, <span class="number">53</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.date_time_between(start_date=<span class="string">"-30y"</span>, end_date=<span class="string">"now"</span>, tzinfo=<span class="keyword">None</span>)  <span class="comment"># 两个时间间的一个随机时间</span></div><div class="line">datetime.datetime(<span class="number">2005</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">17</span>, <span class="number">17</span>, <span class="number">15</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.timezone() <span class="comment"># 时区</span></div><div class="line"><span class="string">'America/Guatemala'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.time(pattern=<span class="string">"%H:%M:%S"</span>) <span class="comment"># 时间（可自定义格式）</span></div><div class="line"><span class="string">'11:21:52'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.am_pm() <span class="comment"># 随机上午下午</span></div><div class="line"><span class="string">'PM'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.month() <span class="comment"># 随机月份</span></div><div class="line"><span class="string">'02'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.month_name() <span class="comment"># 随机月份名字</span></div><div class="line"><span class="string">'August'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.year() <span class="comment"># 随机年</span></div><div class="line"><span class="string">'1974'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.day_of_week() <span class="comment"># 随机星期几</span></div><div class="line"><span class="string">'Sunday'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.day_of_month() <span class="comment"># 随机月中某一天</span></div><div class="line"><span class="string">'02'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.time_delta() <span class="comment"># 随机时间延迟</span></div><div class="line">datetime.timedelta(<span class="number">13371</span>, <span class="number">27637</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.date_object()  <span class="comment"># 随机日期对象</span></div><div class="line">datetime.date(<span class="number">1983</span>, <span class="number">1</span>, <span class="number">26</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.time_object() <span class="comment"># 随机时间对象</span></div><div class="line">datetime.time(<span class="number">17</span>, <span class="number">8</span>, <span class="number">56</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.unix_time() <span class="comment"># 随机unix时间（时间戳）</span></div><div class="line"><span class="number">1223246848</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.date(pattern=<span class="string">"%Y-%m-%d"</span>) <span class="comment"># 随机日期（可自定义格式）</span></div><div class="line"><span class="string">'1984-04-20'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.date_time_ad(tzinfo=<span class="keyword">None</span>)  <span class="comment"># 公元后随机日期</span></div><div class="line">datetime.datetime(<span class="number">341</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">9</span>)</div></pre></td></tr></table></figure><h3 id="file-文件"><a href="#file-文件" class="headerlink" title="file 文件"></a>file 文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.file_name(category=<span class="string">"image"</span>, extension=<span class="string">"png"</span>) <span class="comment"># 文件名（指定文件类型和后缀名）</span></div><div class="line"><span class="string">'增加.png'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.file_name() <span class="comment"># 随机生成各类型文件</span></div><div class="line"><span class="string">'提供.pdf'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.file_extension(category=<span class="keyword">None</span>) <span class="comment"># 文件后缀</span></div><div class="line"><span class="string">'txt'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.mime_type(category=<span class="keyword">None</span>) <span class="comment"># mime-type</span></div><div class="line"><span class="string">'image/png'</span></div></pre></td></tr></table></figure><h3 id="internet-互联网"><a href="#internet-互联网" class="headerlink" title="internet 互联网"></a>internet 互联网</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.ipv4(network=<span class="keyword">False</span>)  <span class="comment"># ipv4地址</span></div><div class="line"><span class="string">'104.225.105.10'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.ipv6(network=<span class="keyword">False</span>)  <span class="comment"># ipv6地址</span></div><div class="line"><span class="string">'dea6:ca11:39d0:b49f:fff1:82f1:bf88:698b'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.uri_path(deep=<span class="keyword">None</span>) <span class="comment"># uri路径</span></div><div class="line"><span class="string">'search/categories'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.uri_extension() <span class="comment"># uri扩展名</span></div><div class="line"><span class="string">'.htm'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.uri() <span class="comment"># uri</span></div><div class="line"><span class="string">'https://www.wei.com/terms/'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.url() <span class="comment"># url</span></div><div class="line"><span class="string">'http://zheng.org/'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.image_url(width=<span class="keyword">None</span>, height=<span class="keyword">None</span>)  <span class="comment"># 图片url</span></div><div class="line"><span class="string">'https://www.lorempixel.com/700/990'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.domain_word() <span class="comment"># 域名主体</span></div><div class="line"><span class="string">'hu'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.domain_name() <span class="comment"># 域名</span></div><div class="line"><span class="string">'hu.cn'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.tld() <span class="comment"># 域名后缀</span></div><div class="line"><span class="string">'com'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.user_name() <span class="comment"># 用户名</span></div><div class="line"><span class="string">'xia13'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.user_agent() <span class="comment"># UA</span></div><div class="line"><span class="string">'Opera/8.33.(Windows NT 5.1; an-ES) Presto/2.9.171 Version/10.00'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.mac_address() <span class="comment"># MAC地址</span></div><div class="line"><span class="string">'d6:38:cc:2a:76:b2'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.safe_email() <span class="comment"># 安全邮箱</span></div><div class="line"><span class="string">'mingli@example.net'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.free_email() <span class="comment"># 免费邮箱</span></div><div class="line"><span class="string">'tao44@gmail.com'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.company_email()  <span class="comment"># 公司邮箱</span></div><div class="line"><span class="string">'jingzhong@wang.cn'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.email() <span class="comment"># 邮箱</span></div><div class="line"><span class="string">'changjun@hao.com'</span></div></pre></td></tr></table></figure><h3 id="job-工作"><a href="#job-工作" class="headerlink" title="job 工作"></a>job 工作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.job()<span class="comment">#工作职位</span></div><div class="line"><span class="string">'Dealer'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.job() </div><div class="line"><span class="string">'Musician'</span></div></pre></td></tr></table></figure><h3 id="lorem-乱数假文"><a href="#lorem-乱数假文" class="headerlink" title="lorem 乱数假文"></a>lorem 乱数假文</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.text(max_nb_chars=<span class="number">200</span>) <span class="comment"># 随机生成一篇文章</span></div><div class="line"><span class="string">'语言无法应用为什一点国内.要求完成如何世界电脑发布作品.经济不同教育个人科技全国.\n在线学生发布信息上海状态.\n联系一次通过其实介绍世界.增加也是使用成功那个.\n商品免费管理公司.留言自己这种内容.\n次数内容知道这样女人感觉.操作他的生产出现如何报告文章只有.\n个人文化中心不能发布最新.质量一下提高.感觉最大工具表示最后计划.这是还有次数结果其实特别.'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.word() <span class="comment"># 随机单词</span></div><div class="line"><span class="string">'能力'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.words(nb=<span class="number">3</span>)  <span class="comment"># 随机生成几个字</span></div><div class="line">[<span class="string">'国家'</span>, <span class="string">'经营'</span>, <span class="string">'结果'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.sentence(nb_words=<span class="number">6</span>, variable_nb_words=<span class="keyword">True</span>)  <span class="comment"># 随机生成一个句子</span></div><div class="line"><span class="string">'重要更多我们作品地方增加.'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.sentences(nb=<span class="number">3</span>) <span class="comment"># 随机生成几个句子</span></div><div class="line">[<span class="string">'制作上海学生.'</span>, <span class="string">'方式汽车一样技术帮助欢迎.'</span>, <span class="string">'说明一种深圳经营电话帖子.'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.paragraph(nb_sentences=<span class="number">3</span>, variable_nb_sentences=<span class="keyword">True</span>)  <span class="comment"># 随机生成一段文字(字符串)</span></div><div class="line"><span class="string">'非常环境位置有限发展首页行业.情况对于出现部门这种觉得.产品以后因为虽然由于日本不同.'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.paragraphs(nb=<span class="number">3</span>)  <span class="comment"># 随机生成成几段文字(列表)</span></div><div class="line">[<span class="string">'就是发布要求有关这里国际.美国设备深圳经营.首页也是支持报告.'</span>, <span class="string">'决定可是只有发现开始一直.最后有些项目正在深圳关系决定.下载注册图片更多进行他的那些.'</span>, <span class="string">'必须他们发生数据准备联系.同时这样内容学校精华.'</span>]</div></pre></td></tr></table></figure><h3 id="misc-杂项"><a href="#misc-杂项" class="headerlink" title="misc 杂项"></a>misc 杂项</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.binary(length=<span class="number">10</span>)  <span class="comment"># 随机二进制字符串(可指定长度)</span></div><div class="line"><span class="string">b'U\xa9@\x1e\x96\xe7\xca\x82\x14f'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.language_code()   <span class="comment"># 随机语言代码</span></div><div class="line"><span class="string">'tg'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.md5(raw_output=<span class="keyword">False</span>)  <span class="comment"># 随机md5，16进制字符串</span></div><div class="line"><span class="string">'cc4feebe419791332bbcff5e0fdf084a'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.sha1(raw_output=<span class="keyword">False</span>) <span class="comment"># 随机sha1，16进制字符串</span></div><div class="line"><span class="string">'8ac0e9980f880860b6e45ae6fd257cc847b7ae8d'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.sha256(raw_output=<span class="keyword">False</span>)   <span class="comment"># 随机sha256，16进制字符串</span></div><div class="line"><span class="string">'033151f173f4a389e38e7df2363d89741f752c474e7bdfa2ee0a794bf0b505b5'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.boolean(chance_of_getting_true=<span class="number">50</span>) <span class="comment"># 随机真假值(得到True的几率是50%)</span></div><div class="line"><span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.null_boolean() <span class="comment"># 随机真假值和null</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.null_boolean()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.password(length=<span class="number">10</span>, special_chars=<span class="keyword">True</span>, digits=<span class="keyword">True</span>, upper_case=<span class="keyword">True</span>, lower_case=<span class="keyword">True</span>) <span class="comment"># 随机密码（可指定密码策略）</span></div><div class="line"><span class="string">'F%722TJg_U'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.locale() <span class="comment"># 随机本地代码</span></div><div class="line"><span class="string">'hy_AM'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.uuid4() <span class="comment"># 随机uuid</span></div><div class="line"><span class="string">'a50d17e7-bc4f-37a3-27b3-04a24fdd0055'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure><h3 id="phone-number-电话号码"><a href="#phone-number-电话号码" class="headerlink" title="phone_number 电话号码"></a>phone_number 电话号码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.phone_number() <span class="comment"># 手机号码</span></div><div class="line"><span class="string">'13334603608'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.phonenumber_prefix() <span class="comment"># 运营商号段，手机号码前三位</span></div><div class="line"><span class="number">158</span></div></pre></td></tr></table></figure><h3 id="python-python数据"><a href="#python-python数据" class="headerlink" title="python python数据"></a>python python数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.pyint()  <span class="comment"># 随机int</span></div><div class="line"><span class="number">7775</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.pyfloat(left_digits=<span class="keyword">None</span>, right_digits=<span class="keyword">None</span>, positive=<span class="keyword">False</span>)  <span class="comment"># 浮点数</span></div><div class="line"><span class="number">-84901.5586333</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.pydecimal(left_digits=<span class="keyword">None</span>, right_digits=<span class="keyword">None</span>, positive=<span class="keyword">False</span>)  <span class="comment"># 随机高精度数</span></div><div class="line">Decimal(<span class="string">'-12273687068527.0'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.pystr(min_chars=<span class="keyword">None</span>, max_chars=<span class="number">20</span>)  <span class="comment"># 随机字符串（可指定长度）</span></div><div class="line"><span class="string">'cblutNKFIyegfcHPrjzx'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.pybool()  <span class="comment"># 随机bool值</span></div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.pyiterable(nb_elements=<span class="number">10</span>, variable_nb_elements=<span class="keyword">True</span>)  <span class="comment"># 随机iterable</span></div><div class="line">[<span class="string">'ODfeVvcbAjPDBGwzljQw'</span>, <span class="string">'https://www.tan.cn/list/category/homepage.php'</span>, <span class="string">'YQlrsFkBieyKYaXlCljJ'</span>, Decimal(<span class="string">'42778240911787.2'</span>), Decimal(<span class="string">'957411812.6383'</span>), <span class="string">'TGbqZufoiUXLQTZDrVcP'</span>, <span class="string">'http://yan.com/posts/tags/search/terms.php'</span>, <span class="number">3.680492634254</span>, <span class="string">'min57@hotmail.com'</span>, datetime.datetime(<span class="number">2001</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">49</span>), <span class="string">'xMMOjlETIgKGqVGTrChG'</span>, <span class="string">'yong83@xu.cn'</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.pylist(nb_elements=<span class="number">10</span>, variable_nb_elements=<span class="keyword">True</span> )  <span class="comment"># 随机生成一个list</span></div><div class="line">[<span class="string">'KXQMXAkcEMSLfnIZkgJb'</span>, <span class="string">'BtowiRsuIqyyULnSYYdr'</span>, datetime.datetime(<span class="number">2011</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">44</span>, <span class="number">2</span>), datetime.datetime(<span class="number">2008</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">38</span>, <span class="number">38</span>), <span class="string">'juan47@hotmail.com'</span>, <span class="string">'QEsdUpEqHLpThyWCjkNx'</span>, Decimal(<span class="string">'-801375867.9'</span>), <span class="string">'ucDyeZnHAXfZtkwdVUbR'</span>, <span class="number">4707</span>, datetime.datetime(<span class="number">1974</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">54</span>, <span class="number">29</span>)]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.pydict(nb_elements=<span class="number">10</span>, variable_nb_elements=<span class="keyword">True</span>)   <span class="comment"># 随机字典</span></div><div class="line">&#123;<span class="string">'其中'</span>: <span class="number">9047</span>, <span class="string">'一直'</span>: <span class="string">'AUiUjuqccIdVAWSqzDbW'</span>, <span class="string">'选择'</span>: <span class="string">'ddong@hotmail.com'</span>, <span class="string">'开发'</span>: datetime.datetime(<span class="number">1972</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">9</span>), <span class="string">'电影'</span>: <span class="string">'KYmolBhkjSRxloXXFUUT'</span>, <span class="string">'文化'</span>: <span class="number">2681</span>, <span class="string">'这里'</span>: <span class="string">'uyang@yahoo.com'</span>, <span class="string">'不会'</span>: <span class="string">'ZPkwuxWsrJSHMNuFiWEx'</span>, <span class="string">'社会'</span>: <span class="string">'CiujeaZMZSuyYwuKzEdN'</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.pyset(nb_elements=<span class="number">10</span>, variable_nb_elements=<span class="keyword">True</span>)  <span class="comment"># 随机set</span></div><div class="line">&#123;<span class="string">'bhe@hotmail.com'</span>, <span class="string">'http://fu.cn/list/home.htm'</span>, <span class="string">'MlJluVirRkofBnKNtphM'</span>, <span class="number">296</span>, <span class="string">'ghoUSHkuEGmCzlJFKyHZ'</span>, datetime.datetime(<span class="number">2008</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">55</span>, <span class="number">4</span>), <span class="string">'AgbynHjdvwYpUkbMsfqr'</span>, <span class="number">8751</span>, <span class="number">9649</span>, <span class="string">'tangguiying@hotmail.com'</span>, Decimal(<span class="string">'5727570036.91'</span>), <span class="string">'HmDkExndcQIOaTtsSpsc'</span>, <span class="string">'hjQlLLXuHVVzENEwoHJK'</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.pytuple(nb_elements=<span class="number">10</span>, variable_nb_elements=<span class="keyword">True</span>)   <span class="comment"># 随机tuple</span></div><div class="line">(<span class="string">'http://www.cai.com/index/'</span>, datetime.datetime(<span class="number">1973</span>, <span class="number">7</span>, <span class="number">28</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">23</span>), <span class="string">'khltJQMYJvIDRMYodviZ'</span>, <span class="string">'uJezUsEqiHaiFxwOPWvl'</span>, <span class="string">'qojwZHyytBSQQavkDaTu'</span>, <span class="string">'AHUCHYuVJTHnoSEuQDSY'</span>, <span class="number">1012</span>, <span class="string">'uEYVuzeTlgVhrnCATfKw'</span>, <span class="string">'https://www.zhou.com/categories/tags/main/'</span>, <span class="string">'LbLSFZPeATtzHvbmYhGr'</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.pystruct()  <span class="comment"># 随机生成3个有10个元素的python数据结构</span></div><div class="line">([datetime.datetime(<span class="number">1996</span>, <span class="number">10</span>, <span class="number">26</span>, <span class="number">7</span>, <span class="number">35</span>, <span class="number">26</span>), datetime.datetime(<span class="number">1998</span>, <span class="number">2</span>, <span class="number">28</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">8</span>), <span class="string">'qianming@hotmail.com'</span>, <span class="string">'yEWMrpTqtAHfbxqldGrb'</span>, <span class="string">'YgKYOnrjuthOrOXhlYIl'</span>, datetime.datetime(<span class="number">1994</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">55</span>, <span class="number">30</span>), Decimal(<span class="string">'-6865068.3'</span>), <span class="string">'SYHFHiFvJlRVPcCKumUM'</span>, <span class="number">-8619.4354</span>, <span class="string">'kwGipwcASeALLeKdaWBi'</span>], &#123;<span class="string">'同时'</span>: <span class="string">'BvtYdkNTHwZNMiIIRwKd'</span>, <span class="string">'空间'</span>: <span class="number">310959668662.457</span>, <span class="string">'特别'</span>: <span class="string">'PZQDBuuQWkcdryMloyKS'</span>, <span class="string">'音乐'</span>: Decimal(<span class="string">'-7219015925.0'</span>), <span class="string">'项目'</span>: <span class="string">'https://www.zhou.cn/main.php'</span>, <span class="string">'回复'</span>: <span class="number">30.408750841</span>, <span class="string">'显示'</span>: <span class="string">'etZMrsjXJgZpDfZWhpoS'</span>, <span class="string">'大小'</span>: <span class="number">7472</span>, <span class="string">'类型'</span>: <span class="string">'OsjpxgLqnTcdVOlHoMoP'</span>, <span class="string">'什么'</span>: <span class="string">'http://www.xia.com/posts/app/index/'</span>&#125;, &#123;<span class="string">'朋友'</span>: &#123;<span class="number">0</span>: <span class="number">-415025.243093017</span>, <span class="number">1</span>: [<span class="number">1799</span>, <span class="number">585</span>, <span class="string">'shu@hotmail.com'</span>], <span class="number">2</span>: &#123;<span class="number">0</span>: <span class="number">9980</span>, <span class="number">1</span>: <span class="string">'qnOnFTzGnsjvXGybBnMF'</span>, <span class="number">2</span>: [<span class="string">'http://zheng.cn/list/search/tag/faq.html'</span>, Decimal(<span class="string">'964285276661463.0'</span>)]&#125;&#125;, <span class="string">'发生'</span>: &#123;<span class="number">1</span>: <span class="number">-5339010.6134</span>, <span class="number">2</span>: [datetime.datetime(<span class="number">1987</span>, <span class="number">6</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">45</span>), <span class="string">'SvSpvKqTXlJvdQhHScwM'</span>, <span class="string">'PZjKOYzZzoNVsHLRcARQ'</span>], <span class="number">3</span>: &#123;<span class="number">1</span>: <span class="string">'https://www.yan.cn/register/'</span>, <span class="number">2</span>: <span class="number">2191</span>, <span class="number">3</span>: [<span class="string">'HMHKQuLRBQaaAypRbtHU'</span>, datetime.datetime(<span class="number">2014</span>, <span class="number">5</span>, <span class="number">24</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">36</span>)]&#125;&#125;, <span class="string">'我的'</span>: &#123;<span class="number">2</span>: <span class="string">'linxia@yahoo.com'</span>, <span class="number">3</span>: [<span class="string">'http://gu.com/about.php'</span>, <span class="string">'DhzpWYkgLCobGSHDLXzI'</span>, <span class="number">1420</span>], <span class="number">4</span>: &#123;<span class="number">2</span>: datetime.datetime(<span class="number">1986</span>, <span class="number">2</span>, <span class="number">22</span>, <span class="number">4</span>, <span class="number">50</span>, <span class="number">12</span>), <span class="number">3</span>: <span class="string">'rRHwQQzkpAMBQxwVITBa'</span>, <span class="number">4</span>: [datetime.datetime(<span class="number">1984</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">52</span>, <span class="number">18</span>), <span class="number">-73821572962388.7</span>]&#125;&#125;, <span class="string">'全部'</span>: &#123;<span class="number">3</span>: <span class="string">'uMQeeBXYNGhrHnAerdjp'</span>, <span class="number">4</span>: [<span class="number">323329.56403</span>, <span class="string">'kFvqXFhhtQPNtrOjKtxa'</span>, <span class="string">'http://peng.cn/'</span>], <span class="number">5</span>: &#123;<span class="number">3</span>: <span class="string">'lcaoeisYIAOsuRjbOXia'</span>, <span class="number">4</span>: Decimal(<span class="string">'-902407032449085.0'</span>), <span class="number">5</span>: [<span class="number">2296</span>, <span class="string">'uyuWgnsONzLluXqXdASM'</span>]&#125;&#125;, <span class="string">'大小'</span>: &#123;<span class="number">4</span>: <span class="string">'min63@hotmail.com'</span>, <span class="number">5</span>: [datetime.datetime(<span class="number">1991</span>, <span class="number">10</span>, <span class="number">22</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">48</span>), <span class="string">'cDYEScdIokWuvGhRkWqs'</span>, <span class="string">'XeDJojWyywFvzmWYaokO'</span>], <span class="number">6</span>: &#123;<span class="number">4</span>: Decimal(<span class="string">'-4167029.2915827'</span>), <span class="number">5</span>: <span class="number">4030</span>, <span class="number">6</span>: [<span class="number">6372</span>, <span class="string">'xfRXXEFGsNQpeIGmbaHU'</span>]&#125;&#125;, <span class="string">'语言'</span>: &#123;<span class="number">5</span>: <span class="string">'https://www.guo.cn/'</span>, <span class="number">6</span>: [<span class="number">6498</span>, datetime.datetime(<span class="number">1981</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">4</span>, <span class="number">29</span>), <span class="number">42598100345.61</span>], <span class="number">7</span>: &#123;<span class="number">5</span>: <span class="string">'http://zheng.cn/'</span>, <span class="number">6</span>: <span class="number">-229316.268238</span>, <span class="number">7</span>: [<span class="string">'https://www.qiao.cn/home/'</span>, <span class="string">'GtaEXeVxjRnnkggjEguv'</span>]&#125;&#125;, <span class="string">'表示'</span>: &#123;<span class="number">6</span>: <span class="string">'xcBvcGUWxdMhDqgzmhSd'</span>, <span class="number">7</span>: [<span class="string">'kwDaFhyTKqHajGSaNOMf'</span>, <span class="number">8561</span>, <span class="number">5456</span>], <span class="number">8</span>: &#123;<span class="number">6</span>: <span class="string">'https://zhou.cn/tags/tag/faq.html'</span>, <span class="number">7</span>: <span class="string">'IGayAZtTQVlSOasQwgug'</span>, <span class="number">8</span>: [<span class="string">'iCjwBzHfmPSLqAgmIOle'</span>, <span class="number">70511766106574.5</span>]&#125;&#125;, <span class="string">'电子'</span>: &#123;<span class="number">7</span>: <span class="string">'http://www.lu.org/tags/posts/terms/'</span>, <span class="number">8</span>: [datetime.datetime(<span class="number">1978</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">35</span>), <span class="string">'https://song.cn/main/categories/homepage.html'</span>, <span class="string">'https://long.com/register.html'</span>], <span class="number">9</span>: &#123;<span class="number">7</span>: <span class="string">'nFJNhyMYBvfTxrYwYPUQ'</span>, <span class="number">8</span>: <span class="number">-2252757903.0</span>, <span class="number">9</span>: [<span class="string">'GuJnhMEgXoMAivrgGZie'</span>, datetime.datetime(<span class="number">2014</span>, <span class="number">5</span>, <span class="number">29</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">50</span>)]&#125;&#125;, <span class="string">'的人'</span>: &#123;<span class="number">8</span>: <span class="string">'WgHePwYSPgSiPllXpLlJ'</span>, <span class="number">9</span>: [<span class="number">1782</span>, <span class="string">'fSepbXwpvhiBphzDTDNC'</span>, <span class="number">-9117731.63459416</span>], <span class="number">10</span>: &#123;<span class="number">8</span>: <span class="number">5602</span>, <span class="number">9</span>: <span class="number">3664</span>, <span class="number">10</span>: [<span class="string">'http://www.mao.com/search/tag/main/'</span>, Decimal(<span class="string">'5579.7377'</span>)]&#125;&#125;, <span class="string">'不过'</span>: &#123;<span class="number">9</span>: <span class="string">'rOfkDPTHvzKbfvQHbPNm'</span>, <span class="number">10</span>: [<span class="number">314.397</span>, <span class="string">'StqeLyXkIDKHfExSjggk'</span>, <span class="string">'xiuyingkang@gao.cn'</span>], <span class="number">11</span>: &#123;<span class="number">9</span>: <span class="string">'BLKNdcccamYzBwRcMxlx'</span>, <span class="number">10</span>: <span class="string">'yongduan@gong.org'</span>, <span class="number">11</span>: [<span class="string">'ZocoQHdbhaNloWALnzwt'</span>, <span class="string">'eWVvvHurAlZZRxlYHZXi'</span>]&#125;&#125;&#125;)</div></pre></td></tr></table></figure><h3 id="profile-人物描述信息"><a href="#profile-人物描述信息" class="headerlink" title="profile 人物描述信息"></a>profile 人物描述信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.profile(fields=<span class="keyword">None</span>, sex=<span class="keyword">None</span>)  <span class="comment"># 人物描述信息：姓名、性别、地址、公司等</span></div><div class="line">&#123;<span class="string">'job'</span>: <span class="string">'Licensed conveyancer'</span>, <span class="string">'company'</span>: <span class="string">'万迅电脑信息有限公司'</span>, <span class="string">'ssn'</span>: <span class="string">'370684199902182726'</span>, <span class="string">'residence'</span>: <span class="string">'福建省小红市南长广州街K座 406448'</span>, <span class="string">'current_location'</span>: (Decimal(<span class="string">'18.050895'</span>), Decimal(<span class="string">'-0.877117'</span>)), <span class="string">'blood_group'</span>: <span class="string">'0-'</span>, <span class="string">'website'</span>: [<span class="string">'https://www.yi.org/'</span>, <span class="string">'https://www.hu.com/'</span>, <span class="string">'https://www.yin.cn/'</span>], <span class="string">'username'</span>: <span class="string">'minghuang'</span>, <span class="string">'name'</span>: <span class="string">'后英'</span>, <span class="string">'sex'</span>: <span class="string">'F'</span>, <span class="string">'address'</span>: <span class="string">'安徽省秀荣市璧山嘉禾路T座 954960'</span>, <span class="string">'mail'</span>: <span class="string">'czhong@hotmail.com'</span>, <span class="string">'birthdate'</span>: <span class="string">'1975-03-09'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = fake.simple_profile(sex=<span class="string">"m"</span>) <span class="comment"># 人物精简信息</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i,v <span class="keyword">in</span> s.items():</div><div class="line"><span class="meta">... </span>    print(i,v)</div><div class="line">...</div><div class="line">username chao85</div><div class="line">name 邴宇</div><div class="line">sex M</div><div class="line">address 陕西省东市朝阳廖街Y座 <span class="number">757661</span></div><div class="line">mail xiazhang@gmail.com</div><div class="line">birthdate <span class="number">1996</span><span class="number">-09</span><span class="number">-20</span></div></pre></td></tr></table></figure><h3 id="ssn-社会安全码-身份证"><a href="#ssn-社会安全码-身份证" class="headerlink" title="ssn 社会安全码(身份证)"></a>ssn 社会安全码(身份证)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.ssn() <span class="comment"># 随机生成身份证号(18位)</span></div><div class="line"><span class="string">'140100196612297997'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(fake.ssn())</div><div class="line"><span class="number">18</span></div></pre></td></tr></table></figure><h3 id="user-agent-用户代理"><a href="#user-agent-用户代理" class="headerlink" title="user_agent 用户代理"></a>user_agent 用户代理</h3><p>常用在伪造浏览器信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.user_agent() <span class="comment"># 伪造UA</span></div><div class="line"><span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/5361 (KHTML, like Gecko) Chrome/15.0.812.0 Safari/5361'</span></div></pre></td></tr></table></figure><p>平台信息伪造</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.linux_platform_token()</div><div class="line"><span class="string">'X11; Linux i686'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.linux_processor()</div><div class="line"><span class="string">'i686'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.windows_platform_token()</div><div class="line"><span class="string">'Windows CE'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.mac_platform_token()</div><div class="line"><span class="string">'Macintosh; Intel Mac OS X 10_7_4'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.mac_processor()</div><div class="line"><span class="string">'PPC'</span></div></pre></td></tr></table></figure><p>浏览器伪造</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.internet_explorer() <span class="comment"># IE浏览器</span></div><div class="line"><span class="string">'Mozilla/5.0 (compatible; MSIE 5.0; Windows NT 6.1; Trident/4.0)'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.opera() <span class="comment"># opera浏览器</span></div><div class="line"><span class="string">'Opera/9.37.(Windows 95; doi-IN) Presto/2.9.178 Version/10.00'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.firefox() <span class="comment"># firefox浏览器</span></div><div class="line"><span class="string">'Mozilla/5.0 (Windows NT 5.0; te-IN; rv:1.9.2.20) Gecko/2015-09-28 13:29:05 Firefox/12.0'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.safari() <span class="comment"># safari浏览器</span></div><div class="line"><span class="string">'Mozilla/5.0 (Windows; U; Windows NT 4.0) AppleWebKit/533.37.4 (KHTML, like Gecko) Version/5.0 Safari/533.37.4'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.chrome() <span class="comment"># chrome浏览器</span></div><div class="line"><span class="string">'Mozilla/5.0 (Windows 98; Win 9x 4.90) AppleWebKit/5361 (KHTML, like Gecko) Chrome/14.0.866.0 Safari/5361'</span></div></pre></td></tr></table></figure><h2 id="自定义扩展"><a href="#自定义扩展" class="headerlink" title="自定义扩展"></a>自定义扩展</h2><p>Faker 已经提供了足够丰富的信息生成，包括名字、手机号、邮箱地址、邮编等等。尽管如此，可能还是没有办法满足你的需求。这时，可以利用自定义扩展，引用外部的 provider，自定义你要的功能。</p><p>Faker 对象可以通过 <code>add_provider</code> 方法将自定义的 Provider 添加到对象中,自定义的 Provider 需要继承自 BaseProvider。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</div><div class="line">fake = Faker()</div><div class="line"></div><div class="line"><span class="comment"># first, import a similar Provider or use the default one</span></div><div class="line"><span class="keyword">from</span> faker.providers <span class="keyword">import</span> BaseProvider</div><div class="line"></div><div class="line"><span class="comment"># create new provider class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyProvider</span><span class="params">(BaseProvider)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'bar'</span></div><div class="line"></div><div class="line"><span class="comment"># then add new provider to faker instance</span></div><div class="line">fake.add_provider(MyProvider)</div><div class="line"></div><div class="line"><span class="comment"># now you can use:</span></div><div class="line">print(fake.foo())</div></pre></td></tr></table></figure><p>结果显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bar</div></pre></td></tr></table></figure><h2 id="随机控制"><a href="#随机控制" class="headerlink" title="随机控制"></a>随机控制</h2><p><code>Faker</code> 随机生成由 <code>random.Random</code> 驱动。其中，<code>.random</code> 属性返回 <code>random.Random</code> 对象。通过对该对象的操作，可以实现自定义的行为。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</div><div class="line">fake = Faker()</div><div class="line">fake.random</div><div class="line">fake.random.getstate()</div></pre></td></tr></table></figure><p>那么，可以实现什么自定义呢？举个例子，我们可以设置 <code>seed</code>，通过给定的 <code>seed</code> 可以控制每次生成的内容都是一样的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake = Faker()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.random.seed(<span class="number">4321</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.name()</div><div class="line"><span class="string">'Ryan Gallagher'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.address()</div><div class="line"><span class="string">'7631 Johnson Village Suite 690\nAdamsbury, NC 50008'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.random.seed(<span class="number">4321</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.name()</div><div class="line"><span class="string">'Ryan Gallagher'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.address()</div><div class="line"><span class="string">'7631 Johnson Village Suite 690\nAdamsbury, NC 50008'</span></div></pre></td></tr></table></figure><p>不同的两次运行，只要seed一样，生成出来的信息就是一样的。</p><p>注意：<code>fake.random.seed(4321)</code> 可以写成 <code>fake.seed(4321)</code> 。</p><h2 id="命令行生成"><a href="#命令行生成" class="headerlink" title="命令行生成"></a>命令行生成</h2><p>有时想在shell或者其他程序中生成一些伪数据，是不是一定要写一个Python脚本呢？别急——Faker提供了一个命令行工具，估计可以应对大部分场景了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ faker address</div><div class="line">968 Bahringer Garden Apt. 722Kristinaland, NJ 09890</div><div class="line"></div><div class="line">$ python3 -m faker address</div><div class="line">432 Marvin Wells Apt. 593\nWest Eric, DC 45650-8420</div><div class="line"></div><div class="line">$ faker -l de_DE address</div><div class="line">Samira-Niemeier-Allee 5694812 Biedenkopf</div><div class="line"></div><div class="line">$ faker profile</div><div class="line">&#123;<span class="string">'job'</span>: <span class="string">'Designer, blown glass/stained glass'</span>, <span class="string">'company'</span>: <span class="string">'Dennis-Bowers'</span>, <span class="string">'ssn'</span>: <span class="string">'034-28-9965'</span>, <span class="string">'residence'</span>: <span class="string">'34796 Jeremiah Station Apt. 782\nWest Timothy, TX 24139-6974'</span>, <span class="string">'current_location'</span>: (Decimal(<span class="string">'-47.425017'</span>), Decimal(<span class="string">'-42.743615'</span>)), <span class="string">'blood_group'</span>: <span class="string">'0+'</span>, <span class="string">'website'</span>: [<span class="string">'https://www.gardner.biz/'</span>, <span class="string">'http://glover-ellison.info/'</span>, <span class="string">'http://www.harrison.biz/'</span>], <span class="string">'username'</span>: <span class="string">'patrick33'</span>, <span class="string">'name'</span>: <span class="string">'Alexandra Montgomery'</span>, <span class="string">'sex'</span>: <span class="string">'F'</span>, <span class="string">'address'</span>: <span class="string">'2314 Collier Stream Suite 093\nMcintyreside, UT 19553'</span>, <span class="string">'mail'</span>: <span class="string">'gomezterri@hotmail.com'</span>, <span class="string">'birthdate'</span>: <span class="string">'2005-01-30'</span>&#125;</div><div class="line"></div><div class="line">$ faker profile ssn,name</div><div class="line">&#123;<span class="string">'ssn'</span>: <span class="string">'344-68-7420'</span>, <span class="string">'name'</span>: <span class="string">'Veronica Brennan'</span>&#125;</div><div class="line"></div><div class="line">$ faker -r=3 -s=<span class="string">";"</span> name</div><div class="line">Willam Kertzmann;</div><div class="line">Josiah Maggio;</div><div class="line">Gayla Schmitt;</div></pre></td></tr></table></figure><p>faker 命令帮助：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">faker [-h] [--version] [-o output]</div><div class="line">      [-l &#123;bg_BG,cs_CZ,...,zh_CN,zh_TW&#125;]</div><div class="line">      [-r REPEAT] [-s SEP]</div><div class="line">      [-i &#123;module.containing.custom_provider othermodule.containing.custom_provider&#125;]</div><div class="line">      [fake] [fake argument [fake argument ...]]</div></pre></td></tr></table></figure><p>选项说明：</p><ul><li><code>faker</code> ： 在shell中，<code>faker</code> 命令也可以用 <code>python -m faker</code> 来代替</li><li><code>-h</code>，<code>--help</code> ： 帮助信息</li><li><code>--version</code> ：显示版本</li><li><code>-o FILENAM</code> ：输出结果到文件中</li><li><code>-l {bg_BG,cs_CZ,...,zh_CN,zh_TW}</code> ：指定本地化，<code>zh_CN</code> 表示中文</li><li><code>-r REPEAT</code> ：指定生成多少条相同类型的数据</li><li><code>-s SEP</code> ：在每个输出后边添加指定的分隔符</li><li><code>-i {my.custom_provider other.custom_provider}</code> ：自定义扩展，<code>prividers</code>列表。注意，这里要指定包含你 <code>provider</code> 类的模块的路径，而不是程序本身。</li><li><code>fake</code> ：指定方法名称，如：<code>name</code> , <code>address</code> , <code>text</code> 等</li><li><code>[fake argument ...]</code> ：为方法指定参数。如上例，为 <code>profile</code> 方法指定 <code>ssn</code> 和 <code>name</code> 参数，只输出这两个类型的内容。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在开发中常常需要利用一些假数据来做测试,这种时候就可以使用 &lt;code&gt;Faker&lt;/code&gt; 来伪造数据从而用来测试.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/joke2k/faker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Faker&lt;/strong&gt;&lt;/a&gt; 是一个可以让你生成伪造数据的Python包。当你需要初始化数据库，创建美观的XML文档，不断产生数据来进行压力测试或者想从生产服务器上拉取匿名数据的时候，Faker将是你最棒的选择。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python资源收集</title>
    <link href="http://yoursite.com/2017/Python-resource-collection.html"/>
    <id>http://yoursite.com/2017/Python-resource-collection.html</id>
    <published>2017-10-31T06:49:49.000Z</published>
    <updated>2017-10-31T07:25:40.302Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h2><blockquote><p><a href="https://awesome-python.com/" target="_blank" rel="external">https://awesome-python.com/</a></p></blockquote><p><a href="https://github.com/vinta/awesome-python" target="_blank" rel="external">awesome-python</a> 是 vinta 发起维护的 Python 资源列表，内容包括：Web框架、网络爬虫、网络内容提取、模板引擎、数据库、数据可视化、图片处理、文本处理、自然语言处理、机器学习、日志、代码分析等第三方库，收录比较全面。<br>在开发过程中，可先去找下有哪些适合当前使用的第三库，避免重复造轮子。</p><blockquote><p><a href="https://github.com/jobbole/awesome-python-cn" target="_blank" rel="external">https://github.com/jobbole/awesome-python-cn</a></p></blockquote><p>awesome-python 的中文版，由伯乐在线持续更新。<br>awesome-python 虽然挺全，但基本只对收录的资源做了极为简要的介绍，如果有更详细的中文介绍，对相应开发者的帮助会更大。</p><blockquote><p><a href="http://hao.jobbole.com/" target="_blank" rel="external">http://hao.jobbole.com/</a></p></blockquote><p>伯乐在线资源导航收录优秀的工具资源。内容覆盖开发、设计、产品和管理等IT互联网行业相关的领域。目前已经收录 1439 项工具资源。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;第三方库&quot;&gt;&lt;a href=&quot;#第三方库&quot; class=&quot;headerlink&quot; title=&quot;第三方库&quot;&gt;&lt;/a&gt;第三方库&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://awesome-python.com/&quot;
        
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python 之禅</title>
    <link href="http://yoursite.com/2017/The-Zen-of-Python.html"/>
    <id>http://yoursite.com/2017/The-Zen-of-Python.html</id>
    <published>2017-10-30T02:53:06.000Z</published>
    <updated>2018-02-09T06:45:14.850Z</updated>
    
    <content type="html"><![CDATA[<p>在vim的命令模式下输入：</p><blockquote><p>:read !echo import this | python</p></blockquote><p>会得到 <code>The Zen of Python</code> 的原文。</p><p>或者直接在 python 解释器中导入 <code>this</code> 模块（python2.x 和 python3.x 都可以）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import this</div></pre></td></tr></table></figure><a id="more"></a><h2 id="英文原版"><a href="#英文原版" class="headerlink" title="英文原版"></a>英文原版</h2><blockquote><p>The Zen of Python, by Tim Peters</p><p>Beautiful is better than ugly.<br>Explicit is better than implicit.<br>Simple is better than complex.<br>Complex is better than complicated.<br>Flat is better than nested.<br>Sparse is better than dense.<br>Readability counts.<br>Special cases aren’t special enough to break the rules.<br>Although practicality beats purity.<br>Errors should never pass silently.<br>Unless explicitly silenced.<br>In the face of ambiguity, refuse the temptation to guess.<br>There should be one– and preferably only one –obvious way to do it.<br>Although that way may not be obvious at first unless you’re Dutch.<br>Now is better than never.<br>Although never is often better than <em>right</em> now.<br>If the implementation is hard to explain, it’s a bad idea.<br>If the implementation is easy to explain, it may be a good idea.<br>Namespaces are one honking great idea – let’s do more of those!</p></blockquote><h2 id="中文版一"><a href="#中文版一" class="headerlink" title="中文版一"></a>中文版一</h2><blockquote><p>Python之禅</p><p>美丽胜过丑陋<br>明确胜过含混<br>简洁胜过复杂<br>复杂好过混乱<br>平坦强于嵌套<br>留白好过抱团<br>通俗易懂有伟大的价值<br>没有什么能特殊到值得牺牲这些原则<br>尽管现实经常玷污这些纯净<br>错误永不可轻易原谅<br>除非坦诚相对<br>面对模棱两可，拒绝猜测的诱惑<br>那儿应该有一条，也只有一条明确的道路通向彼岸<br>尽管一开始那条路可能不是那样明显，除非你是Dutch<br>现在行动好过从不行动<br>尽管不行动经常比鲁莽行动要好<br>如果实现难以解释，那是一个坏主意<br>如果实现容易解释，那可能是个好主意<br>命名空间是一个伟大的注意－－我们应该好好利用</p></blockquote><ul><li>Python之父是荷兰人Guido van Rossum，被誉为历史上最伟大的12名程序员之一。</li><li>Dutch意指python作者Guido。</li></ul><h2 id="中文版二"><a href="#中文版二" class="headerlink" title="中文版二"></a>中文版二</h2><blockquote><p>Python之禅–python核心开发者Tim Peters</p><p>优美胜于丑陋（Python 以编写优美的代码为目标）<br>明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）<br>简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）<br>复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）<br>扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）<br>间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）<br>可读性很重要（优美的代码是可读的）<br>即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）<br>不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写 except:pass 风格的代码）<br>当存在多种可能，不要尝试去猜测<br>而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）<br>虽然这并不容易，因为你不是 Python 之父（这里的 Dutch 是指 Guido ）<br>做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）<br>如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准）<br>命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）</p></blockquote><h2 id="中文版三"><a href="#中文版三" class="headerlink" title="中文版三"></a>中文版三</h2><blockquote><p>美麗優於醜陋，明講好過暗諭。<br>簡潔者為上，複雜者次之，繁澀者為下。<br>平舖善於層疊，勻散勝過稠密；以致輕鬆易讀。<br>特例難免但不可打破原則，務求純淨卻不可不切實際。<br>斷勿使錯誤靜靜流逝，除非有意如此。<br>在模擬兩可之間，拒絕猜測的誘惑。<br>總會有一種明確的寫法，最好也只有一種，<br>但或須細想方可得。<br>凡事雖應三思後行，但坐而言不如起而行。<br>難以解釋的實作方式，必定是壞方法。<br>容易解釋的實作方式，可能是好主意。<br>命名空間讚，吾人多實用。</p></blockquote><h2 id="图解版"><a href="#图解版" class="headerlink" title="图解版"></a>图解版</h2><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-10-30-006faQNTgw1f39d4phtn8j30jg1uogxv.jpg" alt="006faQNTgw1f39d4phtn8j30jg1uogxv"></p><h2 id="this-模块的实现原理"><a href="#this-模块的实现原理" class="headerlink" title="this 模块的实现原理"></a>this 模块的实现原理</h2><p>翻看模块脚本 <code>this.py</code> 的实现代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">s = &quot;&quot;&quot;Gur Mra bs Clguba, ol Gvz Crgref</div><div class="line"></div><div class="line">Ornhgvshy vf orggre guna htyl.</div><div class="line">Rkcyvpvg vf orggre guna vzcyvpvg.</div><div class="line">Fvzcyr vf orggre guna pbzcyrk.</div><div class="line">Pbzcyrk vf orggre guna pbzcyvpngrq.</div><div class="line">Syng vf orggre guna arfgrq.</div><div class="line">Fcnefr vf orggre guna qrafr.</div><div class="line">Ernqnovyvgl pbhagf.</div><div class="line">Fcrpvny pnfrf nera&apos;g fcrpvny rabhtu gb oernx gur ehyrf.</div><div class="line">Nygubhtu cenpgvpnyvgl orngf chevgl.</div><div class="line">Reebef fubhyq arire cnff fvyragyl.</div><div class="line">Hayrff rkcyvpvgyl fvyraprq.</div><div class="line">Va gur snpr bs nzovthvgl, ershfr gur grzcgngvba gb thrff.</div><div class="line">Gurer fubhyq or bar-- naq cersrenoyl bayl bar --boivbhf jnl gb qb vg.</div><div class="line">Nygubhtu gung jnl znl abg or boivbhf ng svefg hayrff lbh&apos;er Qhgpu.</div><div class="line">Abj vf orggre guna arire.</div><div class="line">Nygubhtu arire vf bsgra orggre guna *evtug* abj.</div><div class="line">Vs gur vzcyrzragngvba vf uneq gb rkcynva, vg&apos;f n onq vqrn.</div><div class="line">Vs gur vzcyrzragngvba vf rnfl gb rkcynva, vg znl or n tbbq vqrn.</div><div class="line">Anzrfcnprf ner bar ubaxvat terng vqrn -- yrg&apos;f qb zber bs gubfr!&quot;&quot;&quot;</div><div class="line"></div><div class="line">d = &#123;&#125;</div><div class="line">for c in (65, 97):</div><div class="line">    for i in range(26):</div><div class="line">        d[chr(i+c)] = chr((i+13) % 26 + c)</div><div class="line"></div><div class="line">print(&quot;&quot;.join([d.get(c, c) for c in s]))</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">d = &#123;&#125;</div><div class="line">for c in (65, 97):</div><div class="line">    for i in range(26):</div><div class="line">        d[chr(i+c)] = chr((i+13) % 26 + c)</div></pre></td></tr></table></figure><p>这部分代码，是用来构建转换的对应表，大写（65开始），小写（97开始）。也就是构建字典 <code>d</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&apos;A&apos;: &apos;N&apos;, &apos;B&apos;: &apos;O&apos;, ...,&apos;M&apos;: &apos;Z&apos;, &apos;N&apos;: &apos;A&apos;, ..., &apos;Y&apos;: &apos;L&apos;, &apos;Z&apos;: &apos;M&apos;, &apos;a&apos;: &apos;n&apos;, &apos;b&apos;: &apos;o&apos;, ..., &apos;m&apos;: &apos;z&apos;, &apos;n&apos;: &apos;a&apos;,..., &apos;y&apos;: &apos;l&apos;, &apos;z&apos;: &apos;m&apos;&#125;</div></pre></td></tr></table></figure><p>更直观的对应关系如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">A &lt;-&gt; N</div><div class="line">B &lt;-&gt; O</div><div class="line">C &lt;-&gt; P</div><div class="line">...</div><div class="line">M &lt;-&gt; Z</div><div class="line"></div><div class="line">a &lt;-&gt; n</div><div class="line">b &lt;-&gt; o</div><div class="line">c &lt;-&gt; p</div><div class="line">...</div><div class="line">m &lt;-&gt; z</div></pre></td></tr></table></figure><p>这种被叫做 <a href="https://zh.wikipedia.org/wiki/ROT13" target="_blank" rel="external"><strong>rot13</strong></a> 的编码方式，是一种简易的替换式密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(&quot;&quot;.join([d.get(c, c) for c in s]))</div></pre></td></tr></table></figure><p>这部分代码，通过转换表将 <code>字符串s</code> 中的字母逐一替换，没有找到的key，则不替换。通过get函数设定默认值。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在vim的命令模式下输入：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;:read !echo import this | python&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;会得到 &lt;code&gt;The Zen of Python&lt;/code&gt; 的原文。&lt;/p&gt;
&lt;p&gt;或者直接在 python 解释器中导入 &lt;code&gt;this&lt;/code&gt; 模块（python2.x 和 python3.x 都可以）：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import this&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python安装</title>
    <link href="http://yoursite.com/2017/Python-install.html"/>
    <id>http://yoursite.com/2017/Python-install.html</id>
    <published>2017-10-23T09:01:39.000Z</published>
    <updated>2017-10-24T07:39:39.666Z</updated>
    
    <content type="html"><![CDATA[<p>python的安装越来越容易了，这里收集常见几个版本的安装步骤。</p><a id="more"></a><h1 id="python2-6-x-安装"><a href="#python2-6-x-安装" class="headerlink" title="python2.6.x 安装"></a>python2.6.x 安装</h1><p>CentOS6.5 系统默认自带 python2.6.x 。</p><h1 id="python2-7-x-安装"><a href="#python2-7-x-安装" class="headerlink" title="python2.7.x 安装"></a>python2.7.x 安装</h1><p>CentOS6 中，官方默认的Python版本为2.6.x。要装2.7版本，有两种方法。<br>CentOS7 中，官方默认自带python2.7。</p><h2 id="yum源-ius"><a href="#yum源-ius" class="headerlink" title="yum源-ius"></a>yum源-ius</h2><p><a href="https://ius.io/" target="_blank" rel="external"><strong>IUS（Inline with Upstream Stable）</strong></a>是一个社区项目，它旨在为Linux企业发行版提供可选软件的最新版RPM软件包。</p><p>IUS软件替换CentOS基本源中的软件使用的是安全替换的方式：即当CentOS系统中安装了相应的软件后，再使用IUS源安装相应的软件，IUS软件不会直接更新升级系统自带的软件源，而是提示一个冲突，如果要安装IUS软件，需要先卸载CentOS系统中自带的相应的软件。</p><h3 id="安装ius源"><a href="#安装ius源" class="headerlink" title="安装ius源"></a>安装ius源</h3><p>ius源依赖epel源，首先安装epel源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum install epel-release</div></pre></td></tr></table></figure><p>安装 <a href="https://dl.iuscommunity.org/pub/ius/stable/CentOS/" target="_blank" rel="external"><strong>ius源</strong></a>，可查看有哪些软件能安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">centos6</div><div class="line"># yum install https://dl.iuscommunity.org/pub/ius/stable/CentOS/6/x86_64/ius-release-1.0-15.ius.centos6.noarch.rpm</div><div class="line"></div><div class="line">centos7</div><div class="line"># yum install https://dl.iuscommunity.org/pub/ius/stable/CentOS/7/x86_64/ius-release-1.0-15.ius.centos7.noarch.rpm</div></pre></td></tr></table></figure><h3 id="使用ius源安装python2-7-x"><a href="#使用ius源安装python2-7-x" class="headerlink" title="使用ius源安装python2.7.x"></a>使用ius源安装python2.7.x</h3><p>IUS软件包的命名方式为 <code>软件名+版本号+次版本号+u</code>，如Apache httpd 2.4软件包的名称为 <code>httpd24u</code>，PHP 7.0软件包的名称为 <code>php70u</code>，MariaDB 10.1软件包的名称为 <code>mariadb101u</code>。<br>但在ius源的CentoS6中，对python的命名挺奇怪的，<code>软件名+版本号+次版本号+u</code>的命名方式只在<code>python3.3+</code>的版本才起用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># yum clean all</div><div class="line"># yum install python27</div></pre></td></tr></table></figure><h3 id="pip-安装"><a href="#pip-安装" class="headerlink" title="pip 安装"></a>pip 安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum install python27-pip</div></pre></td></tr></table></figure><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><h3 id="python2-7"><a href="#python2-7" class="headerlink" title="python2.7"></a>python2.7</h3><p>更新指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># yum -y update</div><div class="line"># yum groupinstall -y &apos;development tools&apos;</div></pre></td></tr></table></figure><p>安装python需要的依赖包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum install zlib-devel bzip2-devel openssl-devel xz-libs wget</div></pre></td></tr></table></figure><p>下载源码包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># wget https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz</div><div class="line"># tar zxvf Python-2.7.9.tgz</div></pre></td></tr></table></figure><p>编译安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># cd Python-2.7.9</div><div class="line"># ./configure --prefix=/usr/local</div><div class="line"># make &amp;&amp; make install</div></pre></td></tr></table></figure><p>python2.7 的相关命令会被安装在 <code>/usr/local/bin</code> 目录下。</p><p>要注意：CentOS6 中 yum 默认使用的是 python2.6，如果做软链 <code>ln -s /usr/local/bin/python2.7 /usr/bin/python</code>，会使得 yum 无法使用的。</p><h3 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h3><p>安装setuptools，从 <a href="https://pypi.python.org/pypi/setuptools#code-of-conduct" target="_blank" rel="external"><strong>下载链接</strong></a> 寻找要安装的版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">下载setuptools-25.1.6.zip</div><div class="line"># wget https://pypi.python.org/packages/45/29/8814bf414e7cd1031e1a3c8a4169218376e284ea2553cc0822a6ea1c2d78/setuptools-36.6.0.zip#md5=74663b15117d9a2cc5295d76011e6fd1</div><div class="line"></div><div class="line">解压</div><div class="line"># unzip setuptools-25.1.6.zip</div><div class="line"># cd setuptools-25.1.6</div><div class="line"></div><div class="line">安装，一定要用python2.7来安装</div><div class="line"># python2.7 setup.py install</div></pre></td></tr></table></figure><p>安装pip，利用 <code>get-pip.py</code> 来自动安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># wget https://bootstrap.pypa.io/get-pip.py</div><div class="line"># python2.7 get-pip.py</div></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># pip2.7 -V</div></pre></td></tr></table></figure><h1 id="python3-x-安装"><a href="#python3-x-安装" class="headerlink" title="python3.x 安装"></a>python3.x 安装</h1><h2 id="yum源-ius-1"><a href="#yum源-ius-1" class="headerlink" title="yum源-ius"></a>yum源-ius</h2><p>按照上述的步骤，安装完ius源后，就可以轻松安装python3.x的版本了，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># yum install python35u</div><div class="line"></div><div class="line">或</div><div class="line"># yum install python33</div></pre></td></tr></table></figure><p>安装相应的pip版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum install python35u-pip</div></pre></td></tr></table></figure><h2 id="编译安装-1"><a href="#编译安装-1" class="headerlink" title="编译安装"></a>编译安装</h2><p>从 <a href="https://www.python.org/ftp/python/" target="_blank" rel="external"><strong>源码站</strong></a> 下载相应的源码包，安装上面的步骤，编译安装就行了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python的安装越来越容易了，这里收集常见几个版本的安装步骤。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>日常记错</title>
    <link href="http://yoursite.com/2017/Record-the-error-daily.html"/>
    <id>http://yoursite.com/2017/Record-the-error-daily.html</id>
    <published>2017-09-29T03:21:36.000Z</published>
    <updated>2017-11-22T07:48:10.427Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSH连接报错"><a href="#SSH连接报错" class="headerlink" title="SSH连接报错"></a>SSH连接报错</h2><p>SSH连接服务器，出现报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># ssh root@xxx.xxx.xxx.xxx </div><div class="line">setsockopt SO_KEEPALIVE: Invalid argument</div><div class="line">write: Broken pipe</div></pre></td></tr></table></figure><p>经过检查，发现是自己的Mac电脑更新系统（MacOS High Sierra），导致电脑中的 SSH 客户端程序坏了，需要重新安装 SSH 客户端。</p><h2 id="字体文件跨域问题"><a href="#字体文件跨域问题" class="headerlink" title="字体文件跨域问题"></a>字体文件跨域问题</h2><p>在 <code>aus.test.com</code> 中调用 <code>www.test.com</code> 的字体文件 <code>muii.ttf</code> ，发现无法加载。</p><p>谷歌调试工具显示：</p><blockquote><p>access to Font at ‘<a href="http://www.test.com/css/muii.ttf" target="_blank" rel="external">http://www.test.com/css/muii.ttf</a>‘ from origin ‘<a href="http://aus.test.com" target="_blank" rel="external">http://aus.test.com</a>‘ has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘<a href="http://aus.test.com" target="_blank" rel="external">http://aus.test.com</a>‘ is therefore not allowed access.</p></blockquote><p>可通过Nginx模块 <code>Http_Headers_Module</code> 来添加 <code>Access-Control-Allow-Origin</code> 允许目标域名访问。</p><p>在 <code>www.test.com</code>（放置 .ttf 文件的域名） 的配置文件的 <code>server</code> 段中，加入以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 字体文件跨域</div><div class="line">location ~ .*\.(eot|ttf|woff|svg|otf)$ &#123;</div><div class="line">    # 只允许单域名或者 &apos;*&apos;。不推荐 ‘*’ ，会导致安全问题</div><div class="line">    add_header Access-Control-Allow-Origin *;</div><div class="line">    add_header Access-Control-Allow-Headers X-Requested-With;</div><div class="line">    add_header Access-Control-Allow-Methods GET,POST,OPTIONS;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;SSH连接报错&quot;&gt;&lt;a href=&quot;#SSH连接报错&quot; class=&quot;headerlink&quot; title=&quot;SSH连接报错&quot;&gt;&lt;/a&gt;SSH连接报错&lt;/h2&gt;&lt;p&gt;SSH连接服务器，出现报错：&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
      <category term="技术杂项" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Docker下快速部署ownCloud</title>
    <link href="http://yoursite.com/2017/Docker-deploy-ownCloud.html"/>
    <id>http://yoursite.com/2017/Docker-deploy-ownCloud.html</id>
    <published>2017-09-15T09:23:27.000Z</published>
    <updated>2017-09-27T09:38:05.892Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>相信大家都用过网盘，比如国外有 <a href="https://www.google.com/drive/" target="_blank" rel="external"><strong>Google Drive</strong></a>、<a href="https://www.dropbox.com/" target="_blank" rel="external"><strong>Dropbx</strong></a>、<a href="https://onedrive.live.com/about/zh-cn/" target="_blank" rel="external"><strong>OneDrive</strong></a>等，国内有 <a href="https://pan.baidu.com/" target="_blank" rel="external"><strong>百度云盘</strong></a>、<a href="https://www.jianguoyun.com/" target="_blank" rel="external"><strong>坚果云</strong></a>等，这些都是公共网盘，由于公司业务需要，想架设公司自己用的私有网盘。</p><p>目前市面上，稳定、成熟的私有云存储方案有：</p><blockquote><p><a href="https://www.seafile.com/home/" target="_blank" rel="external"><strong>Seafile</strong></a>：国内团队开发的一个国际化开源云存储项目<br><a href="https://owncloud.org/" target="_blank" rel="external"><strong>ownCloud</strong></a>：开源专业的私有云存储项目</p></blockquote><p>另外，可以多去关注下 <a href="https://nextcloud.com/" target="_blank" rel="external"><strong>nextcloud</strong></a> 项目，据说 <code>ownCloud</code> 母公司破产后，原项目组的骨干出走并以 <code>ownCloud</code> 项目 <code>folk</code> 出新项目 <code>nextcloud</code> 继续开发。需要说明的是，<code>ownCloud</code> 母公司后来被一家德国公司收购了，<code>ownCloud</code> 项目还在继续开发。</p><p>这里主要介绍 <code>ownCloud</code> 的搭建。</p><a id="more"></a><h2 id="ownCloud介绍"><a href="#ownCloud介绍" class="headerlink" title="ownCloud介绍"></a>ownCloud介绍</h2><p><a href="https://owncloud.org/" target="_blank" rel="external"><strong>ownCloud</strong></a> 是开源的、免费的、专业的私有云存储解决方案，以 <code>AGPL</code> 许可发布，它能帮你快速地在服务器上架设一套专属的私有云文件同步网盘，可以像 <code>Dropbox</code> 那样实现文件跨平台同步、共享与团队协作等。</p><p>ownCloud 支持 Windows/Mac桌面端，IOS/Android手机端。基本可以替代在线网盘如百度网盘等。</p><h2 id="docker下安装ownCloud"><a href="#docker下安装ownCloud" class="headerlink" title="docker下安装ownCloud"></a>docker下安装ownCloud</h2><p>ownCloud项目的内核是使用PHP5编写的，环境基于LAMP，支持SQLite、MySQL、Oracle、PostgreSQL等数据库。<br>要是在服务器中，先搭建LAMP环境，再去安装ownCloud，调试环境会很麻烦，耗时也长。可以通过Docker来快速部署ownCloud。</p><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>服务器系统是：CentOS6.5，在此系统中安装docker，请参考前面的文章：<a href="http://www.hjqjk.com/2017/CentOS-6-5-install-docker.html" target="_blank" rel="external"><strong>CentOS 6.x 上搭建docker</strong></a></p><h3 id="拉取ownCloud官方镜像"><a href="#拉取ownCloud官方镜像" class="headerlink" title="拉取ownCloud官方镜像"></a>拉取ownCloud官方镜像</h3><p><a href="https://hub.docker.com/_/owncloud/" target="_blank" rel="external"><strong>ownCloud的官方docker镜像页面</strong></a><br>这个镜像，已经集成了 <code>Apache + PHP</code> 的环境。目前版本是：<code>10.0.1</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># docker pull owncloud</div></pre></td></tr></table></figure><p>需要用root用户拉取，否则会有警告：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Warning: failed to get default registry endpoint from daemon (Cannot connect to the Docker daemon. Is the docker daemon running on this host?). Using system default: https://index.docker.io/v1/</div><div class="line">Cannot connect to the Docker daemon. Is the docker daemon running on this host?</div></pre></td></tr></table></figure><h3 id="改用MySQL数据库"><a href="#改用MySQL数据库" class="headerlink" title="改用MySQL数据库"></a>改用MySQL数据库</h3><p><code>owncloud</code> 默认使用 <code>SQLite</code> 数据库，但对于更大的安装，官方建议选择另外一个不同的数据库，特别当使用桌面客户端同步文件时，不鼓励使用 <code>SQLite</code>。</p><p>拉取 <code>mysql</code> 官方docker镜像（目前最新是： <code>5.7.19</code> ）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># docker pull mysql</div></pre></td></tr></table></figure><p>启动 MySQL 容器，用作 owncloud 容器的数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># docker run --name my-mysql -e MYSQL_ROOT_PASSWORD=&quot;Dwwe+=32H&quot; -d mysql</div></pre></td></tr></table></figure><h3 id="启动-owncloud-容器"><a href="#启动-owncloud-容器" class="headerlink" title="启动 owncloud 容器"></a>启动 owncloud 容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># docker run --name owncloud -p 5679:80   -v /data/db/owncloud:/var/www/html/data --link my-mysql:mysql -d owncloud</div></pre></td></tr></table></figure><p><code>-p 5679:80</code> ：由于宿主机已开通80端口，为了避免冲突，将容器的80端口映射到宿主机的5679端口。<br><code>--link my-mysql:mysql</code> ：将 <code>owncloud容器(客户)</code> 链接到 <code>my-mysql容器(服务)</code>，链接别名：<code>mysql</code>。</p><h3 id="配置nginx反向代理"><a href="#配置nginx反向代理" class="headerlink" title="配置nginx反向代理"></a>配置nginx反向代理</h3><p>配置文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">upstream pan_server&#123;</div><div class="line">server127.0.0.1:5679;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server &#123;</div><div class="line">    listen   80;</div><div class="line">    server_name pan.xxx.com;</div><div class="line">    access_log /data/logs/nginx/pan.xxx.com.access.log;</div><div class="line">    error_log /data/logs/nginx/pan.xxx.com.error.log;</div><div class="line"></div><div class="line">    proxy_set_header X-Forwarded-For $remote_addr;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_set_header Host $host;</div><div class="line">        proxy_set_header X-Real-IP $remote_addr;</div><div class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">        add_header Cache-Control  &quot;no-cache&quot;;</div><div class="line">    </div><div class="line">        proxy_pass http://pan_server;</div><div class="line">        limit_rate 256m;</div><div class="line">        client_max_body_size 0;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>配好域名解析。</p><h3 id="安装owncloud"><a href="#安装owncloud" class="headerlink" title="安装owncloud"></a>安装owncloud</h3><p>在浏览器上访问 <code>pan.xxx.com</code>，进入 owncloud 安装步骤：</p><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-09-25-15063104057578.jpg" alt=""></p><p>MySQL数据库配置：</p><blockquote><p>数据库用户：root<br>数据库密码：Dwwe+=32H<br>数据库名：owncloud<br>数据库主机：mysql 或 my-mysql</p></blockquote><h3 id="docker-compose-方式安装"><a href="#docker-compose-方式安装" class="headerlink" title="docker-compose 方式安装"></a>docker-compose 方式安装</h3><p>也可以将上面启动 owncloud 和 mysql 容器的两个步骤合成一步完成，这里介绍 <code>docker-compose</code> 的使用。</p><h4 id="docker版本要求"><a href="#docker版本要求" class="headerlink" title="docker版本要求"></a>docker版本要求</h4><p>想要用 <code>docker-compose</code>，docker版本必须大于等于 <code>1.10.0</code>，否则会报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ERROR: The Docker Engine version is less than the minimum required by Compose. Your current project requires a Docker Engine of version 1.10.0 or greater.</div></pre></td></tr></table></figure><h4 id="docker-compose-安装"><a href="#docker-compose-安装" class="headerlink" title="docker-compose 安装"></a>docker-compose 安装</h4><p>compose 可以通过 Python 的 pip 工具进行安装，可以直接下载编辑好的二进制文件使用，甚至直接运行在 Docker 容器中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># pip install -U docker-compose</div></pre></td></tr></table></figure><h4 id="docker-compose-yml-文件编写"><a href="#docker-compose-yml-文件编写" class="headerlink" title="docker-compose.yml 文件编写"></a>docker-compose.yml 文件编写</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="attr">version:</span> <span class="string">'2'</span></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  owncloud:</span></div><div class="line"><span class="attr">    image:</span> <span class="string">owncloud</span></div><div class="line"><span class="attr">    links:</span> </div><div class="line"><span class="attr">      - mysql:</span><span class="string">mysql</span></div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"/data/db/owncloud:/var/www/html/data"</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">      -</span> <span class="number">5679</span><span class="string">:80</span></div><div class="line"><span class="attr">  mysql:</span></div><div class="line"><span class="attr">    image:</span> <span class="string">mysql</span></div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"/data/db/mysql:/var/lib/mysql"</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">      -</span> <span class="number">3306</span><span class="string">:3306</span></div><div class="line"><span class="attr">    environment:</span></div><div class="line"><span class="attr">      MYSQL_ROOT_PASSWORD:</span> <span class="string">"Dwwe+=32H"</span></div><div class="line"><span class="attr">      MYSQL_DATABASE:</span> <span class="string">ownCloud</span></div></pre></td></tr></table></figure><h4 id="docker-compose-运行和停止"><a href="#docker-compose-运行和停止" class="headerlink" title="docker-compose 运行和停止"></a>docker-compose 运行和停止</h4><p>注意：<code>docker-compose</code> 必须在 <code>docker-compose.yml</code> 文件所在目录中执行，否则会报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ERROR:</div><div class="line">    Can&apos;t find a suitable configuration file in this directory or any</div><div class="line">    parent. Are you in the right directory?</div><div class="line"></div><div class="line">    Supported filenames: docker-compose.yml, docker-compose.yaml</div></pre></td></tr></table></figure><p>docker-compose 后台启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># docker-compose up -d</div></pre></td></tr></table></figure><p>docker-compose 查看状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># docker-compose ps</div></pre></td></tr></table></figure><p>docker-compose 停止和删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># docker-compose stop</div><div class="line"># dcoker-compose rm</div><div class="line"></div><div class="line">相当上面两条命令</div><div class="line"># dcoker-compose down</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h2&gt;&lt;p&gt;相信大家都用过网盘，比如国外有 &lt;a href=&quot;https://www.google.com/drive/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Google Drive&lt;/strong&gt;&lt;/a&gt;、&lt;a href=&quot;https://www.dropbox.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Dropbx&lt;/strong&gt;&lt;/a&gt;、&lt;a href=&quot;https://onedrive.live.com/about/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;OneDrive&lt;/strong&gt;&lt;/a&gt;等，国内有 &lt;a href=&quot;https://pan.baidu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;百度云盘&lt;/strong&gt;&lt;/a&gt;、&lt;a href=&quot;https://www.jianguoyun.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;坚果云&lt;/strong&gt;&lt;/a&gt;等，这些都是公共网盘，由于公司业务需要，想架设公司自己用的私有网盘。&lt;/p&gt;
&lt;p&gt;目前市面上，稳定、成熟的私有云存储方案有：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.seafile.com/home/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Seafile&lt;/strong&gt;&lt;/a&gt;：国内团队开发的一个国际化开源云存储项目&lt;br&gt;&lt;a href=&quot;https://owncloud.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;ownCloud&lt;/strong&gt;&lt;/a&gt;：开源专业的私有云存储项目&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外，可以多去关注下 &lt;a href=&quot;https://nextcloud.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;nextcloud&lt;/strong&gt;&lt;/a&gt; 项目，据说 &lt;code&gt;ownCloud&lt;/code&gt; 母公司破产后，原项目组的骨干出走并以 &lt;code&gt;ownCloud&lt;/code&gt; 项目 &lt;code&gt;folk&lt;/code&gt; 出新项目 &lt;code&gt;nextcloud&lt;/code&gt; 继续开发。需要说明的是，&lt;code&gt;ownCloud&lt;/code&gt; 母公司后来被一家德国公司收购了，&lt;code&gt;ownCloud&lt;/code&gt; 项目还在继续开发。&lt;/p&gt;
&lt;p&gt;这里主要介绍 &lt;code&gt;ownCloud&lt;/code&gt; 的搭建。&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="ownCloud" scheme="http://yoursite.com/tags/ownCloud/"/>
    
  </entry>
  
  <entry>
    <title>ELK搭建过程</title>
    <link href="http://yoursite.com/2017/ELK-install.html"/>
    <id>http://yoursite.com/2017/ELK-install.html</id>
    <published>2017-09-12T10:27:10.000Z</published>
    <updated>2018-03-01T07:52:02.887Z</updated>
    
    <content type="html"><![CDATA[<h2 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h2><p>ELK不是一款软件，而是 <code>Elasticsearch + Logstash + kibana</code> 三款开源软件组合而成的日志收集处理套件，堪称神器。其中 <code>Logstash</code> 负责日志收集，<code>elasticsearch</code> 负责日志的搜索、统计，而 <code>kibana</code> 则是ES的展示神器，前端炫丽，点几下鼠标简单配置，就可以完成搜索、聚合功能，生成华丽的报表。</p><a id="more"></a><h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><p>开源地址：<a href="https://github.com/elastic/elasticsearch" target="_blank" rel="external">https://github.com/elastic/elasticsearch</a></p><p>Elasticsearch 是一个分布式的搜索和分析引擎，可以用于全文检索、结构化检索和分析，并能将这三者结合起来。Elasticsearch 基于 Lucene 开发，现在是使用最广的开源搜索引擎之一，Wikipedia、Stack Overflow、GitHub 等都基于 Elasticsearch 来构建他们的搜索引擎。</p><h3 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h3><p>现在收集处理框架非常多，像 FaceBook 出品的 scribe ，Apache 基金会的 flume，Logstash 也是一个非常出名的日志框架，使用jruby开发，可以运行在jvm之上实现跨平台。</p><p>Logstash可以方便的把分散的、多样化的日志搜集起来，并进行内容、格式处理，然后传输到指定的存储介质。</p><p>Logstash使用管道方式进行日志的搜集处理和输出。在Logstash中，包括了三个阶段: <code>输入input –&gt; 处理filter（非必须）–&gt; 输出output</code> ，其中每个阶段都提供了丰富的插件供使用，非常方便。</p><ul><li>输入阶段支持多种数据获取机制，通过TCP、UDP、HTTP协议、文件、syslog、UNIX socket、rabbitmq、kafka、redis、github、STDIN等。</li><li>处理阶段可对数据进行聚合、统计、复制、排序、修改、删除等操作，提供特征数据处理插件（日期格式化、dns反向查找、根据ip获取详细信息、urldecode等）,以及对csv、xml、kv、json等数据格式解析处理插件。</li><li>输出阶段能对接多种存储介质，如 mysql、mongodb、redis、kakfa、rabbitmq、HDFS、s3、lucene、solr、ElasticSearch、csv、email、file、http、tcp、udp、websocket、syslog、stdout等。​​​​</li></ul><h3 id="kibana"><a href="#kibana" class="headerlink" title="kibana"></a>kibana</h3><p>Kibana 是一个开源的分析与可视化平台，设计出来用于和 Elasticsearch 一起使用的。你可以用 kibana 搜索、查看、交互存放在 Elasticsearch 索引里的数据，使用各种不同的图表、表格、地图等，Kibana 能够很轻易地展示高级数据分析与可视化。</p><p>Kibana 让我们理解大量数据变得很容易。它简单、基于浏览器的接口使你能快速创建和分享实时展现 Elasticsearch 查询变化的动态仪表盘。安装Kibana非常快，你可以在几分钟之内安装和开始探索你的 Elasticsearch 索引数据，不需要写任何代码，没有其他基础软件依赖。</p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>系统版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">centos-6.5</div></pre></td></tr></table></figure><p>软件版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">elasticsearch-5.2.2</div><div class="line">logstash-5.2.2</div><div class="line">kibana-5.2.2</div><div class="line">jdk : 1.8.0</div></pre></td></tr></table></figure><p>主机环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">主机1（192.168.10.197）：安装 jdk、logstash agent </div><div class="line">主机2（192.168.10.198）:  安装 jdk、redis 、logstash  index、elasticsearch、kibana</div></pre></td></tr></table></figure><!--more--><h2 id="安装-jdk1-8-0-（197-主机、198-主机）"><a href="#安装-jdk1-8-0-（197-主机、198-主机）" class="headerlink" title="安装 jdk1.8.0 （197 主机、198 主机）"></a>安装 jdk1.8.0 （197 主机、198 主机）</h2><p>验证服务器已经安装的java版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># rpm -qa | grep java</div></pre></td></tr></table></figure><p>如果有老旧的java版本，可选择删掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># rpm -e --nodeps [相关软件名]</div></pre></td></tr></table></figure><p>下载并安装 jdk1.8.0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># wget --no-cookies --no-check-certificate --header &quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot; &quot;https://edelivery.oracle.com/otn-pub/java/jdk/8u121-b13/e9e7ea248e2c4826b92b3f075a80e441/jdk-8u121-linux-x64.rpm&quot;</div><div class="line"># rpm -ivh jdk-8u121-linux-x64.rpm</div></pre></td></tr></table></figure><p>验证版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># java -version</div></pre></td></tr></table></figure><p>设置环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># vim ~/.bash_profile  # 添加以下内容</div><div class="line">#set java environment</div><div class="line">JAVA_HOME=/usr/java/jdk1.8.0_121/</div><div class="line">JAVA_BIN=/usr/java/jdk1.8.0_121//bin</div><div class="line">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</div><div class="line">PATH=$JAVA_BIN:$PATH</div><div class="line">export PATH JAVA_HOME CLASSPATH</div></pre></td></tr></table></figure><p>手动加载生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># source ~/.bash_profile</div></pre></td></tr></table></figure><h2 id="安装-redis（198-主机）"><a href="#安装-redis（198-主机）" class="headerlink" title="安装 redis（198 主机）"></a>安装 redis（198 主机）</h2><p>下载并安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/src</div><div class="line"># wget http://download.redis.io/releases/redis-3.2.8.tar.gz</div><div class="line"># tar zxvf redis-3.2.8.tar.gz</div><div class="line"># cd redis-3.2.8</div><div class="line"># make &amp;&amp; make install</div></pre></td></tr></table></figure><p>另外创建redis的配置、日志、数据等目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># mkdir /usr/local/redis/&#123;bin,etc,logs,db&#125; -p</div><div class="line"># cp redis-3.2.8/redis.conf /usr/local/redis/etc/</div><div class="line"># cp redis-3.2.8/src/&#123;redis-benchmark,redis-check-aof,redis-cli,redis-server,mkreleasehdr.sh&#125; /usr/local/redis/bin/</div></pre></td></tr></table></figure><p>修改redis配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># vim /usr/local/redis/etc/redis.conf</div><div class="line">pidfile /usr/local/redis/logs/redis_6379.pid</div><div class="line">logfile /usr/local/redis/logs/redis.log</div><div class="line">dir /usr/local/redis/db/</div><div class="line">#bind 127.0.0.1  #注释这行</div></pre></td></tr></table></figure><p>启动redis服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># /usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf &amp;</div></pre></td></tr></table></figure><p>开启防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># iptables -A INPUT -s 192.168.10.0/24 -m tcp -p tcp --dport 6379 -j ACCEPT</div><div class="line"># iptables-save &gt; /etc/sysconfig/iptables</div></pre></td></tr></table></figure><h2 id="安装-Logstash-（197-主机，logstash-agent-采集日志）"><a href="#安装-Logstash-（197-主机，logstash-agent-采集日志）" class="headerlink" title="安装 Logstash （197 主机，logstash agent 采集日志）"></a>安装 Logstash （197 主机，logstash agent 采集日志）</h2><p>下载并安装：(只要将安装包解压到指定目录就行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># wget https://artifacts.elastic.co/downloads/logstash/logstash-5.2.2.tar.gz</div><div class="line"># tar zxvf logstash-5.2.2.tar.gz -C /usr/local</div></pre></td></tr></table></figure><p>创建配置目录conf，并编辑配置文件：(将采集的日志传送到198主机上的redis队列上)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># mkdir /usr/local/logstash-5.2.2/conf</div><div class="line"># cat /usr/local/logstash-5.2.2/conf/logstash_agent.conf</div><div class="line">input&#123;</div><div class="line">file&#123;</div><div class="line">type=&gt;&quot;msg&quot;</div><div class="line">path=&gt;[&quot;/var/log/messages&quot;]</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">output&#123;</div><div class="line">redis&#123;</div><div class="line">host=&gt;[&quot;192.168.10.198&quot;]</div><div class="line">port=&gt;&quot;6379&quot;</div><div class="line">data_type=&gt;&quot;list&quot;</div><div class="line">key=&gt;&quot;logstash&quot;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>创建logstash日志目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># mkdir /usr/local/ogstash-5.2.2/logs</div></pre></td></tr></table></figure><p>启动服务，将日志写到指定的日志文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/logstash-5.2.2</div><div class="line"># ./bin/logstash -f conf/logstash_agent.conf  -l logs &amp;</div></pre></td></tr></table></figure><h2 id="安装-Logstash-（198-主机，logstash-indexer）"><a href="#安装-Logstash-（198-主机，logstash-indexer）" class="headerlink" title="安装 Logstash （198 主机，logstash indexer）"></a>安装 Logstash （198 主机，logstash indexer）</h2><p>下载并安装：(只要将安装包解压到指定目录就行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># wget https://artifacts.elastic.co/downloads/logstash/logstash-5.2.2.tar.gz</div><div class="line"># tar zxvf logstash-5.2.2.tar.gz -C /usr/local</div></pre></td></tr></table></figure><p>创建配置目录conf，并编辑配置文件：( 从redis提取日志队列传到elasticsearch )</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># mkdir /usr/local/logstash-5.2.2/conf</div><div class="line"># cat /usr/local/logstash-5.2.2/conf/logstash_indexer.conf</div><div class="line">input &#123;</div><div class="line">  redis &#123;</div><div class="line">    host =&gt;[&quot;192.168.10.198&quot;]</div><div class="line">    port =&gt; &quot;6379&quot;</div><div class="line">    data_type =&gt; &quot;list&quot;</div><div class="line">    key =&gt; &quot;logstash&quot;</div><div class="line">    type =&gt;&quot;msg&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">output &#123;</div><div class="line">  elasticsearch &#123;</div><div class="line">    hosts =&gt; &quot;192.168.10.198:9200&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>创建logstash日志目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># mkdir /usr/local/ogstash-5.2.2/logs</div></pre></td></tr></table></figure><p>启动服务，将日志写到指定的日志文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/logstash-5.2.2</div><div class="line"># ./bin/logstash -f conf/logstash_indexer.conf  -l logs &amp;</div></pre></td></tr></table></figure><h2 id="安装-elasticsearch-（198主机）"><a href="#安装-elasticsearch-（198主机）" class="headerlink" title="安装 elasticsearch （198主机）"></a>安装 elasticsearch （198主机）</h2><p>下载并安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.2.2.tar.gz</div><div class="line"># tar zxvf elasticsearch-5.2.2.tar.gz -C /usr/local/</div></pre></td></tr></table></figure><p>修改配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/elasticsearch-5.2.2/</div><div class="line"># vim config/elasticsearch.yml  </div><div class="line">cluster.name: chw</div><div class="line">node.name: chw_rpc</div><div class="line">node.master: true</div><div class="line">node.data: true</div><div class="line">network.host: 192.168.10.198</div><div class="line">path.data: /home/data/elasticsearch/data</div><div class="line">path.logs: /home/data/elasticsearch/logs</div></pre></td></tr></table></figure><p>创建目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /home/data/elasticsearch/&#123;data,logs&#125; -p</div></pre></td></tr></table></figure><p>Elasticsearch不允许以root用户启动，否则会报错：can not run elasticsearch as root。需要创建普通用户，并切换到普通用户启动。<br>注意，elasticsearch-5.2.2目录的属主和属组也要修改，否则会报权限错误。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># groupadd elasticsearch</div><div class="line"># useradd elasticsearch -g elasticsearch</div><div class="line"># chown elasticsearch.elasticsearch /usr/local/elasticsearch-5.2.2/ -R</div><div class="line"># chown elasticsearch.elasticsearch /home/data/elasticsearch/ -R</div></pre></td></tr></table></figure><p>打开tcp端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># iptables -A INPUT -s 192.168.10.0/24 -m tcp -p tcp --dport 9200-j ACCEPT</div><div class="line"># iptables-save &gt; /etc/sysconfig/iptables</div></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># su elasticsearch</div><div class="line">$ ./bin/elasticsearch -d</div></pre></td></tr></table></figure><p>验证是否成功：(返回的状态码为200，则表示成功了)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># curl -X GET http://192.168.10.198:9200</div></pre></td></tr></table></figure><h3 id="相关报错及其解决方法"><a href="#相关报错及其解决方法" class="headerlink" title="相关报错及其解决方法"></a>相关报错及其解决方法</h3><p>（1）、报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ERROR: bootstrap checks failed</div><div class="line">system call filters failed to install; check the logs and fix your configuration or disable system call filters at your own risk</div></pre></td></tr></table></figure><p>原因和解决：<br>   这是在因为Centos6不支持SecComp，而ES5.2.0默认bootstrap.system_call_filter为true进行检测，所以导致检测失败，失败后直接导致ES不能启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 修改 elasticsearch.yml </div><div class="line">bootstrap.memory_lock: false</div><div class="line">bootstrap.system_call_filter: false</div></pre></td></tr></table></figure><p>（2）、报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node settings must not contain any index level settings</div></pre></td></tr></table></figure><p>原因和解决：<br>   在5.0+的版本中，所有index配置（例如 index.mapper.dynamic）都不能再配置文件中写定，需要在ES启动之后通过接口来改。<br>   删除elasticsearch.yml 中，index.* 开头的所有配置项。</p><p>（3）、报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">max virtual memory areas  vm.max_map_count [65530] is too low, increase to at least [262144]</div></pre></td></tr></table></figure><p>解决：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># vim /etc/sysctl.conf # 修改系统配置</div><div class="line">vm.max_map_count=262144</div><div class="line"># sysctl -p  # 使其生效</div></pre></td></tr></table></figure><p>（4）、报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">max number of threads [1024] for user [elsearch] likely too low, increase to at least [2048]</div></pre></td></tr></table></figure><p>解决：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># vim /etc/security/limits.conf  #修改为以下配置</div><div class="line">* soft nproc 2048</div><div class="line">* hard nproc 4096</div><div class="line"># vim  /etc/security/limits.d/90-nproc.conf   #修改为以下配置</div><div class="line">* soft nproc 2048</div></pre></td></tr></table></figure><h2 id="为-Elasticsearch5-2-2-安装head插件-（198-主机）"><a href="#为-Elasticsearch5-2-2-安装head插件-（198-主机）" class="headerlink" title="为 Elasticsearch5.2.2 安装head插件 （198 主机）"></a>为 Elasticsearch5.2.2 安装head插件 （198 主机）</h2><p>下载地址：<a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="external">https://github.com/mobz/elasticsearch-head</a><br>自从Elasticsearch5.0开始就不再支持site plugins，需要将Elasticsearch-head以独立服务的形式安装使用。</p><p>首先安装nodejs和npm：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># yum install nodejs npm -y</div><div class="line"># yum install git -y</div></pre></td></tr></table></figure><p>注意：5.0+版本，elasticsearch-head 不能放在elasticsearch的 plugins、modules 目录下，否则启动会报错： Property [elasticsearch.version] is missing for plugin [head]</p><p>将elasticsearch-head放到 /usr/local/src 目录并安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/src/ </div><div class="line"># git clone git://github.com/mobz/elasticsearch-head.git</div><div class="line"># cd elasticsearch-head/</div><div class="line"># npm install</div></pre></td></tr></table></figure><p>elasticsearch配置允许跨域访问，这样head插件可以访问es：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># vim elasticsearch-5.2.2/config/elasticsearch.yml  # 添加如下两行代码（&quot;:&quot; 后边要有个空格）</div><div class="line">http.cors.enabled: true</div><div class="line">http.cors.allow-origin: &quot;*&quot;</div><div class="line"># 重启elasticsearch服务，使其配置生效。</div></pre></td></tr></table></figure><h3 id="修改head源码"><a href="#修改head源码" class="headerlink" title="修改head源码"></a>修改head源码</h3><p>   由于head的代码还是老版本的，直接执行有很多限制，比如无法跨机器访问。因此需要用户修改两个地方：<br>1）修改服务器监听地址:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># vim elasticsearch-head/Gruntfile.js  # 增加hostname属性，设置为*</div><div class="line">connect: &#123;</div><div class="line">    server: &#123;</div><div class="line">        options: &#123;</div><div class="line">            port: 9100,</div><div class="line">            hostname: &apos;*&apos;,   </div><div class="line">            base: &apos;.&apos;,</div><div class="line">            keepalive: true</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>2）修改连接es服务的地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># vim elasticsearch-head/_site/app.js  # 修改为es的服务器IP</div><div class="line">this.base_uri = this.config.base_uri || this.prefs.get(&quot;app-base_uri&quot;) || &quot;http://192.168.10.198:9200&quot;;</div></pre></td></tr></table></figure><p>启动head服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd /usr/local/src/elasticsearch-head </div><div class="line">$ ./node_modules/grunt/bin/grunt server &amp;</div></pre></td></tr></table></figure><p>验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># curl -I http://localhost:9100</div></pre></td></tr></table></figure><h2 id="安装-kibana-（198主机）"><a href="#安装-kibana-（198主机）" class="headerlink" title="安装 kibana （198主机）"></a>安装 kibana （198主机）</h2><p>下载并安装：(kibana安装很简单，解压到对应目录就行了)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># wget https://artifacts.elastic.co/downloads/kibana/kibana-5.2.2-linux-x86_64.tar.gz</div><div class="line"># tar zxvf kibana-5.2.2-linux-x86_64.tar.gz  -C /usr/local/</div><div class="line"># mv /usr/local/kibana-5.2.2-linux-x86_64/ /usr/local/kibana-5.2.2</div></pre></td></tr></table></figure><p>修改默认配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/kibana-5.2.2/config/</div><div class="line"># vim kibana.yml  # 改为以下配置</div><div class="line">elasticsearch_url: &quot;http://192.168.10.198:9200&quot;</div><div class="line">server.host: &quot;192.168.10.198&quot;</div></pre></td></tr></table></figure><p>启动服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/kibana-5.2.2/</div><div class="line"># ./bin/kibana &amp;</div></pre></td></tr></table></figure><p>验证：（返回200响应码，则成功）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># curl -I http://192.168.10.198:5601</div></pre></td></tr></table></figure><p>为了提供外网访问，利用Nginx做反向代理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">upstream kibana&#123;</div><div class="line">    server 192.168.10.198:5601 fail_timeout=0;</div><div class="line">&#125;</div><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name elk.xxx.com;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://kibana;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;软件介绍&quot;&gt;&lt;a href=&quot;#软件介绍&quot; class=&quot;headerlink&quot; title=&quot;软件介绍&quot;&gt;&lt;/a&gt;软件介绍&lt;/h2&gt;&lt;p&gt;ELK不是一款软件，而是 &lt;code&gt;Elasticsearch + Logstash + kibana&lt;/code&gt; 三款开源软件组合而成的日志收集处理套件，堪称神器。其中 &lt;code&gt;Logstash&lt;/code&gt; 负责日志收集，&lt;code&gt;elasticsearch&lt;/code&gt; 负责日志的搜索、统计，而 &lt;code&gt;kibana&lt;/code&gt; 则是ES的展示神器，前端炫丽，点几下鼠标简单配置，就可以完成搜索、聚合功能，生成华丽的报表。&lt;/p&gt;
    
    </summary>
    
      <category term="技术杂项" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="elk" scheme="http://yoursite.com/tags/elk/"/>
    
      <category term="elasticsearch" scheme="http://yoursite.com/tags/elasticsearch/"/>
    
      <category term="logstash" scheme="http://yoursite.com/tags/logstash/"/>
    
      <category term="kibana" scheme="http://yoursite.com/tags/kibana/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 6.5安装NodeJS</title>
    <link href="http://yoursite.com/2017/CentOS-6-5-install-NodeJS.html"/>
    <id>http://yoursite.com/2017/CentOS-6-5-install-NodeJS.html</id>
    <published>2017-09-05T08:14:18.000Z</published>
    <updated>2017-09-06T02:54:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>NodeJS 需要 <code>gcc4.8+</code> 版本（ <code>gcc 4.8</code> 开始全面支持 <code>C 11</code> 和 <code>C++ 11</code> 的新特性）的支持。然而 CentOS6.5 系统默认版本是 <code>4.4.7</code> ，需要升级 gcc 版本，否则在编译 NodeJS 时，会出现如下警告：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WARNING: C++ compiler too old, need g++ 4.8 or clang++ 3.4 (CXX=g++)</div></pre></td></tr></table></figure><a id="more"></a><h2 id="升级-gcc-版本"><a href="#升级-gcc-版本" class="headerlink" title="升级 gcc 版本"></a>升级 gcc 版本</h2><p>查看gcc版本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># gcc -v </div><div class="line">使用内建 specs。</div><div class="line">目标：x86_64-redhat-linux</div><div class="line">配置为：../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-languages=c,c++,objc,obj-c++,java,fortran,ada --enable-java-awt=gtk --disable-dssi --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-1.5.0.0/jre --enable-libgcj-multifile --enable-java-maintainer-mode --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --disable-libjava-multilib --with-ppl --with-cloog --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux</div><div class="line">线程模型：posix</div><div class="line">gcc 版本 4.4.7 20120313 (Red Hat 4.4.7-17) (GCC)</div></pre></td></tr></table></figure><p>CentOS6.5 的系统源提供的 gcc 最新版本是 <code>4.4.7</code>，不能通过 <code>yum</code> 来更新 gcc，这里用编译安装。<br><a href="https://ftp.gnu.org/gnu/gcc/" target="_blank" rel="external"><strong>gcc下载点</strong></a> 有所有的 gcc 版本下载，最新版本是 <code>7.2.0</code>。</p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">安装C和C++的静态库</div><div class="line"># yum install libgcc.i686 glibc-devel.i686</div><div class="line"></div><div class="line">安装旧版本的gcc、c++编辑器</div><div class="line"># yum install gcc gcc-c++ </div><div class="line"></div><div class="line"># yum install texinfo-tex flex zip</div></pre></td></tr></table></figure><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><p>下载解压安装包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/src</div><div class="line"># wget https://ftp.gnu.org/gnu/gcc/gcc-4.8.2/gcc-4.8.2.tar.gz</div><div class="line"># tar zxvf gcc-4.8.2.tar.gz</div></pre></td></tr></table></figure><p>官方推荐，用 <code>download_prerequisites</code> 脚本下载编译必备的一些依赖包（如gmp、mpfr、mpc、cloog、isl等依赖库），自动解压当前目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># cd gcc-4.8.2</div><div class="line"># ./contrib/download_prerequisites</div></pre></td></tr></table></figure><p>编译安装的路径是 <code>/usr/src/gcc-4.8.2/</code>，生成编译文件<code>Makefile</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># mkdir /usr/src/gcc-4.8.2</div><div class="line"># cd /usr/src/gcc-4.8.2/</div><div class="line"># /usr/local/src/gcc-4.8.2/configure --enable-checking=release --enable-languages=c,c++ --disable-multilib</div></pre></td></tr></table></figure><p>执行编译（ ORZ，这过程会很久，大概两小时吧，基本把CPU和内存占光）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># make</div></pre></td></tr></table></figure><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># make install</div></pre></td></tr></table></figure><h3 id="替换系统低版本gcc程序"><a href="#替换系统低版本gcc程序" class="headerlink" title="替换系统低版本gcc程序"></a>替换系统低版本gcc程序</h3><p>系统自带低版本 <code>gcc 4.4.7</code> 的文件位置是 <code>/usr/bin/gcc</code> 和 <code>/usr/bin/lib</code> ，这时需要将这些文件替换为最新安装的 gcc 文件，这里通过建立软链接替换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># mv /usr/bin/c++ /usr/bin/c++.bak</div><div class="line"># ln -s /usr/local/bin/c++ /usr/bin/c++</div><div class="line"># mv /usr/bin/g++ /usr/bin/g++.bak</div><div class="line"># ln -s /usr/local/bin/g++ /usr/bin/g++</div><div class="line"># mv /usr/bin/gcc /usr/bin/gcc.bak </div><div class="line"># ln -s /usr/local/bin/gcc /usr/bin/gcc</div></pre></td></tr></table></figure><p>查看gcc版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># gcc -v</div><div class="line">使用内建 specs。</div><div class="line">COLLECT_GCC=gcc</div><div class="line">COLLECT_LTO_WRAPPER=/usr/local/libexec/gcc/x86_64-unknown-linux-gnu/4.8.2/lto-wrapper</div><div class="line">目标：x86_64-unknown-linux-gnu</div><div class="line">配置为：/usr/local/src/gcc-4.8.2/configure --enable-checking=release --enable-languages=c,c++ --disable-multilib</div><div class="line">线程模型：posix</div><div class="line">gcc 版本 4.8.2 (GCC)</div></pre></td></tr></table></figure><h3 id="替换系统gcc动态链接库"><a href="#替换系统gcc动态链接库" class="headerlink" title="替换系统gcc动态链接库"></a>替换系统gcc动态链接库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># strings /usr/lib64/libstdc++.so.6 | grep GLIBC</div><div class="line">GLIBCXX_3.4</div><div class="line">GLIBCXX_3.4.1</div><div class="line">GLIBCXX_3.4.2</div><div class="line">GLIBCXX_3.4.3</div><div class="line">GLIBCXX_3.4.4</div><div class="line">GLIBCXX_3.4.5</div><div class="line">GLIBCXX_3.4.6</div><div class="line">GLIBCXX_3.4.7</div><div class="line">GLIBCXX_3.4.8</div><div class="line">GLIBCXX_3.4.9</div><div class="line">GLIBCXX_3.4.10</div><div class="line">GLIBCXX_3.4.11</div><div class="line">GLIBCXX_3.4.12</div><div class="line">GLIBCXX_3.4.13</div><div class="line">GLIBC_2.2.5</div><div class="line">GLIBC_2.3</div><div class="line">GLIBC_2.4</div><div class="line">GLIBC_2.3.2</div><div class="line">GLIBCXX_FORCE_NEW</div><div class="line">GLIBCXX_DEBUG_MESSAGE_LENGTH</div></pre></td></tr></table></figure><p>可看出，gcc的动态链接库还是处于旧版本，说明生成的动态库没有替换旧版本 gcc 的动态库。</p><p>新版的gcc动态链接库位置是 <code>/usr/local/lib64/libstdc++.so.6.0.18</code>，替换gcc的动态链接库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># cp /usr/local/lib64/libstdc++.so.6.0.18 /usr/lib64 </div><div class="line"># cd /usr/lib64/</div><div class="line"># rm -f ./libstdc++.so.6</div><div class="line"># ln -s libstdc++.so.6.0.18 libstdc++.so.6</div></pre></td></tr></table></figure><p>查看gcc动态链接库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"># strings /usr/lib64/libstdc++.so.6 | grep GLIBC</div><div class="line">GLIBCXX_3.4</div><div class="line">GLIBCXX_3.4.1</div><div class="line">GLIBCXX_3.4.2</div><div class="line">GLIBCXX_3.4.3</div><div class="line">GLIBCXX_3.4.4</div><div class="line">GLIBCXX_3.4.5</div><div class="line">GLIBCXX_3.4.6</div><div class="line">GLIBCXX_3.4.7</div><div class="line">GLIBCXX_3.4.8</div><div class="line">GLIBCXX_3.4.9</div><div class="line">GLIBCXX_3.4.10</div><div class="line">GLIBCXX_3.4.11</div><div class="line">GLIBCXX_3.4.12</div><div class="line">GLIBCXX_3.4.13</div><div class="line">GLIBCXX_3.4.14</div><div class="line">GLIBCXX_3.4.15</div><div class="line">GLIBCXX_3.4.16</div><div class="line">GLIBCXX_3.4.17</div><div class="line">GLIBCXX_3.4.18</div><div class="line">GLIBCXX_3.4.19</div><div class="line">GLIBC_2.3</div><div class="line">GLIBC_2.2.5</div><div class="line">GLIBC_2.14</div><div class="line">GLIBC_2.3.2</div><div class="line">GLIBCXX_FORCE_NEW</div><div class="line">GLIBCXX_DEBUG_MESSAGE_LENGTH</div></pre></td></tr></table></figure><p>结果表明，gcc动态链接库升级成功。</p><h2 id="编译安装-NodeJS"><a href="#编译安装-NodeJS" class="headerlink" title="编译安装 NodeJS"></a>编译安装 NodeJS</h2><h3 id="下载并解压"><a href="#下载并解压" class="headerlink" title="下载并解压"></a>下载并解压</h3><p>从 <a href="https://nodejs.org/dist/" target="_blank" rel="external"><strong>NodeJS官网</strong></a> 下载想要的版本，这里安装的版本是 <code>v7.10.0</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/src/</div><div class="line"># wget https://nodejs.org/dist/v7.10.0/node-v7.10.0.tar.gz</div><div class="line"># tar zxvf node-v7.10.0.tar.gz</div></pre></td></tr></table></figure><h3 id="编译安装-1"><a href="#编译安装-1" class="headerlink" title="编译安装"></a>编译安装</h3><p>安装路径 <code>/usr/local/node</code> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># cd node-v7.10.0</div><div class="line"># mkdir /usr/local/node</div><div class="line"># ./configure --prefix=/usr/local/node</div><div class="line"># make &amp;&amp; make install</div></pre></td></tr></table></figure><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>配置系统的环境变量，打开 <code>/etc/profile</code> ，加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NODE_HOME=/usr/local/node</div><div class="line">PATH=$NODE_HOME/bin:$PATH</div><div class="line">export NODE_HOME PATH</div></pre></td></tr></table></figure><p>手动加载生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># source /etc/profile</div></pre></td></tr></table></figure><h3 id="查看版本号"><a href="#查看版本号" class="headerlink" title="查看版本号"></a>查看版本号</h3><p>查看NodeJS的版本号，检查是否安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># node -v</div><div class="line">v7.10.0</div></pre></td></tr></table></figure><p>参考资料：<br><a href="https://www.fanhaobai.com/2016/12/upgrade-gcc.html" target="_blank" rel="external">CentOS6.5升级gcc-4.8</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NodeJS 需要 &lt;code&gt;gcc4.8+&lt;/code&gt; 版本（ &lt;code&gt;gcc 4.8&lt;/code&gt; 开始全面支持 &lt;code&gt;C 11&lt;/code&gt; 和 &lt;code&gt;C++ 11&lt;/code&gt; 的新特性）的支持。然而 CentOS6.5 系统默认版本是 &lt;code&gt;4.4.7&lt;/code&gt; ，需要升级 gcc 版本，否则在编译 NodeJS 时，会出现如下警告：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;WARNING: C++ compiler too old, need g++ 4.8 or clang++ 3.4 (CXX=g++)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术杂项" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
      <category term="gcc" scheme="http://yoursite.com/tags/gcc/"/>
    
  </entry>
  
  <entry>
    <title>Git仓库迁移</title>
    <link href="http://yoursite.com/2017/Git-repository-move.html"/>
    <id>http://yoursite.com/2017/Git-repository-move.html</id>
    <published>2017-09-04T09:18:25.000Z</published>
    <updated>2017-12-28T10:27:00.114Z</updated>
    
    <content type="html"><![CDATA[<p>在运维工作中，常遇到Git仓库迁移的问题，如合并多个Git服务器，更换Git托管商等。这篇文章主要记录Git仓库迁移的几种方案。</p><a id="more"></a><h3 id="单个库导入"><a href="#单个库导入" class="headerlink" title="单个库导入"></a>单个库导入</h3><p>迁移步骤：</p><ul><li>使用 <code>--mirror</code> 参数，从当前Git服务器 <code>clone</code> 仓库代码</li><li>在目标Git服务器新建一个同名的空仓库</li><li>使用 <code>--mirror</code> 参数，将代码 <code>push</code> 到目标Git服务器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">使用mirror参数，克隆裸仓库</div><div class="line"># git clone --mirror git@git.XXX.com:/git/test_api.git</div><div class="line"></div><div class="line">进入仓库目录</div><div class="line"># cd test_api.git</div><div class="line"></div><div class="line">使用mirror参数，再次push仓库代码到另外一个Git服务器</div><div class="line"># git push --no-verify --mirror git@git.NNN.com:/git/test_api.git</div></pre></td></tr></table></figure><p>最后一步，如果有如下报错，则表示，<code>git@git.NNN.com</code>服务器的 <code>/git/</code> 目录下没有 <code>test_api.git</code> 仓库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git@git.NNN.com&apos;s password:</div><div class="line">fatal: &apos;/git/test_api.git&apos; does not appear to be a git repository</div><div class="line">fatal: Could not read from remote repository.</div><div class="line"></div><div class="line">Please make sure you have the correct access rights and the repository exists.</div></pre></td></tr></table></figure><p>需要到 <code>git@git.NNN.com</code> 服务器上手动创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># cd /git/</div><div class="line"></div><div class="line">使用--bare参数，git就会创建一个裸仓库，裸仓库没有工作区。</div><div class="line">因为服务器上的Git仓库纯粹是为了共享，所以不能让用户直接登录到服务器改工作区，并且服务器上的Git仓库通常都以.git结尾</div><div class="line"># git init --bare test_api.git</div><div class="line"></div><div class="line">修改权限</div><div class="line"># chown -R git:git /git/test_api.git</div></pre></td></tr></table></figure><p>有三种clone的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># git clone &lt;repository&gt; &lt;directory&gt;</div><div class="line"># git clone --bare &lt;repository&gt; &lt;directory.git&gt;</div><div class="line"># git clone --mirror &lt;repository&gt; &lt;directory.git&gt;</div></pre></td></tr></table></figure><ul><li>方法1，指向的版本库创建一个克隆到目录。目录相当于克隆版本库的工作区，文件都会检出，版本库位于工作区下的 <code>.git</code> 目录中。</li><li>方法2和方法3创建的克隆版本库都不含工作区，直接就是版本库的内容，这样的版本库称为裸版本库。一般约定俗成裸版本库的目录名以.git为后缀。</li><li>方法3区别于方法2之处在于，方法3克隆出来的裸版本对上游版本库进行了注册，这样可以在裸版本库中使用 <code>git fetch</code> 命令和上游版本库进行持续同步。</li></ul><p>这种方法的缺点是，单个仓库迁移，麻烦而且效率很慢。</p><h3 id="GitLab同版本间进行数据迁移"><a href="#GitLab同版本间进行数据迁移" class="headerlink" title="GitLab同版本间进行数据迁移"></a>GitLab同版本间进行数据迁移</h3><p>Gitlab数据迁移需在同版本之间进行。因为不同版本的Gitlab之间，数据库的库表结构与程序的实现方式是有差异的。若需从<code>服务器A</code> 把Gitlab的数据迁移至 <code>服务器B</code>，则 <code>服务器B</code> 需部署与<code>服务器A</code> 同样版本的Gitlab才可。</p><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><p>这里的GitLab是 <code>omnibus</code> 安装包安装的，默认备份目录是 <code>/var/opt/gitlab/backups</code>。</p><p>备份命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gitlab-rake gitlab:backup:create</div></pre></td></tr></table></figure><p>该命令会在备份目录（默认：/var/opt/gitlab/backups/）下创建一个tar压缩包xxxxxxxx_gitlab_backup.tar，其中开头的xxxxxx是备份创建的时间戳，这个压缩包包括GitLab整个的完整部分。</p><h4 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h4><p>从源GitLab服务器的备份目录中，拷贝备份文件到目标GitLab服务器的备份目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/var/opt/gitlab/backups/1499244722_2017_07_05_9.2.6_gitlab_backup.tar</div></pre></td></tr></table></figure><p>停止 unicorn 和 sidekiq ，保证数据库没有新的连接，不会有写数据情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">停止相关数据连接服务</div><div class="line"># gitlab-ctl stop unicorn</div><div class="line"># gitlab-ctl stop sidekiq</div><div class="line"></div><div class="line">备份恢复，完成数据迁移</div><div class="line"># gitlab-rake gitlab:import:restore BACKUP=1499242399_2017_07_05_9.2.6</div><div class="line"></div><div class="line">重启GitLab服务</div><div class="line"># gitlab-ctl start</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在运维工作中，常遇到Git仓库迁移的问题，如合并多个Git服务器，更换Git托管商等。这篇文章主要记录Git仓库迁移的几种方案。&lt;/p&gt;
    
    </summary>
    
      <category term="版本控制" scheme="http://yoursite.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 6.x 上搭建docker</title>
    <link href="http://yoursite.com/2017/CentOS-6-5-install-docker.html"/>
    <id>http://yoursite.com/2017/CentOS-6-5-install-docker.html</id>
    <published>2017-08-31T09:09:28.000Z</published>
    <updated>2017-09-25T10:11:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.docker.com/" target="_blank" rel="external">Docker</a>是一个能够把开发应用程序自动部署到容器的开源引擎。它由Docker公司的团队编写，基于Apache 2.0开源协议授权。它提供了一个简单、轻量的建模方式，使开发生命周期更高效快速，鼓励了面向服务的架构设计。</p><a id="more"></a><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><h3 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h3><p>Docker 运行环境对内核要求比较高，一般建议直接在Ubuntu这样的平台上运行。但作为一个容器标准，Docker也支持其他如 CentOS，Mac OS X，Windows等其他平台。<br>目前Docker支持以下Red Hat和Red Hat系发行版：(不支持32位)</p><blockquote><p>(RHEL|CentOS) 6.5及以上版本（64位）<br>Fedora 19及以上版本（64位）</p></blockquote><p>在运行于这些系统时，需要 <code>内核版本 &gt;= 3.8</code> ，因为这些内核包含了运行Docker的一些特定修改。<br>查看内核版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># uname -r</div><div class="line">2.6.32-431.el6.x86_64</div></pre></td></tr></table></figure><p>注意：<code>3.8 &gt; 内核版本 &gt;= 2.6.32-431</code> 这些内核版本虽然也能支持Docker运行，但是支持得不好，仍会在运行时出现很多bug。推荐 <code>内核版本 &gt;= 3.8</code> 。</p><h3 id="检查Device-Mapper"><a href="#检查Device-Mapper" class="headerlink" title="检查Device Mapper"></a>检查Device Mapper</h3><p>Docker默认使用AUFS作为存储驱动，但是AUFS并没有被包括在Linux的主线内核中。CentOS中可以使用Device Mapper作为存储驱动，这是在2.6.9内核版本引入的新功能。<br>需要先确认是否启用该功能:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ls -l /sys/class/misc/device-mapper</span></div><div class="line">lrwxrwxrwx 1 root root 0 8月  31 17:33 /sys/class/misc/device-mapper -&gt; ../../devices/virtual/misc/device-mapper</div></pre></td></tr></table></figure><p>如果没有检测到Device Mapper，需要安装其软件包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum install device-mapper -y</div></pre></td></tr></table></figure><p>然后重新加载 <code>dm_mod</code> 内核模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># modprobe dm_mod</div></pre></td></tr></table></figure><h2 id="升级内核版本"><a href="#升级内核版本" class="headerlink" title="升级内核版本"></a>升级内核版本</h2><h3 id="查看当前内核版本"><a href="#查看当前内核版本" class="headerlink" title="查看当前内核版本"></a>查看当前内核版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># cat /etc/redhat-release</div><div class="line">CentOS release 6.5 (Final)</div><div class="line"># uname -r</div><div class="line">2.6.32-431.el6.x86_64</div></pre></td></tr></table></figure><p>CentOS 6.5 系统默认的内核版本是 <code>2.6.32-431.el6.x86_64</code>，不符合Docker的安装条件，需要升级内核版本。</p><h3 id="升级内核版本至3-10-0"><a href="#升级内核版本至3-10-0" class="headerlink" title="升级内核版本至3.10.0"></a>升级内核版本至3.10.0</h3><p>在yum的 <code>ELRepo</code> 源中,有 mainline（3.13.x）、long-term（3.10.x）这2个内核版本，考虑到long-term更稳定，会长期更新，所以选择这个版本。</p><p>导入 Public key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</div></pre></td></tr></table></figure><p>安装ELRepo源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># rpm -ivh http://www.elrepo.org/elrepo-release-6-8.el6.elrepo.noarch.rpm</div></pre></td></tr></table></figure><p>安装kernel-lt 或 kernel-ml（任选一个）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># kernel-lt，内核版本：3.10.x</span></div><div class="line"><span class="comment"># yum --enablerepo=elrepo-kernel install kernel-lt -y</span></div><div class="line"></div><div class="line"><span class="comment"># 或者kernel-ml，内核版本：3.13.x</span></div><div class="line"><span class="comment"># yum --enablerepo=elrepo-kernel install kernel-ml -y</span></div></pre></td></tr></table></figure><p>编辑 <code>grub.conf</code> 文件，修改 Grub 引导顺序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># cat /etc/grub.conf</div><div class="line">device (hd0) HD(1,800,64000,ab0fd74d-ecf9-42ff-8c69-0fa5d3af4fd2)</div><div class="line">default=1</div><div class="line">timeout=5</div><div class="line">splashimage=(hd0,1)/grub/splash.xpm.gz</div><div class="line">hiddenmenu</div><div class="line">title CentOS (3.10.107-1.el6.elrepo.x86_64)</div><div class="line">root (hd0,1)</div><div class="line">kernel /vmlinuz-3.10.107-1.el6.elrepo.x86_64 ro root=/dev/mapper/vg_localhost-lv_root rd_NO_LUKS rd_NO_MD rd_LVM_LV=vg_localhost/lv_swap crashkernel=128M LANG=zh_CN.UTF-8 rd_LVM_LV=vg_localhost/lv_root  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet</div><div class="line">initrd /initramfs-3.10.107-1.el6.elrepo.x86_64.img</div><div class="line">title CentOS (2.6.32-431.el6.x86_64)</div><div class="line">root (hd0,1)</div><div class="line">kernel /vmlinuz-2.6.32-431.el6.x86_64 ro root=/dev/mapper/vg_localhost-lv_root rd_NO_LUKS rd_NO_MD rd_LVM_LV=vg_localhost/lv_swap crashkernel=128M LANG=zh_CN.UTF-8 rd_LVM_LV=vg_localhost/lv_root  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet</div><div class="line">initrd /initramfs-2.6.32-431.el6.x86_64.img</div></pre></td></tr></table></figure><p>确认刚安装的内核在哪个位置，然后设置default值(从0开始)。一般新安装的内核会在第一个位置，所以设置 <code>default=0</code>。</p><p>重启服务器，查看内核版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># reboot</div><div class="line"></div><div class="line"># uname -r</div><div class="line">3.10.107-1.el6.elrepo.x86_64</div></pre></td></tr></table></figure><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>对于CentOS 6.5，Docker可以在 <code>EPEL</code>  源中找到，安装 <code>EPEL</code> 源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># rpm -Uvh http://www.gtlib.gatech.edu/pub/fedora-epel/6/i386/epel-release-6-8.noarch.rpm</div></pre></td></tr></table></figure><p>删除CentOS 6.5默认自带的Docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum remove docker -y</div></pre></td></tr></table></figure><p>安装docker-io的RPM包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum install docker-io -y</div></pre></td></tr></table></figure><p>查看Docker版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># docker version</div><div class="line">Client version: 1.7.1</div><div class="line">Client API version: 1.19</div><div class="line">Go version (client): go1.4.2</div><div class="line">Git commit (client): 786b29d/1.7.1</div><div class="line">OS/Arch (client): linux/amd64</div><div class="line">Server version: 1.7.1</div><div class="line">Server API version: 1.19</div><div class="line">Go version (server): go1.4.2</div><div class="line">Git commit (server): 786b29d/1.7.1</div><div class="line">OS/Arch (server): linux/amd64</div></pre></td></tr></table></figure><p>启动Docker服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># service docker start</div></pre></td></tr></table></figure><h2 id="CentOS6-5-中升级docker版本"><a href="#CentOS6-5-中升级docker版本" class="headerlink" title="CentOS6.5 中升级docker版本"></a>CentOS6.5 中升级docker版本</h2><p>CentOS6.5支持的docker最稳定版本就是 <code>1.7.1</code>，实在不适合升级更高的版本，强行升级的话，会很不稳定的，不建议在生产环境中升级。</p><p>具体参考：<a href="http://www.pangxie.space/docker/364" target="_blank" rel="external">Docker升级至1.9.1版本-centos6.5（测试用）</a></p><p>虽然网上能搜到很多升级的文章，但我在实际操作后发现，升级docker版本到 <code>1.9.1</code> 后，启动诸多容器都失败了，换回 <code>1.7.1</code> 后，一切正常。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker&lt;/a&gt;是一个能够把开发应用程序自动部署到容器的开源引擎。它由Docker公司的团队编写，基于Apache 2.0开源协议授权。它提供了一个简单、轻量的建模方式，使开发生命周期更高效快速，鼓励了面向服务的架构设计。&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 6.x 上安装Go</title>
    <link href="http://yoursite.com/2017/CentOS-6-x-install-Go.html"/>
    <id>http://yoursite.com/2017/CentOS-6-x-install-Go.html</id>
    <published>2017-08-30T09:52:14.000Z</published>
    <updated>2017-09-14T15:58:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Go 语言是由Google开发的一种静态强类型、编译型、并发型并具有垃圾回收功能的开源编程语言。<br>Go语言是基于Inferno操作系统所开发的。Go语言于2009年11月正式宣布推出，成为开放源代码项目，并在Linux及Mac OS X平台上进行了实现，后来追加了Windows系统下的实现。</p><blockquote><p><a href="https://golang.org/" target="_blank" rel="external">Go语言官网</a><br>目前最新版本：Go 1.9</p></blockquote><p>对于高性能分布式系统领域而言，Go 语言无疑比大多数其它语言有着更高的开发效率。它提供了海量并行的支持，这对于游戏服务端的开发而言是再好不过了。</p><a id="more"></a><h3 id="安装Go"><a href="#安装Go" class="headerlink" title="安装Go"></a>安装Go</h3><p>获取Go语言的二进制归档文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/src</div><div class="line"># wget https://storage.googleapis.com/golang/go1.7.3.linux-amd64.tar.gz</div></pre></td></tr></table></figure><p>解压安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># tar zxvf go1.7.3.linux-amd64.tar.gz -C /usr/local/</div></pre></td></tr></table></figure><h3 id="配置Go环境"><a href="#配置Go环境" class="headerlink" title="配置Go环境"></a>配置Go环境</h3><p>现在，你需要设置转到语言环境变量为您的项目。通常你需要设置3个环境变量 <code>GOROOT</code>，<code>GOPATH</code> 和 <code>PATH</code> 。</p><p><code>GOROOT</code> 是软件包安装在系统上的位置。<br><code>GOPATH</code> 是你的工作目录。 例如我的项目目录是 <code>~/Projects/Proj1</code> ，则 <code>GOPATH=$HOME/Projects/Proj1</code></p><p>在 <code>/etc/bashrc</code> 中加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GOROOT=/usr/local/go</div><div class="line">GOPATH=$HOME/Projects/Proj1   # 根据实际项目路径更改</div><div class="line">PATH=$GOPATH/bin:$GOROOT/bin:$PATH</div></pre></td></tr></table></figure><p>手动加载生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># source /etc/bashrc</div></pre></td></tr></table></figure><h3 id="验证安装是否成功"><a href="#验证安装是否成功" class="headerlink" title="验证安装是否成功"></a>验证安装是否成功</h3><p>检查Go版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># go version</div><div class="line">go version go1.7.3 linux/amd64</div></pre></td></tr></table></figure><p>验证所有环境变量是否配置正确</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># go env</div><div class="line">GOARCH=&quot;amd64&quot;</div><div class="line">GOBIN=&quot;&quot;</div><div class="line">GOEXE=&quot;&quot;</div><div class="line">GOHOSTARCH=&quot;amd64&quot;</div><div class="line">GOHOSTOS=&quot;linux&quot;</div><div class="line">GOOS=&quot;linux&quot;</div><div class="line">GOPATH=&quot;/root/Projects/Proj1&quot;</div><div class="line">GORACE=&quot;&quot;</div><div class="line">GOROOT=&quot;/usr/local/go&quot;</div><div class="line">GOTOOLDIR=&quot;/usr/local/go/pkg/tool/linux_amd64&quot;</div><div class="line">CC=&quot;gcc&quot;</div><div class="line">GOGCCFLAGS=&quot;-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build311841584=/tmp/go-build&quot;</div><div class="line">CXX=&quot;g++&quot;</div><div class="line">CGO_ENABLED=&quot;1&quot;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Go 语言是由Google开发的一种静态强类型、编译型、并发型并具有垃圾回收功能的开源编程语言。&lt;br&gt;Go语言是基于Inferno操作系统所开发的。Go语言于2009年11月正式宣布推出，成为开放源代码项目，并在Linux及Mac OS X平台上进行了实现，后来追加了Windows系统下的实现。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://golang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Go语言官网&lt;/a&gt;&lt;br&gt;目前最新版本：Go 1.9&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于高性能分布式系统领域而言，Go 语言无疑比大多数其它语言有着更高的开发效率。它提供了海量并行的支持，这对于游戏服务端的开发而言是再好不过了。&lt;/p&gt;
    
    </summary>
    
      <category term="技术杂项" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 6.x 安装JDK8</title>
    <link href="http://yoursite.com/2017/CentOS-6-x-install-JDK8.html"/>
    <id>http://yoursite.com/2017/CentOS-6-x-install-JDK8.html</id>
    <published>2017-08-30T08:00:46.000Z</published>
    <updated>2017-08-30T10:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS 6.x 系统默认安装了JDK7，可根据需要决定是否卸载JDK7。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># rpm -qa |grep jdk</div><div class="line">java-1.7.0-openjdk-devel-1.7.0.121-2.6.8.1.el6_8.x86_64</div><div class="line">java-1.7.0-openjdk-1.7.0.121-2.6.8.1.el6_8.x86_64</div></pre></td></tr></table></figure><a id="more"></a><h3 id="下载解压-JDK"><a href="#下载解压-JDK" class="headerlink" title="下载解压 JDK"></a>下载解压 JDK</h3><p>可以从其<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">官方下载页面</a>下载最新的Java SE Development Kit 8版本，或使用以下命令从shell下载。</p><p>对于64位系统：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># mkdir /usr/local/java</div><div class="line"># cd /usr/local/java</div><div class="line"># wget --no-cookies --no-check-certificate --header &quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot; &quot;http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-8u141-linux-x64.tar.gz&quot;</div><div class="line"># tar zxvf jdk-8u141-linux-x64.tar.gz</div></pre></td></tr></table></figure><p>对于32位系统：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># mkdir /usr/local/java</div><div class="line"># cd /usr/local/java</div><div class="line"># wget --no-cookies --no-check-certificate --header &quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot; &quot;http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-8u141-linux-i586.tar.gz&quot;</div><div class="line"># tar zxvf jdk-8u141-linux-i586.tar.gz</div></pre></td></tr></table></figure><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>绝大多数的Java应用，都是基于其环境变量来工作的，必须设置好。<br>在系统环境变量文件 <code>/etc/profile</code> 中添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">JAVA_HOME=/usr/local/java/jdk1.8.0_141</div><div class="line">JRE_HOME=/usr/local/java/jdk1.8.0_141/jre</div><div class="line">CLASSPATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</div><div class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</div><div class="line"></div><div class="line">export JAVA_HOME JRE_HOME CLASSPATH PATH</div></pre></td></tr></table></figure><p>手动加载生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># source /etc/profile</div></pre></td></tr></table></figure><h3 id="验证JDK版本"><a href="#验证JDK版本" class="headerlink" title="验证JDK版本"></a>验证JDK版本</h3><p>检查JDK版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># java -version</div><div class="line">java version &quot;1.8.0_141&quot;</div><div class="line">Java(TM) SE Runtime Environment (build 1.8.0_141-b15)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.141-b15, mixed mode)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CentOS 6.x 系统默认安装了JDK7，可根据需要决定是否卸载JDK7。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# rpm -qa |grep jdk&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;java-1.7.0-openjdk-devel-1.7.0.121-2.6.8.1.el6_8.x86_64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;java-1.7.0-openjdk-1.7.0.121-2.6.8.1.el6_8.x86_64&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
</feed>
