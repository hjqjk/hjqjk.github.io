<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hjqjk&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-02T07:38:32.689Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>hjqjk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python的伪造数据生成器:Faker</title>
    <link href="http://yoursite.com/2017/Python-moudle-Faker.html"/>
    <id>http://yoursite.com/2017/Python-moudle-Faker.html</id>
    <published>2017-11-01T07:31:19.000Z</published>
    <updated>2017-11-02T07:38:32.689Z</updated>
    
    <content type="html"><![CDATA[<p>我们在开发中常常需要利用一些假数据来做测试,这种时候就可以使用 <code>Faker</code> 来伪造数据从而用来测试.</p><p><a href="https://github.com/joke2k/faker" target="_blank" rel="external"><strong>Faker</strong></a> 是一个可以让你生成伪造数据的Python包。当你需要初始化数据库，创建美观的XML文档，不断产生数据来进行压力测试或者想从生产服务器上拉取匿名数据的时候，Faker将是你最棒的选择。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Faker库已经被提交到 <a href="https://pypi.python.org/pypi/Faker" target="_blank" rel="external"><strong>pip</strong></a>，可以通过 pip 工具直接安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># pip install Faker</div></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><a href="http://faker.readthedocs.io/en/master/" target="_blank" rel="external"><strong>官方文档</strong></a></p><p>faker 提供了一个工厂函数，用来创建数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> faker <span class="keyword">import</span> Factory</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake1 = Factory.create()</div></pre></td></tr></table></figure><p>当然，也提供一个Faker类来创建实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake2 = Faker()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake2.name()</div><div class="line"><span class="string">'Audrey Robinson'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake2.address()</div><div class="line"><span class="string">'4266 Fritz Shore\nLewischester, AL 24594-7593'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake2.text()</div><div class="line"><span class="string">'Odio porro unde sint aliquid beatae. Ex officiis porro nostrum laboriosam deleniti nisi. A aut molestiae ratione ipsam perspiciatis facere.\nDicta incidunt at deleniti recusandae accusamus quisquam.'</span></div></pre></td></tr></table></figure><p>每次调用方法 <code>fake.name()</code> 都会产生不同的（随机）结果。这是因为 faker 向 <code>faker.Generator.method_name()</code> 调用了 <code>faker.Generator.format(method_name)</code>。</p><h2 id="本地化"><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h2><p>在用 <code>Faker()</code> 创建 faker 实例时，可以为实例指定本地化区域参数，默认为 ‘en_US`，因此生成的姓名、地址等都是美国的。<br>要生成中文伪造数据，只需：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; fake = Faker(&quot;zh_CN&quot;)</div></pre></td></tr></table></figure><h2 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h2><p>如上面例子，每次调用 fake 实例的 <code>name()</code>方法时，都会产生不同随机姓名。fake 实例还有很多方法可用，这些方法分为以下几类：</p><ul><li>address 地址</li><li>person 人物类：性别、姓名等</li><li>barcode 条码类</li><li>color 颜色类</li><li>company 公司类：公司名、公司email、公司名前缀等</li><li>credit_card 银行卡类：卡号、有效期、类型等</li><li>currency  货币</li><li>date_time 时间日期类：日期、年、月等</li><li>file 文件类：文件名、文件类型、文件扩展名等</li><li>internet 互联网类</li><li>job 工作</li><li>lorem 乱数假文</li><li>misc 杂项类</li><li>phone_number 手机号码类：手机号、运营商号段</li><li>python python数据</li><li>profile 人物描述信息：姓名、性别、地址、公司等</li><li>ssn 社会安全码(身份证号码)</li><li>user_agent 用户代理</li></ul><h3 id="address-地址"><a href="#address-地址" class="headerlink" title="address 地址"></a>address 地址</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.country()  <span class="comment"># 国家</span></div><div class="line"><span class="string">'奥地利'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.city()  <span class="comment"># 城市</span></div><div class="line"><span class="string">'郑州市'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.city_suffix()  <span class="comment"># 城市的后缀,中文是：市或县</span></div><div class="line"><span class="string">'市'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.address()  <span class="comment"># 地址</span></div><div class="line"><span class="string">'河北省巢湖县怀柔南宁路f座 169812'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.street_address()  <span class="comment"># 街道</span></div><div class="line"><span class="string">'邯郸路W座'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.street_name()  <span class="comment"># 街道名</span></div><div class="line"><span class="string">'合肥路'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.postcode()  <span class="comment"># 邮编</span></div><div class="line"><span class="string">'314548'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.latitude()  <span class="comment"># 维度</span></div><div class="line">Decimal(<span class="string">'68.0228435'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.longitude()  <span class="comment"># 经度</span></div><div class="line">Decimal(<span class="string">'155.964341'</span>)</div></pre></td></tr></table></figure><h3 id="person-人物"><a href="#person-人物" class="headerlink" title="person 人物"></a>person 人物</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.name() <span class="comment"># 姓名</span></div><div class="line"><span class="string">'单玉珍'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.last_name() <span class="comment"># 姓</span></div><div class="line"><span class="string">'潘'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.first_name() <span class="comment"># 名</span></div><div class="line"><span class="string">'琴'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.name_male() <span class="comment"># 男性姓名</span></div><div class="line"><span class="string">'官平'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.last_name_male() <span class="comment"># 男性姓</span></div><div class="line"><span class="string">'安'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.first_name_male() <span class="comment"># 男性名</span></div><div class="line"><span class="string">'文'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.name_female() <span class="comment"># 女性姓名</span></div><div class="line"><span class="string">'许颖'</span></div></pre></td></tr></table></figure><h3 id="barcode-条码"><a href="#barcode-条码" class="headerlink" title="barcode 条码"></a>barcode 条码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.ean8()  <span class="comment"># 8位条码</span></div><div class="line"><span class="string">'12771363'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.ean13()  <span class="comment"># 13位条码</span></div><div class="line"><span class="string">'9133134950963'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.ean(length=<span class="number">8</span>)  <span class="comment"># 自定义位数条码,只能选8或者13</span></div><div class="line"><span class="string">'20417161'</span></div></pre></td></tr></table></figure><h3 id="color-颜色"><a href="#color-颜色" class="headerlink" title="color 颜色"></a>color 颜色</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.hex_color() <span class="comment"># 16进制表示的颜色</span></div><div class="line"><span class="string">'#671f6d'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.rgb_css_color() <span class="comment"># css用的rgb色</span></div><div class="line"><span class="string">'rgb(237,74,237)'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.rgb_color()  <span class="comment"># 表示rgb色的字符串</span></div><div class="line"><span class="string">'208,102,218'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.color_name() <span class="comment"># 颜色名字</span></div><div class="line"><span class="string">'Brown'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.safe_hex_color()  <span class="comment">#安全16进制色</span></div><div class="line"><span class="string">'#ee4400'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.safe_color_name() <span class="comment"># 安全颜色名字</span></div><div class="line"><span class="string">'maroon'</span></div></pre></td></tr></table></figure><h3 id="company-公司"><a href="#company-公司" class="headerlink" title="company 公司"></a>company 公司</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.company() <span class="comment"># 公司名</span></div><div class="line"><span class="string">'时空盒数字科技有限公司'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.company_suffix() <span class="comment"># 公司名后缀</span></div><div class="line"><span class="string">'科技有限公司'</span></div></pre></td></tr></table></figure><h3 id="credit-card-银行信用卡"><a href="#credit-card-银行信用卡" class="headerlink" title="credit_card 银行信用卡"></a>credit_card 银行信用卡</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.credit_card_number(card_type=<span class="keyword">None</span>) <span class="comment"># 卡号</span></div><div class="line"><span class="string">'375325478746231'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.credit_card_provider(card_type=<span class="keyword">None</span>) <span class="comment"># 卡的提供者</span></div><div class="line"><span class="string">'VISA 13 digit'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.credit_card_security_code(card_type=<span class="keyword">None</span>)<span class="comment"># 卡的安全密码</span></div><div class="line"><span class="string">'450'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.credit_card_expire() <span class="comment"># 卡的有效期</span></div><div class="line"><span class="string">'04/22'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.credit_card_full(card_type=<span class="keyword">None</span>) <span class="comment"># 完整卡信息</span></div><div class="line"><span class="string">'Maestro\n秀芳 商\n502001016117 04/27\nCVV: 144\n'</span></div></pre></td></tr></table></figure><h3 id="currency-货币"><a href="#currency-货币" class="headerlink" title="currency 货币"></a>currency 货币</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.currency_code()  <span class="comment"># 货币代码</span></div><div class="line"><span class="string">'HNL'</span></div></pre></td></tr></table></figure><h3 id="date-time-时间日期"><a href="#date-time-时间日期" class="headerlink" title="date_time 时间日期"></a>date_time 时间日期</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.date_time(tzinfo=<span class="keyword">None</span>) <span class="comment"># 随机日期时间</span></div><div class="line">datetime.datetime(<span class="number">2001</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">44</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.iso8601(tzinfo=<span class="keyword">None</span>) <span class="comment"># 以iso8601标准输出的日期</span></div><div class="line"><span class="string">'1973-11-16T22:58:37'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.date_time_this_month(before_now=<span class="keyword">True</span>, after_now=<span class="keyword">False</span>, tzinfo=<span class="keyword">None</span>) <span class="comment"># 本月的某个日期</span></div><div class="line">datetime.datetime(<span class="number">2017</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">33</span>, <span class="number">48</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.date_time_this_year(before_now=<span class="keyword">True</span>, after_now=<span class="keyword">False</span>, tzinfo=<span class="keyword">None</span>) <span class="comment"># 本年的某个日期</span></div><div class="line">datetime.datetime(<span class="number">2017</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">55</span>, <span class="number">31</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.date_time_this_decade(before_now=<span class="keyword">True</span>, after_now=<span class="keyword">False</span>, tzinfo=<span class="keyword">None</span>)  <span class="comment"># 本年代内的一个日期</span></div><div class="line">datetime.datetime(<span class="number">2010</span>, <span class="number">3</span>, <span class="number">26</span>, <span class="number">6</span>, <span class="number">33</span>, <span class="number">23</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.date_time_this_century(before_now=<span class="keyword">True</span>, after_now=<span class="keyword">False</span>, tzinfo=<span class="keyword">None</span>)  <span class="comment"># 本世纪一个日期</span></div><div class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">7</span>, <span class="number">21</span>, <span class="number">19</span>, <span class="number">27</span>, <span class="number">53</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.date_time_between(start_date=<span class="string">"-30y"</span>, end_date=<span class="string">"now"</span>, tzinfo=<span class="keyword">None</span>)  <span class="comment"># 两个时间间的一个随机时间</span></div><div class="line">datetime.datetime(<span class="number">2005</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">17</span>, <span class="number">17</span>, <span class="number">15</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.timezone() <span class="comment"># 时区</span></div><div class="line"><span class="string">'America/Guatemala'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.time(pattern=<span class="string">"%H:%M:%S"</span>) <span class="comment"># 时间（可自定义格式）</span></div><div class="line"><span class="string">'11:21:52'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.am_pm() <span class="comment"># 随机上午下午</span></div><div class="line"><span class="string">'PM'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.month() <span class="comment"># 随机月份</span></div><div class="line"><span class="string">'02'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.month_name() <span class="comment"># 随机月份名字</span></div><div class="line"><span class="string">'August'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.year() <span class="comment"># 随机年</span></div><div class="line"><span class="string">'1974'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.day_of_week() <span class="comment"># 随机星期几</span></div><div class="line"><span class="string">'Sunday'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.day_of_month() <span class="comment"># 随机月中某一天</span></div><div class="line"><span class="string">'02'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.time_delta() <span class="comment"># 随机时间延迟</span></div><div class="line">datetime.timedelta(<span class="number">13371</span>, <span class="number">27637</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.date_object()  <span class="comment"># 随机日期对象</span></div><div class="line">datetime.date(<span class="number">1983</span>, <span class="number">1</span>, <span class="number">26</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.time_object() <span class="comment"># 随机时间对象</span></div><div class="line">datetime.time(<span class="number">17</span>, <span class="number">8</span>, <span class="number">56</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.unix_time() <span class="comment"># 随机unix时间（时间戳）</span></div><div class="line"><span class="number">1223246848</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.date(pattern=<span class="string">"%Y-%m-%d"</span>) <span class="comment"># 随机日期（可自定义格式）</span></div><div class="line"><span class="string">'1984-04-20'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.date_time_ad(tzinfo=<span class="keyword">None</span>)  <span class="comment"># 公元后随机日期</span></div><div class="line">datetime.datetime(<span class="number">341</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">9</span>)</div></pre></td></tr></table></figure><h3 id="file-文件"><a href="#file-文件" class="headerlink" title="file 文件"></a>file 文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.file_name(category=<span class="string">"image"</span>, extension=<span class="string">"png"</span>) <span class="comment"># 文件名（指定文件类型和后缀名）</span></div><div class="line"><span class="string">'增加.png'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.file_name() <span class="comment"># 随机生成各类型文件</span></div><div class="line"><span class="string">'提供.pdf'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.file_extension(category=<span class="keyword">None</span>) <span class="comment"># 文件后缀</span></div><div class="line"><span class="string">'txt'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.mime_type(category=<span class="keyword">None</span>) <span class="comment"># mime-type</span></div><div class="line"><span class="string">'image/png'</span></div></pre></td></tr></table></figure><h3 id="internet-互联网"><a href="#internet-互联网" class="headerlink" title="internet 互联网"></a>internet 互联网</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.ipv4(network=<span class="keyword">False</span>)  <span class="comment"># ipv4地址</span></div><div class="line"><span class="string">'104.225.105.10'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.ipv6(network=<span class="keyword">False</span>)  <span class="comment"># ipv6地址</span></div><div class="line"><span class="string">'dea6:ca11:39d0:b49f:fff1:82f1:bf88:698b'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.uri_path(deep=<span class="keyword">None</span>) <span class="comment"># uri路径</span></div><div class="line"><span class="string">'search/categories'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.uri_extension() <span class="comment"># uri扩展名</span></div><div class="line"><span class="string">'.htm'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.uri() <span class="comment"># uri</span></div><div class="line"><span class="string">'https://www.wei.com/terms/'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.url() <span class="comment"># url</span></div><div class="line"><span class="string">'http://zheng.org/'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.image_url(width=<span class="keyword">None</span>, height=<span class="keyword">None</span>)  <span class="comment"># 图片url</span></div><div class="line"><span class="string">'https://www.lorempixel.com/700/990'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.domain_word() <span class="comment"># 域名主体</span></div><div class="line"><span class="string">'hu'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.domain_name() <span class="comment"># 域名</span></div><div class="line"><span class="string">'hu.cn'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.tld() <span class="comment"># 域名后缀</span></div><div class="line"><span class="string">'com'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.user_name() <span class="comment"># 用户名</span></div><div class="line"><span class="string">'xia13'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.user_agent() <span class="comment"># UA</span></div><div class="line"><span class="string">'Opera/8.33.(Windows NT 5.1; an-ES) Presto/2.9.171 Version/10.00'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.mac_address() <span class="comment"># MAC地址</span></div><div class="line"><span class="string">'d6:38:cc:2a:76:b2'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.safe_email() <span class="comment"># 安全邮箱</span></div><div class="line"><span class="string">'mingli@example.net'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.free_email() <span class="comment"># 免费邮箱</span></div><div class="line"><span class="string">'tao44@gmail.com'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.company_email()  <span class="comment"># 公司邮箱</span></div><div class="line"><span class="string">'jingzhong@wang.cn'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.email() <span class="comment"># 邮箱</span></div><div class="line"><span class="string">'changjun@hao.com'</span></div></pre></td></tr></table></figure><h3 id="job-工作"><a href="#job-工作" class="headerlink" title="job 工作"></a>job 工作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.job()<span class="comment">#工作职位</span></div><div class="line"><span class="string">'Dealer'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.job() </div><div class="line"><span class="string">'Musician'</span></div></pre></td></tr></table></figure><h3 id="lorem-乱数假文"><a href="#lorem-乱数假文" class="headerlink" title="lorem 乱数假文"></a>lorem 乱数假文</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.text(max_nb_chars=<span class="number">200</span>) <span class="comment"># 随机生成一篇文章</span></div><div class="line"><span class="string">'语言无法应用为什一点国内.要求完成如何世界电脑发布作品.经济不同教育个人科技全国.\n在线学生发布信息上海状态.\n联系一次通过其实介绍世界.增加也是使用成功那个.\n商品免费管理公司.留言自己这种内容.\n次数内容知道这样女人感觉.操作他的生产出现如何报告文章只有.\n个人文化中心不能发布最新.质量一下提高.感觉最大工具表示最后计划.这是还有次数结果其实特别.'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.word() <span class="comment"># 随机单词</span></div><div class="line"><span class="string">'能力'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.words(nb=<span class="number">3</span>)  <span class="comment"># 随机生成几个字</span></div><div class="line">[<span class="string">'国家'</span>, <span class="string">'经营'</span>, <span class="string">'结果'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.sentence(nb_words=<span class="number">6</span>, variable_nb_words=<span class="keyword">True</span>)  <span class="comment"># 随机生成一个句子</span></div><div class="line"><span class="string">'重要更多我们作品地方增加.'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.sentences(nb=<span class="number">3</span>) <span class="comment"># 随机生成几个句子</span></div><div class="line">[<span class="string">'制作上海学生.'</span>, <span class="string">'方式汽车一样技术帮助欢迎.'</span>, <span class="string">'说明一种深圳经营电话帖子.'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.paragraph(nb_sentences=<span class="number">3</span>, variable_nb_sentences=<span class="keyword">True</span>)  <span class="comment"># 随机生成一段文字(字符串)</span></div><div class="line"><span class="string">'非常环境位置有限发展首页行业.情况对于出现部门这种觉得.产品以后因为虽然由于日本不同.'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.paragraphs(nb=<span class="number">3</span>)  <span class="comment"># 随机生成成几段文字(列表)</span></div><div class="line">[<span class="string">'就是发布要求有关这里国际.美国设备深圳经营.首页也是支持报告.'</span>, <span class="string">'决定可是只有发现开始一直.最后有些项目正在深圳关系决定.下载注册图片更多进行他的那些.'</span>, <span class="string">'必须他们发生数据准备联系.同时这样内容学校精华.'</span>]</div></pre></td></tr></table></figure><h3 id="misc-杂项"><a href="#misc-杂项" class="headerlink" title="misc 杂项"></a>misc 杂项</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.binary(length=<span class="number">10</span>)  <span class="comment"># 随机二进制字符串(可指定长度)</span></div><div class="line"><span class="string">b'U\xa9@\x1e\x96\xe7\xca\x82\x14f'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.language_code()   <span class="comment"># 随机语言代码</span></div><div class="line"><span class="string">'tg'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.md5(raw_output=<span class="keyword">False</span>)  <span class="comment"># 随机md5，16进制字符串</span></div><div class="line"><span class="string">'cc4feebe419791332bbcff5e0fdf084a'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.sha1(raw_output=<span class="keyword">False</span>) <span class="comment"># 随机sha1，16进制字符串</span></div><div class="line"><span class="string">'8ac0e9980f880860b6e45ae6fd257cc847b7ae8d'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.sha256(raw_output=<span class="keyword">False</span>)   <span class="comment"># 随机sha256，16进制字符串</span></div><div class="line"><span class="string">'033151f173f4a389e38e7df2363d89741f752c474e7bdfa2ee0a794bf0b505b5'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.boolean(chance_of_getting_true=<span class="number">50</span>) <span class="comment"># 随机真假值(得到True的几率是50%)</span></div><div class="line"><span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.null_boolean() <span class="comment"># 随机真假值和null</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.null_boolean()</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.password(length=<span class="number">10</span>, special_chars=<span class="keyword">True</span>, digits=<span class="keyword">True</span>, upper_case=<span class="keyword">True</span>, lower_case=<span class="keyword">True</span>) <span class="comment"># 随机密码（可指定密码策略）</span></div><div class="line"><span class="string">'F%722TJg_U'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.locale() <span class="comment"># 随机本地代码</span></div><div class="line"><span class="string">'hy_AM'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.uuid4() <span class="comment"># 随机uuid</span></div><div class="line"><span class="string">'a50d17e7-bc4f-37a3-27b3-04a24fdd0055'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure><h3 id="phone-number-电话号码"><a href="#phone-number-电话号码" class="headerlink" title="phone_number 电话号码"></a>phone_number 电话号码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.phone_number() <span class="comment"># 手机号码</span></div><div class="line"><span class="string">'13334603608'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.phonenumber_prefix() <span class="comment"># 运营商号段，手机号码前三位</span></div><div class="line"><span class="number">158</span></div></pre></td></tr></table></figure><h3 id="python-python数据"><a href="#python-python数据" class="headerlink" title="python python数据"></a>python python数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.pyint()  <span class="comment"># 随机int</span></div><div class="line"><span class="number">7775</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.pyfloat(left_digits=<span class="keyword">None</span>, right_digits=<span class="keyword">None</span>, positive=<span class="keyword">False</span>)  <span class="comment"># 浮点数</span></div><div class="line"><span class="number">-84901.5586333</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.pydecimal(left_digits=<span class="keyword">None</span>, right_digits=<span class="keyword">None</span>, positive=<span class="keyword">False</span>)  <span class="comment"># 随机高精度数</span></div><div class="line">Decimal(<span class="string">'-12273687068527.0'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.pystr(min_chars=<span class="keyword">None</span>, max_chars=<span class="number">20</span>)  <span class="comment"># 随机字符串（可指定长度）</span></div><div class="line"><span class="string">'cblutNKFIyegfcHPrjzx'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.pybool()  <span class="comment"># 随机bool值</span></div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.pyiterable(nb_elements=<span class="number">10</span>, variable_nb_elements=<span class="keyword">True</span>)  <span class="comment"># 随机iterable</span></div><div class="line">[<span class="string">'ODfeVvcbAjPDBGwzljQw'</span>, <span class="string">'https://www.tan.cn/list/category/homepage.php'</span>, <span class="string">'YQlrsFkBieyKYaXlCljJ'</span>, Decimal(<span class="string">'42778240911787.2'</span>), Decimal(<span class="string">'957411812.6383'</span>), <span class="string">'TGbqZufoiUXLQTZDrVcP'</span>, <span class="string">'http://yan.com/posts/tags/search/terms.php'</span>, <span class="number">3.680492634254</span>, <span class="string">'min57@hotmail.com'</span>, datetime.datetime(<span class="number">2001</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">49</span>), <span class="string">'xMMOjlETIgKGqVGTrChG'</span>, <span class="string">'yong83@xu.cn'</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.pylist(nb_elements=<span class="number">10</span>, variable_nb_elements=<span class="keyword">True</span> )  <span class="comment"># 随机生成一个list</span></div><div class="line">[<span class="string">'KXQMXAkcEMSLfnIZkgJb'</span>, <span class="string">'BtowiRsuIqyyULnSYYdr'</span>, datetime.datetime(<span class="number">2011</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">44</span>, <span class="number">2</span>), datetime.datetime(<span class="number">2008</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">38</span>, <span class="number">38</span>), <span class="string">'juan47@hotmail.com'</span>, <span class="string">'QEsdUpEqHLpThyWCjkNx'</span>, Decimal(<span class="string">'-801375867.9'</span>), <span class="string">'ucDyeZnHAXfZtkwdVUbR'</span>, <span class="number">4707</span>, datetime.datetime(<span class="number">1974</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">54</span>, <span class="number">29</span>)]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.pydict(nb_elements=<span class="number">10</span>, variable_nb_elements=<span class="keyword">True</span>)   <span class="comment"># 随机字典</span></div><div class="line">&#123;<span class="string">'其中'</span>: <span class="number">9047</span>, <span class="string">'一直'</span>: <span class="string">'AUiUjuqccIdVAWSqzDbW'</span>, <span class="string">'选择'</span>: <span class="string">'ddong@hotmail.com'</span>, <span class="string">'开发'</span>: datetime.datetime(<span class="number">1972</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">9</span>), <span class="string">'电影'</span>: <span class="string">'KYmolBhkjSRxloXXFUUT'</span>, <span class="string">'文化'</span>: <span class="number">2681</span>, <span class="string">'这里'</span>: <span class="string">'uyang@yahoo.com'</span>, <span class="string">'不会'</span>: <span class="string">'ZPkwuxWsrJSHMNuFiWEx'</span>, <span class="string">'社会'</span>: <span class="string">'CiujeaZMZSuyYwuKzEdN'</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.pyset(nb_elements=<span class="number">10</span>, variable_nb_elements=<span class="keyword">True</span>)  <span class="comment"># 随机set</span></div><div class="line">&#123;<span class="string">'bhe@hotmail.com'</span>, <span class="string">'http://fu.cn/list/home.htm'</span>, <span class="string">'MlJluVirRkofBnKNtphM'</span>, <span class="number">296</span>, <span class="string">'ghoUSHkuEGmCzlJFKyHZ'</span>, datetime.datetime(<span class="number">2008</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">55</span>, <span class="number">4</span>), <span class="string">'AgbynHjdvwYpUkbMsfqr'</span>, <span class="number">8751</span>, <span class="number">9649</span>, <span class="string">'tangguiying@hotmail.com'</span>, Decimal(<span class="string">'5727570036.91'</span>), <span class="string">'HmDkExndcQIOaTtsSpsc'</span>, <span class="string">'hjQlLLXuHVVzENEwoHJK'</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.pytuple(nb_elements=<span class="number">10</span>, variable_nb_elements=<span class="keyword">True</span>)   <span class="comment"># 随机tuple</span></div><div class="line">(<span class="string">'http://www.cai.com/index/'</span>, datetime.datetime(<span class="number">1973</span>, <span class="number">7</span>, <span class="number">28</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">23</span>), <span class="string">'khltJQMYJvIDRMYodviZ'</span>, <span class="string">'uJezUsEqiHaiFxwOPWvl'</span>, <span class="string">'qojwZHyytBSQQavkDaTu'</span>, <span class="string">'AHUCHYuVJTHnoSEuQDSY'</span>, <span class="number">1012</span>, <span class="string">'uEYVuzeTlgVhrnCATfKw'</span>, <span class="string">'https://www.zhou.com/categories/tags/main/'</span>, <span class="string">'LbLSFZPeATtzHvbmYhGr'</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.pystruct()  <span class="comment"># 随机生成3个有10个元素的python数据结构</span></div><div class="line">([datetime.datetime(<span class="number">1996</span>, <span class="number">10</span>, <span class="number">26</span>, <span class="number">7</span>, <span class="number">35</span>, <span class="number">26</span>), datetime.datetime(<span class="number">1998</span>, <span class="number">2</span>, <span class="number">28</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">8</span>), <span class="string">'qianming@hotmail.com'</span>, <span class="string">'yEWMrpTqtAHfbxqldGrb'</span>, <span class="string">'YgKYOnrjuthOrOXhlYIl'</span>, datetime.datetime(<span class="number">1994</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">55</span>, <span class="number">30</span>), Decimal(<span class="string">'-6865068.3'</span>), <span class="string">'SYHFHiFvJlRVPcCKumUM'</span>, <span class="number">-8619.4354</span>, <span class="string">'kwGipwcASeALLeKdaWBi'</span>], &#123;<span class="string">'同时'</span>: <span class="string">'BvtYdkNTHwZNMiIIRwKd'</span>, <span class="string">'空间'</span>: <span class="number">310959668662.457</span>, <span class="string">'特别'</span>: <span class="string">'PZQDBuuQWkcdryMloyKS'</span>, <span class="string">'音乐'</span>: Decimal(<span class="string">'-7219015925.0'</span>), <span class="string">'项目'</span>: <span class="string">'https://www.zhou.cn/main.php'</span>, <span class="string">'回复'</span>: <span class="number">30.408750841</span>, <span class="string">'显示'</span>: <span class="string">'etZMrsjXJgZpDfZWhpoS'</span>, <span class="string">'大小'</span>: <span class="number">7472</span>, <span class="string">'类型'</span>: <span class="string">'OsjpxgLqnTcdVOlHoMoP'</span>, <span class="string">'什么'</span>: <span class="string">'http://www.xia.com/posts/app/index/'</span>&#125;, &#123;<span class="string">'朋友'</span>: &#123;<span class="number">0</span>: <span class="number">-415025.243093017</span>, <span class="number">1</span>: [<span class="number">1799</span>, <span class="number">585</span>, <span class="string">'shu@hotmail.com'</span>], <span class="number">2</span>: &#123;<span class="number">0</span>: <span class="number">9980</span>, <span class="number">1</span>: <span class="string">'qnOnFTzGnsjvXGybBnMF'</span>, <span class="number">2</span>: [<span class="string">'http://zheng.cn/list/search/tag/faq.html'</span>, Decimal(<span class="string">'964285276661463.0'</span>)]&#125;&#125;, <span class="string">'发生'</span>: &#123;<span class="number">1</span>: <span class="number">-5339010.6134</span>, <span class="number">2</span>: [datetime.datetime(<span class="number">1987</span>, <span class="number">6</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">45</span>), <span class="string">'SvSpvKqTXlJvdQhHScwM'</span>, <span class="string">'PZjKOYzZzoNVsHLRcARQ'</span>], <span class="number">3</span>: &#123;<span class="number">1</span>: <span class="string">'https://www.yan.cn/register/'</span>, <span class="number">2</span>: <span class="number">2191</span>, <span class="number">3</span>: [<span class="string">'HMHKQuLRBQaaAypRbtHU'</span>, datetime.datetime(<span class="number">2014</span>, <span class="number">5</span>, <span class="number">24</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">36</span>)]&#125;&#125;, <span class="string">'我的'</span>: &#123;<span class="number">2</span>: <span class="string">'linxia@yahoo.com'</span>, <span class="number">3</span>: [<span class="string">'http://gu.com/about.php'</span>, <span class="string">'DhzpWYkgLCobGSHDLXzI'</span>, <span class="number">1420</span>], <span class="number">4</span>: &#123;<span class="number">2</span>: datetime.datetime(<span class="number">1986</span>, <span class="number">2</span>, <span class="number">22</span>, <span class="number">4</span>, <span class="number">50</span>, <span class="number">12</span>), <span class="number">3</span>: <span class="string">'rRHwQQzkpAMBQxwVITBa'</span>, <span class="number">4</span>: [datetime.datetime(<span class="number">1984</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">52</span>, <span class="number">18</span>), <span class="number">-73821572962388.7</span>]&#125;&#125;, <span class="string">'全部'</span>: &#123;<span class="number">3</span>: <span class="string">'uMQeeBXYNGhrHnAerdjp'</span>, <span class="number">4</span>: [<span class="number">323329.56403</span>, <span class="string">'kFvqXFhhtQPNtrOjKtxa'</span>, <span class="string">'http://peng.cn/'</span>], <span class="number">5</span>: &#123;<span class="number">3</span>: <span class="string">'lcaoeisYIAOsuRjbOXia'</span>, <span class="number">4</span>: Decimal(<span class="string">'-902407032449085.0'</span>), <span class="number">5</span>: [<span class="number">2296</span>, <span class="string">'uyuWgnsONzLluXqXdASM'</span>]&#125;&#125;, <span class="string">'大小'</span>: &#123;<span class="number">4</span>: <span class="string">'min63@hotmail.com'</span>, <span class="number">5</span>: [datetime.datetime(<span class="number">1991</span>, <span class="number">10</span>, <span class="number">22</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">48</span>), <span class="string">'cDYEScdIokWuvGhRkWqs'</span>, <span class="string">'XeDJojWyywFvzmWYaokO'</span>], <span class="number">6</span>: &#123;<span class="number">4</span>: Decimal(<span class="string">'-4167029.2915827'</span>), <span class="number">5</span>: <span class="number">4030</span>, <span class="number">6</span>: [<span class="number">6372</span>, <span class="string">'xfRXXEFGsNQpeIGmbaHU'</span>]&#125;&#125;, <span class="string">'语言'</span>: &#123;<span class="number">5</span>: <span class="string">'https://www.guo.cn/'</span>, <span class="number">6</span>: [<span class="number">6498</span>, datetime.datetime(<span class="number">1981</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">4</span>, <span class="number">29</span>), <span class="number">42598100345.61</span>], <span class="number">7</span>: &#123;<span class="number">5</span>: <span class="string">'http://zheng.cn/'</span>, <span class="number">6</span>: <span class="number">-229316.268238</span>, <span class="number">7</span>: [<span class="string">'https://www.qiao.cn/home/'</span>, <span class="string">'GtaEXeVxjRnnkggjEguv'</span>]&#125;&#125;, <span class="string">'表示'</span>: &#123;<span class="number">6</span>: <span class="string">'xcBvcGUWxdMhDqgzmhSd'</span>, <span class="number">7</span>: [<span class="string">'kwDaFhyTKqHajGSaNOMf'</span>, <span class="number">8561</span>, <span class="number">5456</span>], <span class="number">8</span>: &#123;<span class="number">6</span>: <span class="string">'https://zhou.cn/tags/tag/faq.html'</span>, <span class="number">7</span>: <span class="string">'IGayAZtTQVlSOasQwgug'</span>, <span class="number">8</span>: [<span class="string">'iCjwBzHfmPSLqAgmIOle'</span>, <span class="number">70511766106574.5</span>]&#125;&#125;, <span class="string">'电子'</span>: &#123;<span class="number">7</span>: <span class="string">'http://www.lu.org/tags/posts/terms/'</span>, <span class="number">8</span>: [datetime.datetime(<span class="number">1978</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">35</span>), <span class="string">'https://song.cn/main/categories/homepage.html'</span>, <span class="string">'https://long.com/register.html'</span>], <span class="number">9</span>: &#123;<span class="number">7</span>: <span class="string">'nFJNhyMYBvfTxrYwYPUQ'</span>, <span class="number">8</span>: <span class="number">-2252757903.0</span>, <span class="number">9</span>: [<span class="string">'GuJnhMEgXoMAivrgGZie'</span>, datetime.datetime(<span class="number">2014</span>, <span class="number">5</span>, <span class="number">29</span>, <span class="number">1</span>, <span class="number">17</span>, <span class="number">50</span>)]&#125;&#125;, <span class="string">'的人'</span>: &#123;<span class="number">8</span>: <span class="string">'WgHePwYSPgSiPllXpLlJ'</span>, <span class="number">9</span>: [<span class="number">1782</span>, <span class="string">'fSepbXwpvhiBphzDTDNC'</span>, <span class="number">-9117731.63459416</span>], <span class="number">10</span>: &#123;<span class="number">8</span>: <span class="number">5602</span>, <span class="number">9</span>: <span class="number">3664</span>, <span class="number">10</span>: [<span class="string">'http://www.mao.com/search/tag/main/'</span>, Decimal(<span class="string">'5579.7377'</span>)]&#125;&#125;, <span class="string">'不过'</span>: &#123;<span class="number">9</span>: <span class="string">'rOfkDPTHvzKbfvQHbPNm'</span>, <span class="number">10</span>: [<span class="number">314.397</span>, <span class="string">'StqeLyXkIDKHfExSjggk'</span>, <span class="string">'xiuyingkang@gao.cn'</span>], <span class="number">11</span>: &#123;<span class="number">9</span>: <span class="string">'BLKNdcccamYzBwRcMxlx'</span>, <span class="number">10</span>: <span class="string">'yongduan@gong.org'</span>, <span class="number">11</span>: [<span class="string">'ZocoQHdbhaNloWALnzwt'</span>, <span class="string">'eWVvvHurAlZZRxlYHZXi'</span>]&#125;&#125;&#125;)</div></pre></td></tr></table></figure><h3 id="profile-人物描述信息"><a href="#profile-人物描述信息" class="headerlink" title="profile 人物描述信息"></a>profile 人物描述信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.profile(fields=<span class="keyword">None</span>, sex=<span class="keyword">None</span>)  <span class="comment"># 人物描述信息：姓名、性别、地址、公司等</span></div><div class="line">&#123;<span class="string">'job'</span>: <span class="string">'Licensed conveyancer'</span>, <span class="string">'company'</span>: <span class="string">'万迅电脑信息有限公司'</span>, <span class="string">'ssn'</span>: <span class="string">'370684199902182726'</span>, <span class="string">'residence'</span>: <span class="string">'福建省小红市南长广州街K座 406448'</span>, <span class="string">'current_location'</span>: (Decimal(<span class="string">'18.050895'</span>), Decimal(<span class="string">'-0.877117'</span>)), <span class="string">'blood_group'</span>: <span class="string">'0-'</span>, <span class="string">'website'</span>: [<span class="string">'https://www.yi.org/'</span>, <span class="string">'https://www.hu.com/'</span>, <span class="string">'https://www.yin.cn/'</span>], <span class="string">'username'</span>: <span class="string">'minghuang'</span>, <span class="string">'name'</span>: <span class="string">'后英'</span>, <span class="string">'sex'</span>: <span class="string">'F'</span>, <span class="string">'address'</span>: <span class="string">'安徽省秀荣市璧山嘉禾路T座 954960'</span>, <span class="string">'mail'</span>: <span class="string">'czhong@hotmail.com'</span>, <span class="string">'birthdate'</span>: <span class="string">'1975-03-09'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = fake.simple_profile(sex=<span class="string">"m"</span>) <span class="comment"># 人物精简信息</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i,v <span class="keyword">in</span> s.items():</div><div class="line"><span class="meta">... </span>    print(i,v)</div><div class="line">...</div><div class="line">username chao85</div><div class="line">name 邴宇</div><div class="line">sex M</div><div class="line">address 陕西省东市朝阳廖街Y座 <span class="number">757661</span></div><div class="line">mail xiazhang@gmail.com</div><div class="line">birthdate <span class="number">1996</span><span class="number">-09</span><span class="number">-20</span></div></pre></td></tr></table></figure><h3 id="ssn-社会安全码-身份证"><a href="#ssn-社会安全码-身份证" class="headerlink" title="ssn 社会安全码(身份证)"></a>ssn 社会安全码(身份证)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.ssn() <span class="comment"># 随机生成身份证号(18位)</span></div><div class="line"><span class="string">'140100196612297997'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(fake.ssn())</div><div class="line"><span class="number">18</span></div></pre></td></tr></table></figure><h3 id="user-agent-用户代理"><a href="#user-agent-用户代理" class="headerlink" title="user_agent 用户代理"></a>user_agent 用户代理</h3><p>常用在伪造浏览器信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.user_agent() <span class="comment"># 伪造UA</span></div><div class="line"><span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/5361 (KHTML, like Gecko) Chrome/15.0.812.0 Safari/5361'</span></div></pre></td></tr></table></figure><p>平台信息伪造</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.linux_platform_token()</div><div class="line"><span class="string">'X11; Linux i686'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.linux_processor()</div><div class="line"><span class="string">'i686'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.windows_platform_token()</div><div class="line"><span class="string">'Windows CE'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.mac_platform_token()</div><div class="line"><span class="string">'Macintosh; Intel Mac OS X 10_7_4'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.mac_processor()</div><div class="line"><span class="string">'PPC'</span></div></pre></td></tr></table></figure><p>浏览器伪造</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.internet_explorer() <span class="comment"># IE浏览器</span></div><div class="line"><span class="string">'Mozilla/5.0 (compatible; MSIE 5.0; Windows NT 6.1; Trident/4.0)'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.opera() <span class="comment"># opera浏览器</span></div><div class="line"><span class="string">'Opera/9.37.(Windows 95; doi-IN) Presto/2.9.178 Version/10.00'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.firefox() <span class="comment"># firefox浏览器</span></div><div class="line"><span class="string">'Mozilla/5.0 (Windows NT 5.0; te-IN; rv:1.9.2.20) Gecko/2015-09-28 13:29:05 Firefox/12.0'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.safari() <span class="comment"># safari浏览器</span></div><div class="line"><span class="string">'Mozilla/5.0 (Windows; U; Windows NT 4.0) AppleWebKit/533.37.4 (KHTML, like Gecko) Version/5.0 Safari/533.37.4'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.chrome() <span class="comment"># chrome浏览器</span></div><div class="line"><span class="string">'Mozilla/5.0 (Windows 98; Win 9x 4.90) AppleWebKit/5361 (KHTML, like Gecko) Chrome/14.0.866.0 Safari/5361'</span></div></pre></td></tr></table></figure><h2 id="自定义扩展"><a href="#自定义扩展" class="headerlink" title="自定义扩展"></a>自定义扩展</h2><p>Faker 已经提供了足够丰富的信息生成，包括名字、手机号、邮箱地址、邮编等等。尽管如此，可能还是没有办法满足你的需求。这时，可以利用自定义扩展，引用外部的 provider，自定义你要的功能。</p><p>Faker 对象可以通过 <code>add_provider</code> 方法将自定义的 Provider 添加到对象中,自定义的 Provider 需要继承自 BaseProvider。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</div><div class="line">fake = Faker()</div><div class="line"></div><div class="line"><span class="comment"># first, import a similar Provider or use the default one</span></div><div class="line"><span class="keyword">from</span> faker.providers <span class="keyword">import</span> BaseProvider</div><div class="line"></div><div class="line"><span class="comment"># create new provider class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyProvider</span><span class="params">(BaseProvider)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'bar'</span></div><div class="line"></div><div class="line"><span class="comment"># then add new provider to faker instance</span></div><div class="line">fake.add_provider(MyProvider)</div><div class="line"></div><div class="line"><span class="comment"># now you can use:</span></div><div class="line">print(fake.foo())</div></pre></td></tr></table></figure><p>结果显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bar</div></pre></td></tr></table></figure><h2 id="随机控制"><a href="#随机控制" class="headerlink" title="随机控制"></a>随机控制</h2><p><code>Faker</code> 随机生成由 <code>random.Random</code> 驱动。其中，<code>.random</code> 属性返回 <code>random.Random</code> 对象。通过对该对象的操作，可以实现自定义的行为。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</div><div class="line">fake = Faker()</div><div class="line">fake.random</div><div class="line">fake.random.getstate()</div></pre></td></tr></table></figure><p>那么，可以实现什么自定义呢？举个例子，我们可以设置 <code>seed</code>，通过给定的 <code>seed</code> 可以控制每次生成的内容都是一样的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> faker <span class="keyword">import</span> Faker</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake = Faker()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.random.seed(<span class="number">4321</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.name()</div><div class="line"><span class="string">'Ryan Gallagher'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.address()</div><div class="line"><span class="string">'7631 Johnson Village Suite 690\nAdamsbury, NC 50008'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.random.seed(<span class="number">4321</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.name()</div><div class="line"><span class="string">'Ryan Gallagher'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>fake.address()</div><div class="line"><span class="string">'7631 Johnson Village Suite 690\nAdamsbury, NC 50008'</span></div></pre></td></tr></table></figure><p>不同的两次运行，只要seed一样，生成出来的信息就是一样的。</p><p>注意：<code>fake.random.seed(4321)</code> 可以写成 <code>fake.seed(4321)</code> 。</p><h2 id="命令行生成"><a href="#命令行生成" class="headerlink" title="命令行生成"></a>命令行生成</h2><p>有时想在shell或者其他程序中生成一些伪数据，是不是一定要写一个Python脚本呢？别急——Faker提供了一个命令行工具，估计可以应对大部分场景了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ faker address</div><div class="line">968 Bahringer Garden Apt. 722Kristinaland, NJ 09890</div><div class="line"></div><div class="line">$ python3 -m faker address</div><div class="line">432 Marvin Wells Apt. 593\nWest Eric, DC 45650-8420</div><div class="line"></div><div class="line">$ faker -l de_DE address</div><div class="line">Samira-Niemeier-Allee 5694812 Biedenkopf</div><div class="line"></div><div class="line">$ faker profile</div><div class="line">&#123;<span class="string">'job'</span>: <span class="string">'Designer, blown glass/stained glass'</span>, <span class="string">'company'</span>: <span class="string">'Dennis-Bowers'</span>, <span class="string">'ssn'</span>: <span class="string">'034-28-9965'</span>, <span class="string">'residence'</span>: <span class="string">'34796 Jeremiah Station Apt. 782\nWest Timothy, TX 24139-6974'</span>, <span class="string">'current_location'</span>: (Decimal(<span class="string">'-47.425017'</span>), Decimal(<span class="string">'-42.743615'</span>)), <span class="string">'blood_group'</span>: <span class="string">'0+'</span>, <span class="string">'website'</span>: [<span class="string">'https://www.gardner.biz/'</span>, <span class="string">'http://glover-ellison.info/'</span>, <span class="string">'http://www.harrison.biz/'</span>], <span class="string">'username'</span>: <span class="string">'patrick33'</span>, <span class="string">'name'</span>: <span class="string">'Alexandra Montgomery'</span>, <span class="string">'sex'</span>: <span class="string">'F'</span>, <span class="string">'address'</span>: <span class="string">'2314 Collier Stream Suite 093\nMcintyreside, UT 19553'</span>, <span class="string">'mail'</span>: <span class="string">'gomezterri@hotmail.com'</span>, <span class="string">'birthdate'</span>: <span class="string">'2005-01-30'</span>&#125;</div><div class="line"></div><div class="line">$ faker profile ssn,name</div><div class="line">&#123;<span class="string">'ssn'</span>: <span class="string">'344-68-7420'</span>, <span class="string">'name'</span>: <span class="string">'Veronica Brennan'</span>&#125;</div><div class="line"></div><div class="line">$ faker -r=3 -s=<span class="string">";"</span> name</div><div class="line">Willam Kertzmann;</div><div class="line">Josiah Maggio;</div><div class="line">Gayla Schmitt;</div></pre></td></tr></table></figure><p>faker 命令帮助：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">faker [-h] [--version] [-o output]</div><div class="line">      [-l &#123;bg_BG,cs_CZ,...,zh_CN,zh_TW&#125;]</div><div class="line">      [-r REPEAT] [-s SEP]</div><div class="line">      [-i &#123;module.containing.custom_provider othermodule.containing.custom_provider&#125;]</div><div class="line">      [fake] [fake argument [fake argument ...]]</div></pre></td></tr></table></figure><p>选项说明：</p><ul><li><code>faker</code> ： 在shell中，<code>faker</code> 命令也可以用 <code>python -m faker</code> 来代替</li><li><code>-h</code>，<code>--help</code> ： 帮助信息</li><li><code>--version</code> ：显示版本</li><li><code>-o FILENAM</code> ：输出结果到文件中</li><li><code>-l {bg_BG,cs_CZ,...,zh_CN,zh_TW}</code> ：指定本地化，<code>zh_CN</code> 表示中文</li><li><code>-r REPEAT</code> ：指定生成多少条相同类型的数据</li><li><code>-s SEP</code> ：在每个输出后边添加指定的分隔符</li><li><code>-i {my.custom_provider other.custom_provider}</code> ：自定义扩展，<code>prividers</code>列表。注意，这里要指定包含你 <code>provider</code> 类的模块的路径，而不是程序本身。</li><li><code>fake</code> ：指定方法名称，如：<code>name</code> , <code>address</code> , <code>text</code> 等</li><li><code>[fake argument ...]</code> ：为方法指定参数。如上例，为 <code>profile</code> 方法指定 <code>ssn</code> 和 <code>name</code> 参数，只输出这两个类型的内容。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在开发中常常需要利用一些假数据来做测试,这种时候就可以使用 &lt;code&gt;Faker&lt;/code&gt; 来伪造数据从而用来测试.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/joke2k/faker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Faker&lt;/strong&gt;&lt;/a&gt; 是一个可以让你生成伪造数据的Python包。当你需要初始化数据库，创建美观的XML文档，不断产生数据来进行压力测试或者想从生产服务器上拉取匿名数据的时候，Faker将是你最棒的选择。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python资源收集</title>
    <link href="http://yoursite.com/2017/Python-resource-collection.html"/>
    <id>http://yoursite.com/2017/Python-resource-collection.html</id>
    <published>2017-10-31T06:49:49.000Z</published>
    <updated>2017-10-31T07:25:40.302Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h2><blockquote><p><a href="https://awesome-python.com/" target="_blank" rel="external">https://awesome-python.com/</a></p></blockquote><p><a href="https://github.com/vinta/awesome-python" target="_blank" rel="external">awesome-python</a> 是 vinta 发起维护的 Python 资源列表，内容包括：Web框架、网络爬虫、网络内容提取、模板引擎、数据库、数据可视化、图片处理、文本处理、自然语言处理、机器学习、日志、代码分析等第三方库，收录比较全面。<br>在开发过程中，可先去找下有哪些适合当前使用的第三库，避免重复造轮子。</p><blockquote><p><a href="https://github.com/jobbole/awesome-python-cn" target="_blank" rel="external">https://github.com/jobbole/awesome-python-cn</a></p></blockquote><p>awesome-python 的中文版，由伯乐在线持续更新。<br>awesome-python 虽然挺全，但基本只对收录的资源做了极为简要的介绍，如果有更详细的中文介绍，对相应开发者的帮助会更大。</p><blockquote><p><a href="http://hao.jobbole.com/" target="_blank" rel="external">http://hao.jobbole.com/</a></p></blockquote><p>伯乐在线资源导航收录优秀的工具资源。内容覆盖开发、设计、产品和管理等IT互联网行业相关的领域。目前已经收录 1439 项工具资源。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;第三方库&quot;&gt;&lt;a href=&quot;#第三方库&quot; class=&quot;headerlink&quot; title=&quot;第三方库&quot;&gt;&lt;/a&gt;第三方库&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://awesome-python.com/&quot;
        
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python 之禅</title>
    <link href="http://yoursite.com/2017/The-Zen-of-Python.html"/>
    <id>http://yoursite.com/2017/The-Zen-of-Python.html</id>
    <published>2017-10-30T02:53:06.000Z</published>
    <updated>2017-10-30T03:38:05.704Z</updated>
    
    <content type="html"><![CDATA[<p>在vim的命令模式下输入：</p><blockquote><p>:read !echo import this | python</p></blockquote><p>会得到 <code>The Zen of Python</code> 的原文。</p><a id="more"></a><h2 id="英文原版"><a href="#英文原版" class="headerlink" title="英文原版"></a>英文原版</h2><blockquote><p>The Zen of Python, by Tim Peters</p><p>Beautiful is better than ugly.<br>Explicit is better than implicit.<br>Simple is better than complex.<br>Complex is better than complicated.<br>Flat is better than nested.<br>Sparse is better than dense.<br>Readability counts.<br>Special cases aren’t special enough to break the rules.<br>Although practicality beats purity.<br>Errors should never pass silently.<br>Unless explicitly silenced.<br>In the face of ambiguity, refuse the temptation to guess.<br>There should be one– and preferably only one –obvious way to do it.<br>Although that way may not be obvious at first unless you’re Dutch.<br>Now is better than never.<br>Although never is often better than <em>right</em> now.<br>If the implementation is hard to explain, it’s a bad idea.<br>If the implementation is easy to explain, it may be a good idea.<br>Namespaces are one honking great idea – let’s do more of those!</p></blockquote><h2 id="中文版一"><a href="#中文版一" class="headerlink" title="中文版一"></a>中文版一</h2><blockquote><p>Python之禅</p><p>美丽胜过丑陋<br>明确胜过含混<br>简洁胜过复杂<br>复杂好过混乱<br>平坦强于嵌套<br>留白好过抱团<br>通俗易懂有伟大的价值<br>没有什么能特殊到值得牺牲这些原则<br>尽管现实经常玷污这些纯净<br>错误永不可轻易原谅<br>除非坦诚相对<br>面对模棱两可，拒绝猜测的诱惑<br>那儿应该有一条，也只有一条明确的道路通向彼岸<br>尽管一开始那条路可能不是那样明显，除非你是Dutch<br>现在行动好过从不行动<br>尽管不行动经常比鲁莽行动要好<br>如果实现难以解释，那是一个坏主意<br>如果实现容易解释，那可能是个好主意<br>命名空间是一个伟大的注意－－我们应该好好利用</p></blockquote><ul><li>Python之父是荷兰人Guido van Rossum，被誉为历史上最伟大的12名程序员之一。</li><li>Dutch意指python作者Guido。</li></ul><h2 id="中文版二"><a href="#中文版二" class="headerlink" title="中文版二"></a>中文版二</h2><blockquote><p>Python之禅–python核心开发者Tim Peters</p><p>优美胜于丑陋（Python 以编写优美的代码为目标）<br>明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）<br>简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）<br>复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）<br>扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）<br>间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）<br>可读性很重要（优美的代码是可读的）<br>即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）<br>不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写 except:pass 风格的代码）<br>当存在多种可能，不要尝试去猜测<br>而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）<br>虽然这并不容易，因为你不是 Python 之父（这里的 Dutch 是指 Guido ）<br>做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）<br>如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准）<br>命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）</p></blockquote><h2 id="中文版三"><a href="#中文版三" class="headerlink" title="中文版三"></a>中文版三</h2><blockquote><p>美麗優於醜陋，明講好過暗諭。<br>簡潔者為上，複雜者次之，繁澀者為下。<br>平舖善於層疊，勻散勝過稠密；以致輕鬆易讀。<br>特例難免但不可打破原則，務求純淨卻不可不切實際。<br>斷勿使錯誤靜靜流逝，除非有意如此。<br>在模擬兩可之間，拒絕猜測的誘惑。<br>總會有一種明確的寫法，最好也只有一種，<br>但或須細想方可得。<br>凡事雖應三思後行，但坐而言不如起而行。<br>難以解釋的實作方式，必定是壞方法。<br>容易解釋的實作方式，可能是好主意。<br>命名空間讚，吾人多實用。</p></blockquote><h2 id="图解版"><a href="#图解版" class="headerlink" title="图解版"></a>图解版</h2><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-10-30-006faQNTgw1f39d4phtn8j30jg1uogxv.jpg" alt="006faQNTgw1f39d4phtn8j30jg1uogxv"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在vim的命令模式下输入：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;:read !echo import this | python&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;会得到 &lt;code&gt;The Zen of Python&lt;/code&gt; 的原文。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python安装</title>
    <link href="http://yoursite.com/2017/Python-install.html"/>
    <id>http://yoursite.com/2017/Python-install.html</id>
    <published>2017-10-23T09:01:39.000Z</published>
    <updated>2017-10-24T07:39:39.666Z</updated>
    
    <content type="html"><![CDATA[<p>python的安装越来越容易了，这里收集常见几个版本的安装步骤。</p><a id="more"></a><h1 id="python2-6-x-安装"><a href="#python2-6-x-安装" class="headerlink" title="python2.6.x 安装"></a>python2.6.x 安装</h1><p>CentOS6.5 系统默认自带 python2.6.x 。</p><h1 id="python2-7-x-安装"><a href="#python2-7-x-安装" class="headerlink" title="python2.7.x 安装"></a>python2.7.x 安装</h1><p>CentOS6 中，官方默认的Python版本为2.6.x。要装2.7版本，有两种方法。<br>CentOS7 中，官方默认自带python2.7。</p><h2 id="yum源-ius"><a href="#yum源-ius" class="headerlink" title="yum源-ius"></a>yum源-ius</h2><p><a href="https://ius.io/" target="_blank" rel="external"><strong>IUS（Inline with Upstream Stable）</strong></a>是一个社区项目，它旨在为Linux企业发行版提供可选软件的最新版RPM软件包。</p><p>IUS软件替换CentOS基本源中的软件使用的是安全替换的方式：即当CentOS系统中安装了相应的软件后，再使用IUS源安装相应的软件，IUS软件不会直接更新升级系统自带的软件源，而是提示一个冲突，如果要安装IUS软件，需要先卸载CentOS系统中自带的相应的软件。</p><h3 id="安装ius源"><a href="#安装ius源" class="headerlink" title="安装ius源"></a>安装ius源</h3><p>ius源依赖epel源，首先安装epel源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum install epel-release</div></pre></td></tr></table></figure><p>安装 <a href="https://dl.iuscommunity.org/pub/ius/stable/CentOS/" target="_blank" rel="external"><strong>ius源</strong></a>，可查看有哪些软件能安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">centos6</div><div class="line"># yum install https://dl.iuscommunity.org/pub/ius/stable/CentOS/6/x86_64/ius-release-1.0-15.ius.centos6.noarch.rpm</div><div class="line"></div><div class="line">centos7</div><div class="line"># yum install https://dl.iuscommunity.org/pub/ius/stable/CentOS/7/x86_64/ius-release-1.0-15.ius.centos7.noarch.rpm</div></pre></td></tr></table></figure><h3 id="使用ius源安装python2-7-x"><a href="#使用ius源安装python2-7-x" class="headerlink" title="使用ius源安装python2.7.x"></a>使用ius源安装python2.7.x</h3><p>IUS软件包的命名方式为 <code>软件名+版本号+次版本号+u</code>，如Apache httpd 2.4软件包的名称为 <code>httpd24u</code>，PHP 7.0软件包的名称为 <code>php70u</code>，MariaDB 10.1软件包的名称为 <code>mariadb101u</code>。<br>但在ius源的CentoS6中，对python的命名挺奇怪的，<code>软件名+版本号+次版本号+u</code>的命名方式只在<code>python3.3+</code>的版本才起用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># yum clean all</div><div class="line"># yum install python27</div></pre></td></tr></table></figure><h3 id="pip-安装"><a href="#pip-安装" class="headerlink" title="pip 安装"></a>pip 安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum install python27-pip</div></pre></td></tr></table></figure><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><h3 id="python2-7"><a href="#python2-7" class="headerlink" title="python2.7"></a>python2.7</h3><p>更新指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># yum -y update</div><div class="line"># yum groupinstall -y &apos;development tools&apos;</div></pre></td></tr></table></figure><p>安装python需要的依赖包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum install zlib-devel bzip2-devel openssl-devel xz-libs wget</div></pre></td></tr></table></figure><p>下载源码包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># wget https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz</div><div class="line"># tar zxvf Python-2.7.9.tgz</div></pre></td></tr></table></figure><p>编译安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># cd Python-2.7.9</div><div class="line"># ./configure --prefix=/usr/local</div><div class="line"># make &amp;&amp; make install</div></pre></td></tr></table></figure><p>python2.7 的相关命令会被安装在 <code>/usr/local/bin</code> 目录下。</p><p>要注意：CentOS6 中 yum 默认使用的是 python2.6，如果做软链 <code>ln -s /usr/local/bin/python2.7 /usr/bin/python</code>，会使得 yum 无法使用的。</p><h3 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h3><p>安装setuptools，从 <a href="https://pypi.python.org/pypi/setuptools#code-of-conduct" target="_blank" rel="external"><strong>下载链接</strong></a> 寻找要安装的版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">下载setuptools-25.1.6.zip</div><div class="line"># wget https://pypi.python.org/packages/45/29/8814bf414e7cd1031e1a3c8a4169218376e284ea2553cc0822a6ea1c2d78/setuptools-36.6.0.zip#md5=74663b15117d9a2cc5295d76011e6fd1</div><div class="line"></div><div class="line">解压</div><div class="line"># unzip setuptools-25.1.6.zip</div><div class="line"># cd setuptools-25.1.6</div><div class="line"></div><div class="line">安装，一定要用python2.7来安装</div><div class="line"># python2.7 setup.py install</div></pre></td></tr></table></figure><p>安装pip，利用 <code>get-pip.py</code> 来自动安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># wget https://bootstrap.pypa.io/get-pip.py</div><div class="line"># python2.7 get-pip.py</div></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># pip2.7 -V</div></pre></td></tr></table></figure><h1 id="python3-x-安装"><a href="#python3-x-安装" class="headerlink" title="python3.x 安装"></a>python3.x 安装</h1><h2 id="yum源-ius-1"><a href="#yum源-ius-1" class="headerlink" title="yum源-ius"></a>yum源-ius</h2><p>按照上述的步骤，安装完ius源后，就可以轻松安装python3.x的版本了，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># yum install python35u</div><div class="line"></div><div class="line">或</div><div class="line"># yum install python33</div></pre></td></tr></table></figure><p>安装相应的pip版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum install python35u-pip</div></pre></td></tr></table></figure><h2 id="编译安装-1"><a href="#编译安装-1" class="headerlink" title="编译安装"></a>编译安装</h2><p>从 <a href="https://www.python.org/ftp/python/" target="_blank" rel="external"><strong>源码站</strong></a> 下载相应的源码包，安装上面的步骤，编译安装就行了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python的安装越来越容易了，这里收集常见几个版本的安装步骤。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>日常记错</title>
    <link href="http://yoursite.com/2017/Record-the-error-daily.html"/>
    <id>http://yoursite.com/2017/Record-the-error-daily.html</id>
    <published>2017-09-29T03:21:36.000Z</published>
    <updated>2017-10-12T10:00:48.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSH连接报错"><a href="#SSH连接报错" class="headerlink" title="SSH连接报错"></a>SSH连接报错</h2><p>SSH连接服务器，出现报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># ssh root@xxx.xxx.xxx.xxx </div><div class="line">setsockopt SO_KEEPALIVE: Invalid argument</div><div class="line">write: Broken pipe</div></pre></td></tr></table></figure><p>经过检查，发现是自己的Mac电脑更新系统（MacOS High Sierra），导致电脑中的 SSH 客户端程序坏了，需要重新安装 SSH 客户端。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;SSH连接报错&quot;&gt;&lt;a href=&quot;#SSH连接报错&quot; class=&quot;headerlink&quot; title=&quot;SSH连接报错&quot;&gt;&lt;/a&gt;SSH连接报错&lt;/h2&gt;&lt;p&gt;SSH连接服务器，出现报错：&lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
      <category term="技术杂项" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Docker下快速部署ownCloud</title>
    <link href="http://yoursite.com/2017/Docker-deploy-ownCloud.html"/>
    <id>http://yoursite.com/2017/Docker-deploy-ownCloud.html</id>
    <published>2017-09-15T09:23:27.000Z</published>
    <updated>2017-09-27T09:38:05.892Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>相信大家都用过网盘，比如国外有 <a href="https://www.google.com/drive/" target="_blank" rel="external"><strong>Google Drive</strong></a>、<a href="https://www.dropbox.com/" target="_blank" rel="external"><strong>Dropbx</strong></a>、<a href="https://onedrive.live.com/about/zh-cn/" target="_blank" rel="external"><strong>OneDrive</strong></a>等，国内有 <a href="https://pan.baidu.com/" target="_blank" rel="external"><strong>百度云盘</strong></a>、<a href="https://www.jianguoyun.com/" target="_blank" rel="external"><strong>坚果云</strong></a>等，这些都是公共网盘，由于公司业务需要，想架设公司自己用的私有网盘。</p><p>目前市面上，稳定、成熟的私有云存储方案有：</p><blockquote><p><a href="https://www.seafile.com/home/" target="_blank" rel="external"><strong>Seafile</strong></a>：国内团队开发的一个国际化开源云存储项目<br><a href="https://owncloud.org/" target="_blank" rel="external"><strong>ownCloud</strong></a>：开源专业的私有云存储项目</p></blockquote><p>另外，可以多去关注下 <a href="https://nextcloud.com/" target="_blank" rel="external"><strong>nextcloud</strong></a> 项目，据说 <code>ownCloud</code> 母公司破产后，原项目组的骨干出走并以 <code>ownCloud</code> 项目 <code>folk</code> 出新项目 <code>nextcloud</code> 继续开发。需要说明的是，<code>ownCloud</code> 母公司后来被一家德国公司收购了，<code>ownCloud</code> 项目还在继续开发。</p><p>这里主要介绍 <code>ownCloud</code> 的搭建。</p><a id="more"></a><h2 id="ownCloud介绍"><a href="#ownCloud介绍" class="headerlink" title="ownCloud介绍"></a>ownCloud介绍</h2><p><a href="https://owncloud.org/" target="_blank" rel="external"><strong>ownCloud</strong></a> 是开源的、免费的、专业的私有云存储解决方案，以 <code>AGPL</code> 许可发布，它能帮你快速地在服务器上架设一套专属的私有云文件同步网盘，可以像 <code>Dropbox</code> 那样实现文件跨平台同步、共享与团队协作等。</p><p>ownCloud 支持 Windows/Mac桌面端，IOS/Android手机端。基本可以替代在线网盘如百度网盘等。</p><h2 id="docker下安装ownCloud"><a href="#docker下安装ownCloud" class="headerlink" title="docker下安装ownCloud"></a>docker下安装ownCloud</h2><p>ownCloud项目的内核是使用PHP5编写的，环境基于LAMP，支持SQLite、MySQL、Oracle、PostgreSQL等数据库。<br>要是在服务器中，先搭建LAMP环境，再去安装ownCloud，调试环境会很麻烦，耗时也长。可以通过Docker来快速部署ownCloud。</p><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>服务器系统是：CentOS6.5，在此系统中安装docker，请参考前面的文章：<a href="http://www.hjqjk.com/2017/CentOS-6-5-install-docker.html" target="_blank" rel="external"><strong>CentOS 6.x 上搭建docker</strong></a></p><h3 id="拉取ownCloud官方镜像"><a href="#拉取ownCloud官方镜像" class="headerlink" title="拉取ownCloud官方镜像"></a>拉取ownCloud官方镜像</h3><p><a href="https://hub.docker.com/_/owncloud/" target="_blank" rel="external"><strong>ownCloud的官方docker镜像页面</strong></a><br>这个镜像，已经集成了 <code>Apache + PHP</code> 的环境。目前版本是：<code>10.0.1</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># docker pull owncloud</div></pre></td></tr></table></figure><p>需要用root用户拉取，否则会有警告：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Warning: failed to get default registry endpoint from daemon (Cannot connect to the Docker daemon. Is the docker daemon running on this host?). Using system default: https://index.docker.io/v1/</div><div class="line">Cannot connect to the Docker daemon. Is the docker daemon running on this host?</div></pre></td></tr></table></figure><h3 id="改用MySQL数据库"><a href="#改用MySQL数据库" class="headerlink" title="改用MySQL数据库"></a>改用MySQL数据库</h3><p><code>owncloud</code> 默认使用 <code>SQLite</code> 数据库，但对于更大的安装，官方建议选择另外一个不同的数据库，特别当使用桌面客户端同步文件时，不鼓励使用 <code>SQLite</code>。</p><p>拉取 <code>mysql</code> 官方docker镜像（目前最新是： <code>5.7.19</code> ）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># docker pull mysql</div></pre></td></tr></table></figure><p>启动 MySQL 容器，用作 owncloud 容器的数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># docker run --name my-mysql -e MYSQL_ROOT_PASSWORD=&quot;Dwwe+=32H&quot; -d mysql</div></pre></td></tr></table></figure><h3 id="启动-owncloud-容器"><a href="#启动-owncloud-容器" class="headerlink" title="启动 owncloud 容器"></a>启动 owncloud 容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># docker run --name owncloud -p 5679:80   -v /data/db/owncloud:/var/www/html/data --link my-mysql:mysql -d owncloud</div></pre></td></tr></table></figure><p><code>-p 5679:80</code> ：由于宿主机已开通80端口，为了避免冲突，将容器的80端口映射到宿主机的5679端口。<br><code>--link my-mysql:mysql</code> ：将 <code>owncloud容器(客户)</code> 链接到 <code>my-mysql容器(服务)</code>，链接别名：<code>mysql</code>。</p><h3 id="配置nginx反向代理"><a href="#配置nginx反向代理" class="headerlink" title="配置nginx反向代理"></a>配置nginx反向代理</h3><p>配置文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">upstream pan_server&#123;</div><div class="line">server127.0.0.1:5679;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server &#123;</div><div class="line">    listen   80;</div><div class="line">    server_name pan.xxx.com;</div><div class="line">    access_log /data/logs/nginx/pan.xxx.com.access.log;</div><div class="line">    error_log /data/logs/nginx/pan.xxx.com.error.log;</div><div class="line"></div><div class="line">    proxy_set_header X-Forwarded-For $remote_addr;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_set_header Host $host;</div><div class="line">        proxy_set_header X-Real-IP $remote_addr;</div><div class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">        add_header Cache-Control  &quot;no-cache&quot;;</div><div class="line">    </div><div class="line">        proxy_pass http://pan_server;</div><div class="line">        limit_rate 256m;</div><div class="line">        client_max_body_size 0;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>配好域名解析。</p><h3 id="安装owncloud"><a href="#安装owncloud" class="headerlink" title="安装owncloud"></a>安装owncloud</h3><p>在浏览器上访问 <code>pan.xxx.com</code>，进入 owncloud 安装步骤：</p><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-09-25-15063104057578.jpg" alt=""></p><p>MySQL数据库配置：</p><blockquote><p>数据库用户：root<br>数据库密码：Dwwe+=32H<br>数据库名：owncloud<br>数据库主机：mysql 或 my-mysql</p></blockquote><h3 id="docker-compose-方式安装"><a href="#docker-compose-方式安装" class="headerlink" title="docker-compose 方式安装"></a>docker-compose 方式安装</h3><p>也可以将上面启动 owncloud 和 mysql 容器的两个步骤合成一步完成，这里介绍 <code>docker-compose</code> 的使用。</p><h4 id="docker版本要求"><a href="#docker版本要求" class="headerlink" title="docker版本要求"></a>docker版本要求</h4><p>想要用 <code>docker-compose</code>，docker版本必须大于等于 <code>1.10.0</code>，否则会报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ERROR: The Docker Engine version is less than the minimum required by Compose. Your current project requires a Docker Engine of version 1.10.0 or greater.</div></pre></td></tr></table></figure><h4 id="docker-compose-安装"><a href="#docker-compose-安装" class="headerlink" title="docker-compose 安装"></a>docker-compose 安装</h4><p>compose 可以通过 Python 的 pip 工具进行安装，可以直接下载编辑好的二进制文件使用，甚至直接运行在 Docker 容器中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># pip install -U docker-compose</div></pre></td></tr></table></figure><h4 id="docker-compose-yml-文件编写"><a href="#docker-compose-yml-文件编写" class="headerlink" title="docker-compose.yml 文件编写"></a>docker-compose.yml 文件编写</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="attr">version:</span> <span class="string">'2'</span></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  owncloud:</span></div><div class="line"><span class="attr">    image:</span> <span class="string">owncloud</span></div><div class="line"><span class="attr">    links:</span> </div><div class="line"><span class="attr">      - mysql:</span><span class="string">mysql</span></div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"/data/db/owncloud:/var/www/html/data"</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">      -</span> <span class="number">5679</span><span class="string">:80</span></div><div class="line"><span class="attr">  mysql:</span></div><div class="line"><span class="attr">    image:</span> <span class="string">mysql</span></div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"/data/db/mysql:/var/lib/mysql"</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">      -</span> <span class="number">3306</span><span class="string">:3306</span></div><div class="line"><span class="attr">    environment:</span></div><div class="line"><span class="attr">      MYSQL_ROOT_PASSWORD:</span> <span class="string">"Dwwe+=32H"</span></div><div class="line"><span class="attr">      MYSQL_DATABASE:</span> <span class="string">ownCloud</span></div></pre></td></tr></table></figure><h4 id="docker-compose-运行和停止"><a href="#docker-compose-运行和停止" class="headerlink" title="docker-compose 运行和停止"></a>docker-compose 运行和停止</h4><p>注意：<code>docker-compose</code> 必须在 <code>docker-compose.yml</code> 文件所在目录中执行，否则会报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ERROR:</div><div class="line">    Can&apos;t find a suitable configuration file in this directory or any</div><div class="line">    parent. Are you in the right directory?</div><div class="line"></div><div class="line">    Supported filenames: docker-compose.yml, docker-compose.yaml</div></pre></td></tr></table></figure><p>docker-compose 后台启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># docker-compose up -d</div></pre></td></tr></table></figure><p>docker-compose 查看状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># docker-compose ps</div></pre></td></tr></table></figure><p>docker-compose 停止和删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># docker-compose stop</div><div class="line"># dcoker-compose rm</div><div class="line"></div><div class="line">相当上面两条命令</div><div class="line"># dcoker-compose down</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h2&gt;&lt;p&gt;相信大家都用过网盘，比如国外有 &lt;a href=&quot;https://www.google.com/drive/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Google Drive&lt;/strong&gt;&lt;/a&gt;、&lt;a href=&quot;https://www.dropbox.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Dropbx&lt;/strong&gt;&lt;/a&gt;、&lt;a href=&quot;https://onedrive.live.com/about/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;OneDrive&lt;/strong&gt;&lt;/a&gt;等，国内有 &lt;a href=&quot;https://pan.baidu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;百度云盘&lt;/strong&gt;&lt;/a&gt;、&lt;a href=&quot;https://www.jianguoyun.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;坚果云&lt;/strong&gt;&lt;/a&gt;等，这些都是公共网盘，由于公司业务需要，想架设公司自己用的私有网盘。&lt;/p&gt;
&lt;p&gt;目前市面上，稳定、成熟的私有云存储方案有：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.seafile.com/home/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Seafile&lt;/strong&gt;&lt;/a&gt;：国内团队开发的一个国际化开源云存储项目&lt;br&gt;&lt;a href=&quot;https://owncloud.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;ownCloud&lt;/strong&gt;&lt;/a&gt;：开源专业的私有云存储项目&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外，可以多去关注下 &lt;a href=&quot;https://nextcloud.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;nextcloud&lt;/strong&gt;&lt;/a&gt; 项目，据说 &lt;code&gt;ownCloud&lt;/code&gt; 母公司破产后，原项目组的骨干出走并以 &lt;code&gt;ownCloud&lt;/code&gt; 项目 &lt;code&gt;folk&lt;/code&gt; 出新项目 &lt;code&gt;nextcloud&lt;/code&gt; 继续开发。需要说明的是，&lt;code&gt;ownCloud&lt;/code&gt; 母公司后来被一家德国公司收购了，&lt;code&gt;ownCloud&lt;/code&gt; 项目还在继续开发。&lt;/p&gt;
&lt;p&gt;这里主要介绍 &lt;code&gt;ownCloud&lt;/code&gt; 的搭建。&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="ownCloud" scheme="http://yoursite.com/tags/ownCloud/"/>
    
  </entry>
  
  <entry>
    <title>ELK搭建过程</title>
    <link href="http://yoursite.com/2017/ELK-install.html"/>
    <id>http://yoursite.com/2017/ELK-install.html</id>
    <published>2017-09-12T10:27:10.000Z</published>
    <updated>2017-09-14T07:20:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>系统版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">centos-6.5</div></pre></td></tr></table></figure><p>软件版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">elasticsearch-5.2.2</div><div class="line">logstash-5.2.2</div><div class="line">kibana-5.2.2</div><div class="line">jdk : 1.8.0</div></pre></td></tr></table></figure><p>主机环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">主机1（192.168.10.197）：安装 jdk、logstash agent </div><div class="line">主机2（192.168.10.198）:  安装 jdk、redis 、logstash  index、elasticsearch、kibana</div></pre></td></tr></table></figure><a id="more"></a><h2 id="安装-jdk1-8-0-（197-主机、198-主机）"><a href="#安装-jdk1-8-0-（197-主机、198-主机）" class="headerlink" title="安装 jdk1.8.0 （197 主机、198 主机）"></a>安装 jdk1.8.0 （197 主机、198 主机）</h2><p>验证服务器已经安装的java版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># rpm -qa | grep java</div></pre></td></tr></table></figure><p>如果有老旧的java版本，可选择删掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># rpm -e --nodeps [相关软件名]</div></pre></td></tr></table></figure><p>下载并安装 jdk1.8.0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># wget --no-cookies --no-check-certificate --header &quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot; &quot;https://edelivery.oracle.com/otn-pub/java/jdk/8u121-b13/e9e7ea248e2c4826b92b3f075a80e441/jdk-8u121-linux-x64.rpm&quot;</div><div class="line"># rpm -ivh jdk-8u121-linux-x64.rpm</div></pre></td></tr></table></figure><p>验证版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># java -version</div></pre></td></tr></table></figure><p>设置环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># vim ~/.bash_profile  # 添加以下内容</div><div class="line">#set java environment</div><div class="line">JAVA_HOME=/usr/java/jdk1.8.0_121/</div><div class="line">JAVA_BIN=/usr/java/jdk1.8.0_121//bin</div><div class="line">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</div><div class="line">PATH=$JAVA_BIN:$PATH</div><div class="line">export PATH JAVA_HOME CLASSPATH</div></pre></td></tr></table></figure><p>手动加载生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># source ~/.bash_profile</div></pre></td></tr></table></figure><h2 id="安装-redis（198-主机）"><a href="#安装-redis（198-主机）" class="headerlink" title="安装 redis（198 主机）"></a>安装 redis（198 主机）</h2><p>下载并安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/src</div><div class="line"># wget http://download.redis.io/releases/redis-3.2.8.tar.gz</div><div class="line"># tar zxvf redis-3.2.8.tar.gz</div><div class="line"># cd redis-3.2.8</div><div class="line"># make &amp;&amp; make install</div></pre></td></tr></table></figure><p>另外创建redis的配置、日志、数据等目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># mkdir /usr/local/redis/&#123;bin,etc,logs,db&#125; -p</div><div class="line"># cp redis-3.2.8/redis.conf /usr/local/redis/etc/</div><div class="line"># cp redis-3.2.8/src/&#123;redis-benchmark,redis-check-aof,redis-cli,redis-server,mkreleasehdr.sh&#125; /usr/local/redis/bin/</div></pre></td></tr></table></figure><p>修改redis配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># vim /usr/local/redis/etc/redis.conf</div><div class="line">pidfile /usr/local/redis/logs/redis_6379.pid</div><div class="line">logfile /usr/local/redis/logs/redis.log</div><div class="line">dir /usr/local/redis/db/</div><div class="line">#bind 127.0.0.1  #注释这行</div></pre></td></tr></table></figure><p>启动redis服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># /usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf &amp;</div></pre></td></tr></table></figure><p>开启防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># iptables -A INPUT -s 192.168.10.0/24 -m tcp -p tcp --dport 6379 -j ACCEPT</div><div class="line"># iptables-save &gt; /etc/sysconfig/iptables</div></pre></td></tr></table></figure><h2 id="安装-Logstash-（197-主机，logstash-agent-采集日志）"><a href="#安装-Logstash-（197-主机，logstash-agent-采集日志）" class="headerlink" title="安装 Logstash （197 主机，logstash agent 采集日志）"></a>安装 Logstash （197 主机，logstash agent 采集日志）</h2><p>下载并安装：(只要将安装包解压到指定目录就行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># wget https://artifacts.elastic.co/downloads/logstash/logstash-5.2.2.tar.gz</div><div class="line"># tar zxvf logstash-5.2.2.tar.gz -C /usr/local</div></pre></td></tr></table></figure><p>创建配置目录conf，并编辑配置文件：(将采集的日志传送到198主机上的redis队列上)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># mkdir /usr/local/logstash-5.2.2/conf</div><div class="line"># cat /usr/local/logstash-5.2.2/conf/logstash_agent.conf</div><div class="line">input&#123;</div><div class="line">file&#123;</div><div class="line">type=&gt;&quot;msg&quot;</div><div class="line">path=&gt;[&quot;/var/log/messages&quot;]</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">output&#123;</div><div class="line">redis&#123;</div><div class="line">host=&gt;[&quot;192.168.10.198&quot;]</div><div class="line">port=&gt;&quot;6379&quot;</div><div class="line">data_type=&gt;&quot;list&quot;</div><div class="line">key=&gt;&quot;logstash&quot;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>创建logstash日志目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># mkdir /usr/local/ogstash-5.2.2/logs</div></pre></td></tr></table></figure><p>启动服务，将日志写到指定的日志文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/logstash-5.2.2</div><div class="line"># ./bin/logstash -f conf/logstash_agent.conf  -l logs &amp;</div></pre></td></tr></table></figure><h2 id="安装-Logstash-（198-主机，logstash-indexer）"><a href="#安装-Logstash-（198-主机，logstash-indexer）" class="headerlink" title="安装 Logstash （198 主机，logstash indexer）"></a>安装 Logstash （198 主机，logstash indexer）</h2><p>下载并安装：(只要将安装包解压到指定目录就行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># wget https://artifacts.elastic.co/downloads/logstash/logstash-5.2.2.tar.gz</div><div class="line"># tar zxvf logstash-5.2.2.tar.gz -C /usr/local</div></pre></td></tr></table></figure><p>创建配置目录conf，并编辑配置文件：(将采集的日志传送到198主机上的redis队列上)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># mkdir /usr/local/logstash-5.2.2/conf</div><div class="line"># cat /usr/local/logstash-5.2.2/conf/logstash_indexer.conf</div><div class="line">input &#123;</div><div class="line">  redis &#123;</div><div class="line">    host =&gt;[&quot;192.168.10.198&quot;]</div><div class="line">    port =&gt; &quot;6379&quot;</div><div class="line">    data_type =&gt; &quot;list&quot;</div><div class="line">    key =&gt; &quot;logstash&quot;</div><div class="line">    type =&gt;&quot;msg&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">output &#123;</div><div class="line">  elasticsearch &#123;</div><div class="line">    hosts =&gt; &quot;192.168.10.198:9200&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>创建logstash日志目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># mkdir /usr/local/ogstash-5.2.2/logs</div></pre></td></tr></table></figure><p>启动服务，将日志写到指定的日志文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/logstash-5.2.2</div><div class="line"># ./bin/logstash -f conf/logstash_indexer.conf  -l logs &amp;</div></pre></td></tr></table></figure><h2 id="安装-elasticsearch-（198主机）"><a href="#安装-elasticsearch-（198主机）" class="headerlink" title="安装 elasticsearch （198主机）"></a>安装 elasticsearch （198主机）</h2><p>下载并安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.2.2.tar.gz</div><div class="line"># tar zxvf elasticsearch-5.2.2.tar.gz -C /usr/local/</div></pre></td></tr></table></figure><p>修改配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/elasticsearch-5.2.2/</div><div class="line"># vim config/elasticsearch.yml  </div><div class="line">cluster.name: chw</div><div class="line">node.name: chw_rpc</div><div class="line">node.master: true</div><div class="line">node.data: true</div><div class="line">network.host: 192.168.10.198</div><div class="line">path.data: /home/data/elasticsearch/data</div><div class="line">path.logs: /home/data/elasticsearch/logs</div></pre></td></tr></table></figure><p>创建目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /home/data/elasticsearch/&#123;data,logs&#125; -p</div></pre></td></tr></table></figure><p>Elasticsearch不允许以root用户启动，否则会报错：can not run elasticsearch as root。需要创建普通用户，并切换到普通用户启动。<br>注意，elasticsearch-5.2.2目录的属主和属组也要修改，否则会报权限错误。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># groupadd elasticsearch</div><div class="line"># useradd elasticsearch -g elasticsearch</div><div class="line"># chown elasticsearch.elasticsearch /usr/local/elasticsearch-5.2.2/ -R</div><div class="line"># chown elasticsearch.elasticsearch /home/data/elasticsearch/ -R</div></pre></td></tr></table></figure><p>打开tcp端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># iptables -A INPUT -s 192.168.10.0/24 -m tcp -p tcp --dport 9300-j ACCEPT</div><div class="line"># iptables-save &gt; /etc/sysconfig/iptables</div></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># su elasticsearch</div><div class="line">$ ./bin/elasticsearch -d</div></pre></td></tr></table></figure><p>验证是否成功：(返回的状态码为200，则表示成功了)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># curl -X GET http://192.168.10.198:9200</div></pre></td></tr></table></figure><h3 id="相关报错及其解决方法"><a href="#相关报错及其解决方法" class="headerlink" title="相关报错及其解决方法"></a>相关报错及其解决方法</h3><p>（1）、报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ERROR: bootstrap checks failed</div><div class="line">system call filters failed to install; check the logs and fix your configuration or disable system call filters at your own risk</div></pre></td></tr></table></figure><p>原因和解决：<br>   这是在因为Centos6不支持SecComp，而ES5.2.0默认bootstrap.system_call_filter为true进行检测，所以导致检测失败，失败后直接导致ES不能启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 修改 elasticsearch.yml </div><div class="line">bootstrap.memory_lock: false</div><div class="line">bootstrap.system_call_filter: false</div></pre></td></tr></table></figure><p>（2）、报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node settings must not contain any index level settings</div></pre></td></tr></table></figure><p>原因和解决：<br>   在5.0+的版本中，所有index配置（例如 index.mapper.dynamic）都不能再配置文件中写定，需要在ES启动之后通过接口来改。<br>   删除elasticsearch.yml 中，index.* 开头的所有配置项。</p><p>（3）、报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">max virtual memory areas  vm.max_map_count [65530] is too low, increase to at least [262144]</div></pre></td></tr></table></figure><p>解决：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># vim /etc/sysctl.conf # 修改系统配置</div><div class="line">vm.max_map_count=262144</div><div class="line"># sysctl -p  # 使其生效</div></pre></td></tr></table></figure><p>（4）、报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">max number of threads [1024] for user [elsearch] likely too low, increase to at least [2048]</div></pre></td></tr></table></figure><p>解决：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># vim /etc/security/limits.conf  #修改为以下配置</div><div class="line">* soft nproc 2048</div><div class="line">* hard nproc 4096</div><div class="line"># vim  /etc/security/limits.d/90-nproc.conf   #修改为以下配置</div><div class="line">* soft nproc 2048</div></pre></td></tr></table></figure><h2 id="为-Elasticsearch5-2-2-安装head插件-（198-主机）"><a href="#为-Elasticsearch5-2-2-安装head插件-（198-主机）" class="headerlink" title="为 Elasticsearch5.2.2 安装head插件 （198 主机）"></a>为 Elasticsearch5.2.2 安装head插件 （198 主机）</h2><p>下载地址：<a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="external">https://github.com/mobz/elasticsearch-head</a><br>自从Elasticsearch5.0开始就不再支持site plugins，需要将Elasticsearch-head以独立服务的形式安装使用。</p><p>首先安装nodejs和npm：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># yum install nodejs npm -y</div><div class="line"># yum install git -y</div></pre></td></tr></table></figure><p>注意：5.0+版本，elasticsearch-head 不能放在elasticsearch的 plugins、modules 目录下，否则启动会报错： Property [elasticsearch.version] is missing for plugin [head]</p><p>将elasticsearch-head放到 /usr/local/src 目录并安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/src/ </div><div class="line"># git clone git://github.com/mobz/elasticsearch-head.git</div><div class="line"># cd elasticsearch-head/</div><div class="line"># npm install</div></pre></td></tr></table></figure><p>elasticsearch配置允许跨域访问，这样head插件可以访问es：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># vim elasticsearch-5.2.2/config/elasticsearch.yml  # 添加如下两行代码（&quot;:&quot; 后边要有个空格）</div><div class="line">http.cors.enabled: true</div><div class="line">http.cors.allow-origin: &quot;*&quot;</div><div class="line"># 重启elasticsearch服务，使其配置生效。</div></pre></td></tr></table></figure><h3 id="修改head源码"><a href="#修改head源码" class="headerlink" title="修改head源码"></a>修改head源码</h3><p>   由于head的代码还是老版本的，直接执行有很多限制，比如无法跨机器访问。因此需要用户修改两个地方：<br>1）修改服务器监听地址:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># vim elasticsearch-head/Gruntfile.js  # 增加hostname属性，设置为*</div><div class="line">connect: &#123;</div><div class="line">    server: &#123;</div><div class="line">        options: &#123;</div><div class="line">            port: 9100,</div><div class="line">            hostname: &apos;*&apos;,   </div><div class="line">            base: &apos;.&apos;,</div><div class="line">            keepalive: true</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>2）修改连接es服务的地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># vim elasticsearch-head/_site/app.js  # 修改为es的服务器IP</div><div class="line">this.base_uri = this.config.base_uri || this.prefs.get(&quot;app-base_uri&quot;) || &quot;http://192.168.10.198:9200&quot;;</div></pre></td></tr></table></figure><p>启动head服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd /usr/local/src/elasticsearch-head </div><div class="line">$ ./node_modules/grunt/bin/grunt server &amp;</div></pre></td></tr></table></figure><p>验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># curl -I http://localhost:9100</div></pre></td></tr></table></figure><h2 id="安装-kibana-（198主机）"><a href="#安装-kibana-（198主机）" class="headerlink" title="安装 kibana （198主机）"></a>安装 kibana （198主机）</h2><p>下载并安装：(kibana安装很简单，解压到对应目录就行了)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># wget https://artifacts.elastic.co/downloads/kibana/kibana-5.2.2-linux-x86_64.tar.gz</div><div class="line"># tar zxvf kibana-5.2.2-linux-x86_64.tar.gz  -C /usr/local/</div><div class="line"># mv /usr/local/kibana-5.2.2-linux-x86_64/ /usr/local/kibana-5.2.2</div></pre></td></tr></table></figure><p>修改默认配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/kibana-5.2.2/config/</div><div class="line"># vim kibana.yml  # 改为以下配置</div><div class="line">elasticsearch_url: &quot;http://192.168.10.198:9200&quot;</div><div class="line">server.host: &quot;192.168.10.198&quot;</div></pre></td></tr></table></figure><p>启动服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/kibana-5.2.2/</div><div class="line"># ./bin/kibana &amp;</div></pre></td></tr></table></figure><p>验证：（返回200响应码，则成功）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># curl -I http://192.168.10.198:5601</div></pre></td></tr></table></figure><p>为了提供外网访问，利用Nginx做反向代理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">upstream kibana&#123;</div><div class="line">    server 192.168.10.198:5601 fail_timeout=0;</div><div class="line">&#125;</div><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name elk.xxx.com;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://kibana;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前提条件&quot;&gt;&lt;a href=&quot;#前提条件&quot; class=&quot;headerlink&quot; title=&quot;前提条件&quot;&gt;&lt;/a&gt;前提条件&lt;/h2&gt;&lt;p&gt;系统版本：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;centos-6.5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;软件版本：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;elasticsearch-5.2.2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;logstash-5.2.2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;kibana-5.2.2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;jdk : 1.8.0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;主机环境：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;主机1（192.168.10.197）：安装 jdk、logstash agent &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;主机2（192.168.10.198）:  安装 jdk、redis 、logstash  index、elasticsearch、kibana&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术杂项" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="elk" scheme="http://yoursite.com/tags/elk/"/>
    
      <category term="elasticsearch" scheme="http://yoursite.com/tags/elasticsearch/"/>
    
      <category term="logstash" scheme="http://yoursite.com/tags/logstash/"/>
    
      <category term="kibana" scheme="http://yoursite.com/tags/kibana/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 6.5安装NodeJS</title>
    <link href="http://yoursite.com/2017/CentOS-6-5-install-NodeJS.html"/>
    <id>http://yoursite.com/2017/CentOS-6-5-install-NodeJS.html</id>
    <published>2017-09-05T08:14:18.000Z</published>
    <updated>2017-09-06T02:54:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>NodeJS 需要 <code>gcc4.8+</code> 版本（ <code>gcc 4.8</code> 开始全面支持 <code>C 11</code> 和 <code>C++ 11</code> 的新特性）的支持。然而 CentOS6.5 系统默认版本是 <code>4.4.7</code> ，需要升级 gcc 版本，否则在编译 NodeJS 时，会出现如下警告：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WARNING: C++ compiler too old, need g++ 4.8 or clang++ 3.4 (CXX=g++)</div></pre></td></tr></table></figure><a id="more"></a><h2 id="升级-gcc-版本"><a href="#升级-gcc-版本" class="headerlink" title="升级 gcc 版本"></a>升级 gcc 版本</h2><p>查看gcc版本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># gcc -v </div><div class="line">使用内建 specs。</div><div class="line">目标：x86_64-redhat-linux</div><div class="line">配置为：../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-languages=c,c++,objc,obj-c++,java,fortran,ada --enable-java-awt=gtk --disable-dssi --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-1.5.0.0/jre --enable-libgcj-multifile --enable-java-maintainer-mode --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --disable-libjava-multilib --with-ppl --with-cloog --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux</div><div class="line">线程模型：posix</div><div class="line">gcc 版本 4.4.7 20120313 (Red Hat 4.4.7-17) (GCC)</div></pre></td></tr></table></figure><p>CentOS6.5 的系统源提供的 gcc 最新版本是 <code>4.4.7</code>，不能通过 <code>yum</code> 来更新 gcc，这里用编译安装。<br><a href="https://ftp.gnu.org/gnu/gcc/" target="_blank" rel="external"><strong>gcc下载点</strong></a> 有所有的 gcc 版本下载，最新版本是 <code>7.2.0</code>。</p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">安装C和C++的静态库</div><div class="line"># yum install libgcc.i686 glibc-devel.i686</div><div class="line"></div><div class="line">安装旧版本的gcc、c++编辑器</div><div class="line"># yum install gcc gcc-c++ </div><div class="line"></div><div class="line"># yum install texinfo-tex flex zip</div></pre></td></tr></table></figure><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><p>下载解压安装包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/src</div><div class="line"># wget https://ftp.gnu.org/gnu/gcc/gcc-4.8.2/gcc-4.8.2.tar.gz</div><div class="line"># tar zxvf gcc-4.8.2.tar.gz</div></pre></td></tr></table></figure><p>官方推荐，用 <code>download_prerequisites</code> 脚本下载编译必备的一些依赖包（如gmp、mpfr、mpc、cloog、isl等依赖库），自动解压当前目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># cd gcc-4.8.2</div><div class="line"># ./contrib/download_prerequisites</div></pre></td></tr></table></figure><p>编译安装的路径是 <code>/usr/src/gcc-4.8.2/</code>，生成编译文件<code>Makefile</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># mkdir /usr/src/gcc-4.8.2</div><div class="line"># cd /usr/src/gcc-4.8.2/</div><div class="line"># /usr/local/src/gcc-4.8.2/configure --enable-checking=release --enable-languages=c,c++ --disable-multilib</div></pre></td></tr></table></figure><p>执行编译（ ORZ，这过程会很久，大概两小时吧，基本把CPU和内存占光）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># make</div></pre></td></tr></table></figure><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># make install</div></pre></td></tr></table></figure><h3 id="替换系统低版本gcc程序"><a href="#替换系统低版本gcc程序" class="headerlink" title="替换系统低版本gcc程序"></a>替换系统低版本gcc程序</h3><p>系统自带低版本 <code>gcc 4.4.7</code> 的文件位置是 <code>/usr/bin/gcc</code> 和 <code>/usr/bin/lib</code> ，这时需要将这些文件替换为最新安装的 gcc 文件，这里通过建立软链接替换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># mv /usr/bin/c++ /usr/bin/c++.bak</div><div class="line"># ln -s /usr/local/bin/c++ /usr/bin/c++</div><div class="line"># mv /usr/bin/g++ /usr/bin/g++.bak</div><div class="line"># ln -s /usr/local/bin/g++ /usr/bin/g++</div><div class="line"># mv /usr/bin/gcc /usr/bin/gcc.bak </div><div class="line"># ln -s /usr/local/bin/gcc /usr/bin/gcc</div></pre></td></tr></table></figure><p>查看gcc版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># gcc -v</div><div class="line">使用内建 specs。</div><div class="line">COLLECT_GCC=gcc</div><div class="line">COLLECT_LTO_WRAPPER=/usr/local/libexec/gcc/x86_64-unknown-linux-gnu/4.8.2/lto-wrapper</div><div class="line">目标：x86_64-unknown-linux-gnu</div><div class="line">配置为：/usr/local/src/gcc-4.8.2/configure --enable-checking=release --enable-languages=c,c++ --disable-multilib</div><div class="line">线程模型：posix</div><div class="line">gcc 版本 4.8.2 (GCC)</div></pre></td></tr></table></figure><h3 id="替换系统gcc动态链接库"><a href="#替换系统gcc动态链接库" class="headerlink" title="替换系统gcc动态链接库"></a>替换系统gcc动态链接库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># strings /usr/lib64/libstdc++.so.6 | grep GLIBC</div><div class="line">GLIBCXX_3.4</div><div class="line">GLIBCXX_3.4.1</div><div class="line">GLIBCXX_3.4.2</div><div class="line">GLIBCXX_3.4.3</div><div class="line">GLIBCXX_3.4.4</div><div class="line">GLIBCXX_3.4.5</div><div class="line">GLIBCXX_3.4.6</div><div class="line">GLIBCXX_3.4.7</div><div class="line">GLIBCXX_3.4.8</div><div class="line">GLIBCXX_3.4.9</div><div class="line">GLIBCXX_3.4.10</div><div class="line">GLIBCXX_3.4.11</div><div class="line">GLIBCXX_3.4.12</div><div class="line">GLIBCXX_3.4.13</div><div class="line">GLIBC_2.2.5</div><div class="line">GLIBC_2.3</div><div class="line">GLIBC_2.4</div><div class="line">GLIBC_2.3.2</div><div class="line">GLIBCXX_FORCE_NEW</div><div class="line">GLIBCXX_DEBUG_MESSAGE_LENGTH</div></pre></td></tr></table></figure><p>可看出，gcc的动态链接库还是处于旧版本，说明生成的动态库没有替换旧版本 gcc 的动态库。</p><p>新版的gcc动态链接库位置是 <code>/usr/local/lib64/libstdc++.so.6.0.18</code>，替换gcc的动态链接库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># cp /usr/local/lib64/libstdc++.so.6.0.18 /usr/lib64 </div><div class="line"># cd /usr/lib64/</div><div class="line"># rm -f ./libstdc++.so.6</div><div class="line"># ln -s libstdc++.so.6.0.18 libstdc++.so.6</div></pre></td></tr></table></figure><p>查看gcc动态链接库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"># strings /usr/lib64/libstdc++.so.6 | grep GLIBC</div><div class="line">GLIBCXX_3.4</div><div class="line">GLIBCXX_3.4.1</div><div class="line">GLIBCXX_3.4.2</div><div class="line">GLIBCXX_3.4.3</div><div class="line">GLIBCXX_3.4.4</div><div class="line">GLIBCXX_3.4.5</div><div class="line">GLIBCXX_3.4.6</div><div class="line">GLIBCXX_3.4.7</div><div class="line">GLIBCXX_3.4.8</div><div class="line">GLIBCXX_3.4.9</div><div class="line">GLIBCXX_3.4.10</div><div class="line">GLIBCXX_3.4.11</div><div class="line">GLIBCXX_3.4.12</div><div class="line">GLIBCXX_3.4.13</div><div class="line">GLIBCXX_3.4.14</div><div class="line">GLIBCXX_3.4.15</div><div class="line">GLIBCXX_3.4.16</div><div class="line">GLIBCXX_3.4.17</div><div class="line">GLIBCXX_3.4.18</div><div class="line">GLIBCXX_3.4.19</div><div class="line">GLIBC_2.3</div><div class="line">GLIBC_2.2.5</div><div class="line">GLIBC_2.14</div><div class="line">GLIBC_2.3.2</div><div class="line">GLIBCXX_FORCE_NEW</div><div class="line">GLIBCXX_DEBUG_MESSAGE_LENGTH</div></pre></td></tr></table></figure><p>结果表明，gcc动态链接库升级成功。</p><h2 id="编译安装-NodeJS"><a href="#编译安装-NodeJS" class="headerlink" title="编译安装 NodeJS"></a>编译安装 NodeJS</h2><h3 id="下载并解压"><a href="#下载并解压" class="headerlink" title="下载并解压"></a>下载并解压</h3><p>从 <a href="https://nodejs.org/dist/" target="_blank" rel="external"><strong>NodeJS官网</strong></a> 下载想要的版本，这里安装的版本是 <code>v7.10.0</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/src/</div><div class="line"># wget https://nodejs.org/dist/v7.10.0/node-v7.10.0.tar.gz</div><div class="line"># tar zxvf node-v7.10.0.tar.gz</div></pre></td></tr></table></figure><h3 id="编译安装-1"><a href="#编译安装-1" class="headerlink" title="编译安装"></a>编译安装</h3><p>安装路径 <code>/usr/local/node</code> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># cd node-v7.10.0</div><div class="line"># mkdir /usr/local/node</div><div class="line"># ./configure --prefix=/usr/local/node</div><div class="line"># make &amp;&amp; make install</div></pre></td></tr></table></figure><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>配置系统的环境变量，打开 <code>/etc/profile</code> ，加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NODE_HOME=/usr/local/node</div><div class="line">PATH=$NODE_HOME/bin:$PATH</div><div class="line">export NODE_HOME PATH</div></pre></td></tr></table></figure><p>手动加载生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># source /etc/profile</div></pre></td></tr></table></figure><h3 id="查看版本号"><a href="#查看版本号" class="headerlink" title="查看版本号"></a>查看版本号</h3><p>查看NodeJS的版本号，检查是否安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># node -v</div><div class="line">v7.10.0</div></pre></td></tr></table></figure><p>参考资料：<br><a href="https://www.fanhaobai.com/2016/12/upgrade-gcc.html" target="_blank" rel="external">CentOS6.5升级gcc-4.8</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NodeJS 需要 &lt;code&gt;gcc4.8+&lt;/code&gt; 版本（ &lt;code&gt;gcc 4.8&lt;/code&gt; 开始全面支持 &lt;code&gt;C 11&lt;/code&gt; 和 &lt;code&gt;C++ 11&lt;/code&gt; 的新特性）的支持。然而 CentOS6.5 系统默认版本是 &lt;code&gt;4.4.7&lt;/code&gt; ，需要升级 gcc 版本，否则在编译 NodeJS 时，会出现如下警告：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;WARNING: C++ compiler too old, need g++ 4.8 or clang++ 3.4 (CXX=g++)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术杂项" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
      <category term="gcc" scheme="http://yoursite.com/tags/gcc/"/>
    
  </entry>
  
  <entry>
    <title>Git仓库迁移</title>
    <link href="http://yoursite.com/2017/Git-repository-move.html"/>
    <id>http://yoursite.com/2017/Git-repository-move.html</id>
    <published>2017-09-04T09:18:25.000Z</published>
    <updated>2017-09-04T10:39:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>在运维工作中，常遇到Git仓库迁移的问题，如合并多个Git服务器，更换Git托管商等。这篇文章主要记录Git仓库迁移的几种方案。</p><a id="more"></a><h3 id="单个库导入"><a href="#单个库导入" class="headerlink" title="单个库导入"></a>单个库导入</h3><p>迁移步骤：</p><ul><li>使用 <code>--mirror</code> 参数，从当前Git服务器 <code>clone</code> 仓库代码</li><li>在目标Git服务器新建一个同名的空仓库</li><li>使用 <code>--mirror</code> 参数，将代码 <code>push</code> 到目标Git服务器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">使用mirror参数，克隆裸仓库</div><div class="line"># git clone --mirror git@git.XXX.com/test/test_api.git</div><div class="line"></div><div class="line">进入仓库目录</div><div class="line"># cd test_api.git</div><div class="line"></div><div class="line">使用mirror参数，再次push仓库代码到另外一个Git服务器</div><div class="line"># git push --no-verify --mirror git@git.NNN.com/dev/test_api.git</div></pre></td></tr></table></figure><p>有三种clone的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># git clone &lt;repository&gt; &lt;directory&gt;</div><div class="line"># git clone --bare &lt;repository&gt; &lt;directory.git&gt;</div><div class="line"># git clone --mirror &lt;repository&gt; &lt;directory.git&gt;</div></pre></td></tr></table></figure><ul><li>方法1，指向的版本库创建一个克隆到目录。目录相当于克隆版本库的工作区，文件都会检出，版本库位于工作区下的 <code>.git</code> 目录中。</li><li>方法2和方法3创建的克隆版本库都不含工作区，直接就是版本库的内容，这样的版本库称为裸版本库。一般约定俗成裸版本库的目录名以.git为后缀。</li><li>方法3区别于方法2之处在于，方法3克隆出来的裸版本对上游版本库进行了注册，这样可以在裸版本库中使用 <code>git fetch</code> 命令和上游版本库进行持续同步。</li></ul><p>这种方法的缺点是，单个仓库迁移，麻烦而且效率很慢。</p><h3 id="GitLab同版本间进行数据迁移"><a href="#GitLab同版本间进行数据迁移" class="headerlink" title="GitLab同版本间进行数据迁移"></a>GitLab同版本间进行数据迁移</h3><p>Gitlab数据迁移需在同版本之间进行。因为不同版本的Gitlab之间，数据库的库表结构与程序的实现方式是有差异的。若需从<code>服务器A</code> 把Gitlab的数据迁移至 <code>服务器B</code>，则 <code>服务器B</code> 需部署与<code>服务器A</code> 同样版本的Gitlab才可。</p><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><p>这里的GitLab是 <code>omnibus</code> 安装包安装的，默认备份目录是 <code>/var/opt/gitlab/backups</code>。</p><p>备份命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gitlab-rake gitlab:backup:create</div></pre></td></tr></table></figure><p>该命令会在备份目录（默认：/var/opt/gitlab/backups/）下创建一个tar压缩包xxxxxxxx_gitlab_backup.tar，其中开头的xxxxxx是备份创建的时间戳，这个压缩包包括GitLab整个的完整部分。</p><h4 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h4><p>从源GitLab服务器的备份目录中，拷贝备份文件到目标GitLab服务器的备份目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/var/opt/gitlab/backups/1499244722_2017_07_05_9.2.6_gitlab_backup.tar</div></pre></td></tr></table></figure><p>停止 unicorn 和 sidekiq ，保证数据库没有新的连接，不会有写数据情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">停止相关数据连接服务</div><div class="line"># gitlab-ctl stop unicorn</div><div class="line"># gitlab-ctl stop sidekiq</div><div class="line"></div><div class="line">备份恢复，完成数据迁移</div><div class="line"># gitlab-rake gitlab:import:restore BACKUP=1499242399_2017_07_05_9.2.6</div><div class="line"></div><div class="line">重启GitLab服务</div><div class="line"># gitlab-ctl start</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在运维工作中，常遇到Git仓库迁移的问题，如合并多个Git服务器，更换Git托管商等。这篇文章主要记录Git仓库迁移的几种方案。&lt;/p&gt;
    
    </summary>
    
      <category term="版本控制" scheme="http://yoursite.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 6.x 上搭建docker</title>
    <link href="http://yoursite.com/2017/CentOS-6-5-install-docker.html"/>
    <id>http://yoursite.com/2017/CentOS-6-5-install-docker.html</id>
    <published>2017-08-31T09:09:28.000Z</published>
    <updated>2017-09-25T10:11:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.docker.com/" target="_blank" rel="external">Docker</a>是一个能够把开发应用程序自动部署到容器的开源引擎。它由Docker公司的团队编写，基于Apache 2.0开源协议授权。它提供了一个简单、轻量的建模方式，使开发生命周期更高效快速，鼓励了面向服务的架构设计。</p><a id="more"></a><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><h3 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h3><p>Docker 运行环境对内核要求比较高，一般建议直接在Ubuntu这样的平台上运行。但作为一个容器标准，Docker也支持其他如 CentOS，Mac OS X，Windows等其他平台。<br>目前Docker支持以下Red Hat和Red Hat系发行版：(不支持32位)</p><blockquote><p>(RHEL|CentOS) 6.5及以上版本（64位）<br>Fedora 19及以上版本（64位）</p></blockquote><p>在运行于这些系统时，需要 <code>内核版本 &gt;= 3.8</code> ，因为这些内核包含了运行Docker的一些特定修改。<br>查看内核版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># uname -r</div><div class="line">2.6.32-431.el6.x86_64</div></pre></td></tr></table></figure><p>注意：<code>3.8 &gt; 内核版本 &gt;= 2.6.32-431</code> 这些内核版本虽然也能支持Docker运行，但是支持得不好，仍会在运行时出现很多bug。推荐 <code>内核版本 &gt;= 3.8</code> 。</p><h3 id="检查Device-Mapper"><a href="#检查Device-Mapper" class="headerlink" title="检查Device Mapper"></a>检查Device Mapper</h3><p>Docker默认使用AUFS作为存储驱动，但是AUFS并没有被包括在Linux的主线内核中。CentOS中可以使用Device Mapper作为存储驱动，这是在2.6.9内核版本引入的新功能。<br>需要先确认是否启用该功能:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ls -l /sys/class/misc/device-mapper</span></div><div class="line">lrwxrwxrwx 1 root root 0 8月  31 17:33 /sys/class/misc/device-mapper -&gt; ../../devices/virtual/misc/device-mapper</div></pre></td></tr></table></figure><p>如果没有检测到Device Mapper，需要安装其软件包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum install device-mapper -y</div></pre></td></tr></table></figure><p>然后重新加载 <code>dm_mod</code> 内核模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># modprobe dm_mod</div></pre></td></tr></table></figure><h2 id="升级内核版本"><a href="#升级内核版本" class="headerlink" title="升级内核版本"></a>升级内核版本</h2><h3 id="查看当前内核版本"><a href="#查看当前内核版本" class="headerlink" title="查看当前内核版本"></a>查看当前内核版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># cat /etc/redhat-release</div><div class="line">CentOS release 6.5 (Final)</div><div class="line"># uname -r</div><div class="line">2.6.32-431.el6.x86_64</div></pre></td></tr></table></figure><p>CentOS 6.5 系统默认的内核版本是 <code>2.6.32-431.el6.x86_64</code>，不符合Docker的安装条件，需要升级内核版本。</p><h3 id="升级内核版本至3-10-0"><a href="#升级内核版本至3-10-0" class="headerlink" title="升级内核版本至3.10.0"></a>升级内核版本至3.10.0</h3><p>在yum的 <code>ELRepo</code> 源中,有 mainline（3.13.x）、long-term（3.10.x）这2个内核版本，考虑到long-term更稳定，会长期更新，所以选择这个版本。</p><p>导入 Public key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</div></pre></td></tr></table></figure><p>安装ELRepo源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># rpm -ivh http://www.elrepo.org/elrepo-release-6-8.el6.elrepo.noarch.rpm</div></pre></td></tr></table></figure><p>安装kernel-lt 或 kernel-ml（任选一个）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># kernel-lt，内核版本：3.10.x</span></div><div class="line"><span class="comment"># yum --enablerepo=elrepo-kernel install kernel-lt -y</span></div><div class="line"></div><div class="line"><span class="comment"># 或者kernel-ml，内核版本：3.13.x</span></div><div class="line"><span class="comment"># yum --enablerepo=elrepo-kernel install kernel-ml -y</span></div></pre></td></tr></table></figure><p>编辑 <code>grub.conf</code> 文件，修改 Grub 引导顺序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># cat /etc/grub.conf</div><div class="line">device (hd0) HD(1,800,64000,ab0fd74d-ecf9-42ff-8c69-0fa5d3af4fd2)</div><div class="line">default=1</div><div class="line">timeout=5</div><div class="line">splashimage=(hd0,1)/grub/splash.xpm.gz</div><div class="line">hiddenmenu</div><div class="line">title CentOS (3.10.107-1.el6.elrepo.x86_64)</div><div class="line">root (hd0,1)</div><div class="line">kernel /vmlinuz-3.10.107-1.el6.elrepo.x86_64 ro root=/dev/mapper/vg_localhost-lv_root rd_NO_LUKS rd_NO_MD rd_LVM_LV=vg_localhost/lv_swap crashkernel=128M LANG=zh_CN.UTF-8 rd_LVM_LV=vg_localhost/lv_root  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet</div><div class="line">initrd /initramfs-3.10.107-1.el6.elrepo.x86_64.img</div><div class="line">title CentOS (2.6.32-431.el6.x86_64)</div><div class="line">root (hd0,1)</div><div class="line">kernel /vmlinuz-2.6.32-431.el6.x86_64 ro root=/dev/mapper/vg_localhost-lv_root rd_NO_LUKS rd_NO_MD rd_LVM_LV=vg_localhost/lv_swap crashkernel=128M LANG=zh_CN.UTF-8 rd_LVM_LV=vg_localhost/lv_root  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet</div><div class="line">initrd /initramfs-2.6.32-431.el6.x86_64.img</div></pre></td></tr></table></figure><p>确认刚安装的内核在哪个位置，然后设置default值(从0开始)。一般新安装的内核会在第一个位置，所以设置 <code>default=0</code>。</p><p>重启服务器，查看内核版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># reboot</div><div class="line"></div><div class="line"># uname -r</div><div class="line">3.10.107-1.el6.elrepo.x86_64</div></pre></td></tr></table></figure><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>对于CentOS 6.5，Docker可以在 <code>EPEL</code>  源中找到，安装 <code>EPEL</code> 源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># rpm -Uvh http://www.gtlib.gatech.edu/pub/fedora-epel/6/i386/epel-release-6-8.noarch.rpm</div></pre></td></tr></table></figure><p>删除CentOS 6.5默认自带的Docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum remove docker -y</div></pre></td></tr></table></figure><p>安装docker-io的RPM包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># yum install docker-io -y</div></pre></td></tr></table></figure><p>查看Docker版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># docker version</div><div class="line">Client version: 1.7.1</div><div class="line">Client API version: 1.19</div><div class="line">Go version (client): go1.4.2</div><div class="line">Git commit (client): 786b29d/1.7.1</div><div class="line">OS/Arch (client): linux/amd64</div><div class="line">Server version: 1.7.1</div><div class="line">Server API version: 1.19</div><div class="line">Go version (server): go1.4.2</div><div class="line">Git commit (server): 786b29d/1.7.1</div><div class="line">OS/Arch (server): linux/amd64</div></pre></td></tr></table></figure><p>启动Docker服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># service docker start</div></pre></td></tr></table></figure><h2 id="CentOS6-5-中升级docker版本"><a href="#CentOS6-5-中升级docker版本" class="headerlink" title="CentOS6.5 中升级docker版本"></a>CentOS6.5 中升级docker版本</h2><p>CentOS6.5支持的docker最稳定版本就是 <code>1.7.1</code>，实在不适合升级更高的版本，强行升级的话，会很不稳定的，不建议在生产环境中升级。</p><p>具体参考：<a href="http://www.pangxie.space/docker/364" target="_blank" rel="external">Docker升级至1.9.1版本-centos6.5（测试用）</a></p><p>虽然网上能搜到很多升级的文章，但我在实际操作后发现，升级docker版本到 <code>1.9.1</code> 后，启动诸多容器都失败了，换回 <code>1.7.1</code> 后，一切正常。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker&lt;/a&gt;是一个能够把开发应用程序自动部署到容器的开源引擎。它由Docker公司的团队编写，基于Apache 2.0开源协议授权。它提供了一个简单、轻量的建模方式，使开发生命周期更高效快速，鼓励了面向服务的架构设计。&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 6.x 上安装Go</title>
    <link href="http://yoursite.com/2017/CentOS-6-x-install-Go.html"/>
    <id>http://yoursite.com/2017/CentOS-6-x-install-Go.html</id>
    <published>2017-08-30T09:52:14.000Z</published>
    <updated>2017-09-14T15:58:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Go 语言是由Google开发的一种静态强类型、编译型、并发型并具有垃圾回收功能的开源编程语言。<br>Go语言是基于Inferno操作系统所开发的。Go语言于2009年11月正式宣布推出，成为开放源代码项目，并在Linux及Mac OS X平台上进行了实现，后来追加了Windows系统下的实现。</p><blockquote><p><a href="https://golang.org/" target="_blank" rel="external">Go语言官网</a><br>目前最新版本：Go 1.9</p></blockquote><p>对于高性能分布式系统领域而言，Go 语言无疑比大多数其它语言有着更高的开发效率。它提供了海量并行的支持，这对于游戏服务端的开发而言是再好不过了。</p><a id="more"></a><h3 id="安装Go"><a href="#安装Go" class="headerlink" title="安装Go"></a>安装Go</h3><p>获取Go语言的二进制归档文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># cd /usr/local/src</div><div class="line"># wget https://storage.googleapis.com/golang/go1.7.3.linux-amd64.tar.gz</div></pre></td></tr></table></figure><p>解压安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># tar zxvf go1.7.3.linux-amd64.tar.gz -C /usr/local/</div></pre></td></tr></table></figure><h3 id="配置Go环境"><a href="#配置Go环境" class="headerlink" title="配置Go环境"></a>配置Go环境</h3><p>现在，你需要设置转到语言环境变量为您的项目。通常你需要设置3个环境变量 <code>GOROOT</code>，<code>GOPATH</code> 和 <code>PATH</code> 。</p><p><code>GOROOT</code> 是软件包安装在系统上的位置。<br><code>GOPATH</code> 是你的工作目录。 例如我的项目目录是 <code>~/Projects/Proj1</code> ，则 <code>GOPATH=$HOME/Projects/Proj1</code></p><p>在 <code>/etc/bashrc</code> 中加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GOROOT=/usr/local/go</div><div class="line">GOPATH=$HOME/Projects/Proj1   # 根据实际项目路径更改</div><div class="line">PATH=$GOPATH/bin:$GOROOT/bin:$PATH</div></pre></td></tr></table></figure><p>手动加载生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># source /etc/bashrc</div></pre></td></tr></table></figure><h3 id="验证安装是否成功"><a href="#验证安装是否成功" class="headerlink" title="验证安装是否成功"></a>验证安装是否成功</h3><p>检查Go版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># go version</div><div class="line">go version go1.7.3 linux/amd64</div></pre></td></tr></table></figure><p>验证所有环境变量是否配置正确</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"># go env</div><div class="line">GOARCH=&quot;amd64&quot;</div><div class="line">GOBIN=&quot;&quot;</div><div class="line">GOEXE=&quot;&quot;</div><div class="line">GOHOSTARCH=&quot;amd64&quot;</div><div class="line">GOHOSTOS=&quot;linux&quot;</div><div class="line">GOOS=&quot;linux&quot;</div><div class="line">GOPATH=&quot;/root/Projects/Proj1&quot;</div><div class="line">GORACE=&quot;&quot;</div><div class="line">GOROOT=&quot;/usr/local/go&quot;</div><div class="line">GOTOOLDIR=&quot;/usr/local/go/pkg/tool/linux_amd64&quot;</div><div class="line">CC=&quot;gcc&quot;</div><div class="line">GOGCCFLAGS=&quot;-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build311841584=/tmp/go-build&quot;</div><div class="line">CXX=&quot;g++&quot;</div><div class="line">CGO_ENABLED=&quot;1&quot;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Go 语言是由Google开发的一种静态强类型、编译型、并发型并具有垃圾回收功能的开源编程语言。&lt;br&gt;Go语言是基于Inferno操作系统所开发的。Go语言于2009年11月正式宣布推出，成为开放源代码项目，并在Linux及Mac OS X平台上进行了实现，后来追加了Windows系统下的实现。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://golang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Go语言官网&lt;/a&gt;&lt;br&gt;目前最新版本：Go 1.9&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于高性能分布式系统领域而言，Go 语言无疑比大多数其它语言有着更高的开发效率。它提供了海量并行的支持，这对于游戏服务端的开发而言是再好不过了。&lt;/p&gt;
    
    </summary>
    
      <category term="技术杂项" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 6.x 安装JDK8</title>
    <link href="http://yoursite.com/2017/CentOS-6-x-install-JDK8.html"/>
    <id>http://yoursite.com/2017/CentOS-6-x-install-JDK8.html</id>
    <published>2017-08-30T08:00:46.000Z</published>
    <updated>2017-08-30T10:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS 6.x 系统默认安装了JDK7，可根据需要决定是否卸载JDK7。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># rpm -qa |grep jdk</div><div class="line">java-1.7.0-openjdk-devel-1.7.0.121-2.6.8.1.el6_8.x86_64</div><div class="line">java-1.7.0-openjdk-1.7.0.121-2.6.8.1.el6_8.x86_64</div></pre></td></tr></table></figure><a id="more"></a><h3 id="下载解压-JDK"><a href="#下载解压-JDK" class="headerlink" title="下载解压 JDK"></a>下载解压 JDK</h3><p>可以从其<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">官方下载页面</a>下载最新的Java SE Development Kit 8版本，或使用以下命令从shell下载。</p><p>对于64位系统：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># mkdir /usr/local/java</div><div class="line"># cd /usr/local/java</div><div class="line"># wget --no-cookies --no-check-certificate --header &quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot; &quot;http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-8u141-linux-x64.tar.gz&quot;</div><div class="line"># tar zxvf jdk-8u141-linux-x64.tar.gz</div></pre></td></tr></table></figure><p>对于32位系统：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># mkdir /usr/local/java</div><div class="line"># cd /usr/local/java</div><div class="line"># wget --no-cookies --no-check-certificate --header &quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot; &quot;http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-8u141-linux-i586.tar.gz&quot;</div><div class="line"># tar zxvf jdk-8u141-linux-i586.tar.gz</div></pre></td></tr></table></figure><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>绝大多数的Java应用，都是基于其环境变量来工作的，必须设置好。<br>在系统环境变量文件 <code>/etc/profile</code> 中添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">JAVA_HOME=/usr/local/java/jdk1.8.0_141</div><div class="line">JRE_HOME=/usr/local/java/jdk1.8.0_141/jre</div><div class="line">CLASSPATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</div><div class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</div><div class="line"></div><div class="line">export JAVA_HOME JRE_HOME CLASSPATH PATH</div></pre></td></tr></table></figure><p>手动加载生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># source /etc/profile</div></pre></td></tr></table></figure><h3 id="验证JDK版本"><a href="#验证JDK版本" class="headerlink" title="验证JDK版本"></a>验证JDK版本</h3><p>检查JDK版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># java -version</div><div class="line">java version &quot;1.8.0_141&quot;</div><div class="line">Java(TM) SE Runtime Environment (build 1.8.0_141-b15)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.141-b15, mixed mode)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CentOS 6.x 系统默认安装了JDK7，可根据需要决定是否卸载JDK7。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# rpm -qa |grep jdk&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;java-1.7.0-openjdk-devel-1.7.0.121-2.6.8.1.el6_8.x86_64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;java-1.7.0-openjdk-1.7.0.121-2.6.8.1.el6_8.x86_64&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>常用docker命令清单</title>
    <link href="http://yoursite.com/2017/Command-list-of-docker.html"/>
    <id>http://yoursite.com/2017/Command-list-of-docker.html</id>
    <published>2017-08-29T09:21:29.000Z</published>
    <updated>2017-09-01T02:36:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="连接到正在运行的容器上"><a href="#连接到正在运行的容器上" class="headerlink" title="连接到正在运行的容器上"></a>连接到正在运行的容器上</h2><p>在使用 <code>-d</code> 参数时，容器启动后会进入后台。有时候，我们需要进入容器进行操作，可以用docker自带的命令 <code>docker attach</code>。要 <code>attach</code> 上去的容器必须正在运行，可以同时连接上同一个容器来共享屏幕（与 <code>screen</code> 命令类似）</p><p><strong>注意</strong>：直接用 <code>docker attach $CONTAINER_ID</code> 命令连接上容器， <code>CTRL-C</code> 退出后，容器会停止运行。这不符合我们的需求，在 <code>attach</code> 时可以带上 <code>--sig-proxy=false</code> 来确保 <code>CTRL-D</code> 或 <code>CTRL-C</code> 不会关闭容器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># docker attach --sig-proxy=false [$CONTAINER_ID | NAMES]</div></pre></td></tr></table></figure><p>若容器当前正在前台运行进程，如输出nginx的访问日志，而又想连上容器另外执行命令时，不能用 <code>docker attach</code> 命令，可以使用 <code>docker exec</code> 在容器内启动一个交互shell。</p><h2 id="在容器内部运行进程"><a href="#在容器内部运行进程" class="headerlink" title="在容器内部运行进程"></a>在容器内部运行进程</h2><p>在 <code>Docker 1.3</code> 之后，<code>docker exec</code> 命令被引入，该命令可以在容器内部额外启动新进程。<br>可在容器内运行的进程有两种：</p><blockquote><p>后台任务：在容器内运行且没有交互需求<br>交互式任务：保持在前台运行</p></blockquote><h3 id="在容器中运行后台任务"><a href="#在容器中运行后台任务" class="headerlink" title="在容器中运行后台任务"></a>在容器中运行后台任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># docker exec -d test touch /tmp/test.txt</div></pre></td></tr></table></figure><p><code>-d</code> 表明需要运行一个后台进程，<code>test</code> 是容器名，<code>touch /tmp/test.txt</code> 是要要执行的命令。上述例子中的命令会在 <code>test</code> 容器内创建一个空文件 <code>/tmp/test.txt</code>。<br>通过 <code>docker exec</code> 后台命令，可以在正在运行的容器中进行维护、监控和管理任务。</p><h3 id="在容器内运行交互命令"><a href="#在容器内运行交互命令" class="headerlink" title="在容器内运行交互命令"></a>在容器内运行交互命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># docker exec -t -i test /bin/bash</div></pre></td></tr></table></figure><p><code>-t</code> 和 <code>-i</code> 参数为我们执行的进程创建了 <code>TTY</code> 并且捕捉 <code>STDIN</code> 。<code>test</code> 是容器名，<code>/bin/bash</code> 是要执行的命令。上述命令会在 <code>test</code> 容器中创建一个新的 <code>bash</code> 会话，有了这个会话，我们就可以在该容器中运行其他命令，而且用 <code>exit</code> 命令退出该会话后，容器不会停止。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;连接到正在运行的容器上&quot;&gt;&lt;a href=&quot;#连接到正在运行的容器上&quot; class=&quot;headerlink&quot; title=&quot;连接到正在运行的容器上&quot;&gt;&lt;/a&gt;连接到正在运行的容器上&lt;/h2&gt;&lt;p&gt;在使用 &lt;code&gt;-d&lt;/code&gt;
        
      
    
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Python图像处理库:pillow</title>
    <link href="http://yoursite.com/2017/Image-processing-library-of-python-pillow.html"/>
    <id>http://yoursite.com/2017/Image-processing-library-of-python-pillow.html</id>
    <published>2017-08-15T03:51:30.000Z</published>
    <updated>2017-09-01T02:29:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>PIL(Python Imaging Library) 是pyhton常用的图像处理库，<a href="http://pythonware.com/products/pil/" target="_blank" rel="external"><strong>官方网站</strong></a>，最新版本是 <code>1.1.7</code> ，于2009年9月发布，支持Python <code>1.5.2 - 2.7</code>。<br>PIL项目似乎已经停止开发了，<a href="https://web.archive.org/web/20150315041249/http://hg.effbot.org/pil-2009-raclette" target="_blank" rel="external"><strong>PIL仓库</strong></a> 最后一次提交是2011年。<br>python 3.x 版本是无法使用原PIL库的，得使用Pillow库。</p><p>Pillow 库则是 PIL 的一个友好Fork，维护和开发活跃，Pillow 兼容 PIL 的绝大多数语法，推荐使用。<br>Pillow 库提供了广泛的文件格式支持，强大的图像处理能力，主要包括图像储存、图像显示、格式转换以及基本的图像处理操作等。</p><blockquote><p><a href="https://github.com/python-pillow/Pillow" target="_blank" rel="external"><strong>Pillow项目仓库</strong></a><br><a href="https://python-pillow.org/" target="_blank" rel="external"><strong>Pillow官网</strong></a><br><a href="http://pillow.readthedocs.io/en/latest/" target="_blank" rel="external"><strong>Pillow文档</strong></a></p></blockquote><a id="more"></a><h2 id="安装和介绍"><a href="#安装和介绍" class="headerlink" title="安装和介绍"></a>安装和介绍</h2><p>先安装一些依赖包，对于Mac OS系统，可以用 HomeBrew 来安装。这里使用的是python3.x，所以用 pip3 来安装pillow。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ brew install libtiff libjpeg libpng webp little-cms2 freetype</div><div class="line">$ sudo pip3 install pillow</div></pre></td></tr></table></figure><p>pillow库有几个重要的类：</p><ul><li>Image</li><li>ImageDraw</li><li>ImageFont</li></ul><h2 id="Image模块"><a href="#Image模块" class="headerlink" title="Image模块"></a>Image模块</h2><p>PIL 最重要的类是 <code>Image</code>，而<code>Image</code>类定义在同名的 <code>Image</code> 模块里。使用PIL的功能，一般都是从新建一个 <code>Image</code> 类的实例开始。你可以通过多种方法创建 <code>Image</code> 类的实例，如用 <code>Image</code> 模块的 <code>open()</code> 函数打开已有的图像，也可以处理其他实例，或者从零开始构建一个实例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>im = Image.open(<span class="string">'avatar.jpeg'</span>)</div></pre></td></tr></table></figure><p>上面代码引入了 <code>Image</code> 模块，利用模块的 <code>open()</code> 函数，打开了当前目录中的 <code>avatar.jpeg</code> 图像，构建了 <code>im</code> 实例。如果打开失败，会抛出 <code>IOError</code> 异常。</p><p>Image实例有5个属性，如下：</p><ul><li><strong>format</strong> : 返回图像的格式(PNG,JPG,None等)。如果图像不是从文件读取的，它的值就是None</li><li><strong>mode</strong> : 返回图像的模式。常用模式有 <code>L</code> (luminance) 表示灰度图像, <code>RGB</code> 表示真彩色图像, and <code>CMYK</code> 表示出版图像。<a href="http://effbot.org/imagingbook/concepts.htm#mode" target="_blank" rel="external">官方说明-图像模式完整列表</a></li><li><strong>size</strong> : 是一个二元tuple，包含width和height（宽度和高度，单位都是px）</li><li><strong>palette</strong> : 仅当 mode 为 <code>P</code> 时有效，返回 ImagePalette 实例</li><li><strong>info</strong> : 以字典的形式返回实例的信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(im.format)</div><div class="line">JPEG</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(im.mode)</div><div class="line">RGB</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(im.size)</div><div class="line">(<span class="number">640</span>, <span class="number">640</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(im.palette)</div><div class="line"><span class="keyword">None</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(im.info)</div><div class="line">&#123;<span class="string">'jfif'</span>: <span class="number">257</span>, <span class="string">'jfif_unit'</span>: <span class="number">0</span>, <span class="string">'exif'</span>: <span class="string">'Exif\x00\x00MM\x00*\x00\x00\x00\x08\x00\x02\x01\x12\x00\x03\x00\x00\x00\x01\x00\x01\x00\x00\x87i\x00\x04\x00\x00\x00\x01\x00\x00\x00&amp;\x00\x00\x00\x00\x00\x03\xa0\x01\x00\x03\x00\x00\x00\x01\x00\x01\x00\x00\xa0\x02\x00\x04\x00\x00\x00\x01\x00\x00\x02\x80\xa0\x03\x00\x04\x00\x00\x00\x01\x00\x00\x02\x80\x00\x00\x00\x00'</span>, <span class="string">'progressive'</span>: <span class="number">1</span>, <span class="string">'jfif_version'</span>: (<span class="number">1</span>, <span class="number">1</span>), <span class="string">'jfif_density'</span>: (<span class="number">72</span>, <span class="number">72</span>), <span class="string">'progression'</span>: <span class="number">1</span>&#125;</div></pre></td></tr></table></figure><p>可以使用 <code>show()</code> 方法来查看实例（PIL 会将实例暂存为一个临时文件，然后打开它）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>im.show()</div></pre></td></tr></table></figure><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-08-18-15030493677497.jpg" alt=""></p><h3 id="转换图像格式"><a href="#转换图像格式" class="headerlink" title="转换图像格式"></a>转换图像格式</h3><p>PIL 模块支持大量的图像格式。使用 <code>open()</code> 函数从磁盘中读取图像文件，不需要指定图像格式，它会根据文件内容自动确定图像格式。<br>可使用 <code>save(filename,format)</code> 函数以特定的图像格式保存图像。若不指定图像格式，<code>save()</code> 方法会根据文件扩展名来选择相应的图像格式。</p><p>例子：转换图像格式的脚本（转为png格式）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"> </div><div class="line"><span class="keyword">for</span> infile <span class="keyword">in</span> sys.argv[<span class="number">1</span>:]:</div><div class="line">    f,e = os.path.splitext(infile)   <span class="comment"># f 变量是除扩展名以外的文件名，e 变量是扩展名</span></div><div class="line">    outfile = f +<span class="string">".png"</span>  <span class="comment"># 拼凑输出文件名</span></div><div class="line">    <span class="keyword">if</span> infile != outfile:   <span class="comment"># 保存的图像格式跟原图像格式不一样</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            Image.open(infile).save(outfile)  <span class="comment"># 转换图像格式</span></div><div class="line">        <span class="keyword">except</span> IOError:</div><div class="line">            print(<span class="string">"Cannot convert"</span>, infile)  <span class="comment"># 图像无法打开，则处理异常</span></div></pre></td></tr></table></figure><h3 id="创建缩略图"><a href="#创建缩略图" class="headerlink" title="创建缩略图"></a>创建缩略图</h3><p>缩略图是网络开发或者图像软件预览常用的一种基本技术，使用Python的Pillow图像库可以很方便地建立缩略图。<br>Image 类的 <code>thumbnail()</code> 方法可以用来制作缩略图。它接受一个二元数组作为缩略图的尺寸，然后将实例缩小到指定尺寸。</p><p>例子：生成JPEG缩略图，大小是原图像的四分之一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os, sys</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line"><span class="keyword">for</span> infile <span class="keyword">in</span> sys.argv[<span class="number">1</span>:]:</div><div class="line">    outfile = os.path.splitext(infile)[<span class="number">0</span>] + <span class="string">".thumbnail"</span> <span class="comment"># 缩略图文件名+后缀</span></div><div class="line">    <span class="keyword">if</span> infile != outfile:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            im   = Image.open(infile) <span class="comment"># 打开图像</span></div><div class="line">            x, y = im.size  <span class="comment"># 获取原图像的大小（width、height）</span></div><div class="line">            im.thumbnail((x//<span class="number">2</span>, y//<span class="number">2</span>)) <span class="comment"># 缩略图大小</span></div><div class="line">            im.save(outfile, <span class="string">"JPEG"</span>) <span class="comment"># 保存为 JPEG 格式</span></div><div class="line">        <span class="keyword">except</span> IOError:</div><div class="line">            <span class="keyword">print</span> <span class="string">"cannot create thumbnail for"</span>, infile</div></pre></td></tr></table></figure><p><strong>注意</strong>：Pillow库不会直接解码或者加载图像栅格数据。当你打开一个文件，只会读取文件头信息用来确定格式，颜色模式，大小等等，文件的剩余部分不会主动处理。这意味着打开一个图像文件的操作十分快速，跟图像大小和压缩方式无关。</p><h3 id="图像的剪切、粘贴与合并操作"><a href="#图像的剪切、粘贴与合并操作" class="headerlink" title="图像的剪切、粘贴与合并操作"></a>图像的剪切、粘贴与合并操作</h3><p>Image 类包含很多操作图像区域的方法。</p><h4 id="裁剪子矩形"><a href="#裁剪子矩形" class="headerlink" title="裁剪子矩形"></a>裁剪子矩形</h4><p><code>crop()</code> 方法可以从图像中提取一个子矩形选区，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">im = Image.open(<span class="string">"avatar.jpeg"</span>)</div><div class="line">box = (<span class="number">100</span>,<span class="number">100</span>,<span class="number">300</span>,<span class="number">300</span>)</div><div class="line">region = im.crop(box)</div></pre></td></tr></table></figure><p>矩形选区区域由一个4元元组决定，元组信息表示 <code>(左,上,右,下)</code> 的坐标。Pillow库以图像左上角为坐标原点 <code>(0,0)</code>，单位是 <code>px</code> 。<br>因此，上述代码是复制了一个 200x200 pixels 的矩形选区。</p><h4 id="处理子图，粘贴回原图"><a href="#处理子图，粘贴回原图" class="headerlink" title="处理子图，粘贴回原图"></a>处理子图，粘贴回原图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">region = region.transpose(Image.ROTATE_180)   <span class="comment"># 旋转180°</span></div><div class="line">im.paste(region, box)</div></pre></td></tr></table></figure><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-08-18-a1.jpg" alt="a1"></p><p><code>transpose()</code> 方法可以将图片左右颠倒、上下颠倒、旋转 90°、旋转 180° 或旋转 270°。<code>paste()</code> 方法则可以将一个 Image 实例粘贴到另一个 Image 实例上。</p><p><strong>注意</strong>：当你粘贴矩形选区的时候必须保证尺寸一致。此外，矩形选区不能在图像外。然而你不必保证矩形选区和原图的颜色模式一致，如果不一致，目标图像会在保存的时候自动进行转换。</p><p>例子（扩展实例）：翻转图像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">roll</span><span class="params">(image, delta)</span>:</span></div><div class="line">    <span class="string">"Roll an image sideways"</span></div><div class="line"></div><div class="line">    xsize, ysize = image.size</div><div class="line"></div><div class="line">    delta = delta % xsize  <span class="comment"># 翻卷多少像素</span></div><div class="line">    <span class="keyword">if</span> delta == <span class="number">0</span>: <span class="keyword">return</span> image   <span class="comment"># 不翻卷图形</span></div><div class="line"></div><div class="line">    part1 = image.crop((<span class="number">0</span>, <span class="number">0</span>, delta, ysize))  <span class="comment"># 左边矩形选区</span></div><div class="line">    part2 = image.crop((delta, <span class="number">0</span>, xsize, ysize))  <span class="comment"># 右边矩形选区</span></div><div class="line">    part1.load() </div><div class="line">    part2.load()</div><div class="line">    image.paste(part2, (<span class="number">0</span>, <span class="number">0</span>, xsize-delta, ysize)) <span class="comment"># 原右边图形贴到左边</span></div><div class="line">    image.paste(part1, (xsize-delta, <span class="number">0</span>, xsize, ysize))  <span class="comment"># 原左边图形贴到右边</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> image</div><div class="line"></div><div class="line"></div><div class="line">im = Image.open(<span class="string">'avatar.jpeg'</span>)</div><div class="line">print(im.size)   <span class="comment"># (356, 362)</span></div><div class="line"></div><div class="line">roll(im,<span class="number">100</span>).save(<span class="string">'avatar_roll.jpeg'</span>,<span class="string">'JPEG'</span>)</div></pre></td></tr></table></figure><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-08-21-t11.jpeg" alt="t11"><br><strong>要注意的是</strong>，当你使用 <code>crop()</code> 方法来修改图像文件的时候, <code>load()</code> 方法会首先被调用。这是由于修改是一个惰性操作。如果 <code>load()</code> 未被调用，那么在 <code>paste</code> 使用前都不会执行修改这个操作。这暗示着 <code>part1</code> 会在首次修改 <code>image</code> 的时候被修改。</p><h4 id="分离和合并颜色通道"><a href="#分离和合并颜色通道" class="headerlink" title="分离和合并颜色通道"></a>分离和合并颜色通道</h4><p>对于多通道图像，有时候处理时希望能够分别对每个通道处理，处理完成后重新合成多通道，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">r,g,b = im.split()</div><div class="line">im = Image.merge(<span class="string">'RGB'</span>,(r,g,b))</div></pre></td></tr></table></figure><p>对于 <code>split()</code> 函数，如果是单通道的，则返回其本身。否则，返回各个通道。</p><h3 id="几何变换"><a href="#几何变换" class="headerlink" title="几何变换"></a>几何变换</h3><p><code>Image</code> 类包含了 <code>resize()</code> 和 <code>rotate</code> 方法来变换图像。前者需要传入一个表示新大小的元组，后者需要传入旋转的角度。</p><h4 id="简单的几何变换"><a href="#简单的几何变换" class="headerlink" title="简单的几何变换"></a>简单的几何变换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">out = im.resize((<span class="number">128</span>, <span class="number">128</span>))</div><div class="line">out = im.rotate(<span class="number">45</span>) <span class="comment"># 顺时针角度表示</span></div></pre></td></tr></table></figure><p>要想以90°旋转图像，可以使用 <code>rotate</code> 方法，也可以使用 <code>transpose()</code> 方法，后者能水平或垂直翻转图像。</p><h4 id="旋转图像"><a href="#旋转图像" class="headerlink" title="旋转图像"></a>旋转图像</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">out = im.transpose(Image.FLIP_LEFT_RIGHT) <span class="comment"># 左右颠倒</span></div><div class="line">out = im.transpose(Image.FLIP_TOP_BOTTOM) <span class="comment"># 上下颠倒</span></div><div class="line">out = im.transpose(Image.ROTATE_90)  <span class="comment"># 旋转90°</span></div><div class="line">out = im.transpose(Image.ROTATE_180)  <span class="comment"># 旋转180°</span></div><div class="line">out = im.transpose(Image.ROTATE_270)  <span class="comment"># 旋转270°</span></div></pre></td></tr></table></figure><p>更通用的图像变换方法可以使用 <a href="http://pillow-zh-cn.readthedocs.io/zh_CN/latest/reference/Image.html#PIL.Image.Image.transform" target="_blank" rel="external">transform()</a></p><h2 id="ImageDraw模块"><a href="#ImageDraw模块" class="headerlink" title="ImageDraw模块"></a>ImageDraw模块</h2><p>ImageDraw 模块提供了 <code>Draw</code> 类，它能在 <code>Image</code> 实例上进行简单的2D绘画。你可以使用这个模块来创建新图像或者修饰现有图像。</p><p>有关PIL的更高级绘图库，可以参考 <a href="http://effbot.org/zone/aggdraw-index.htm" target="_blank" rel="external">aggdraw模块</a></p><h3 id="创建-Draw-类的实例"><a href="#创建-Draw-类的实例" class="headerlink" title="创建 Draw 类的实例"></a>创建 Draw 类的实例</h3><p>要在 <code>Image</code> 实例上绘制新的图样，首先要创建一个 <code>Draw</code> 类的实例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image,ImageDraw</div><div class="line">im = Image.open(<span class="string">'avatar.jpeg'</span>)</div><div class="line">drawAvatar = ImageDraw.Draw(im)</div></pre></td></tr></table></figure><h3 id="基本绘画操作"><a href="#基本绘画操作" class="headerlink" title="基本绘画操作"></a>基本绘画操作</h3><p>这里粗略介绍下 <code>Draw</code> 类中的基本绘画操作函数(英文都是函数名)：</p><ul><li>弦/弧/扇形: chord / arc / pieslice</li><li>椭圆: ellipse</li><li>线段/多段线: line</li><li>点: point</li><li>多边形: polygon</li><li>矩形: rectangle</li><li>文字: text</li><li>文字大小: textsize</li></ul><p>详细的使用说明，请看官方文档：<a href="https://pillow.readthedocs.io/en/4.2.x/reference/ImageDraw.html#functions" target="_blank" rel="external">Draw类的各函数使用说明</a></p><h3 id="画直线"><a href="#画直线" class="headerlink" title="画直线"></a>画直线</h3><p>为熟悉 <code>Draw</code> 类的函数的使用，下面以画几条线为例来说明。</p><p><code>Draw</code> 类提供了 <code>line(xy,options)</code> 函数绘制直线。<br>其中 <code>xy</code> 表示坐标列表，它可以是任何包含2元组[(x,y),…]或者数字[x,y,…]的序列对象，至少包含两个坐标：</p><ul><li>[(x1, y1), (x2, y2), …] ：包含若干个元组的列表</li><li>[x1, y1, x2, y2, …] ：按照顺序包含坐标信息的列表</li><li>[x1, y1, (x2, y2), …] ：以上两种情况的混合</li><li>((x1, y1), (x2, y2), …) ：包含若干个元组的元组</li><li>(x1, y1, x2, y2, …) ：按照顺序包含坐标信息的元组</li><li>(x1, y1, (x2, y2), …) ：以上两种情况的混合</li></ul><p><code>options</code> 可用的选项：</p><ul><li>fill = (R,G,B) ：指定线条颜色</li><li>width = integer ：指定线条宽度，单位是px</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image,ImageDraw</div><div class="line">im = Image.open(<span class="string">'avatar.jpeg'</span>)</div><div class="line">drawAvatar = ImageDraw.Draw(im)</div><div class="line"></div><div class="line">xSize,ySize = im.size</div><div class="line"></div><div class="line"><span class="comment"># 三等分位置</span></div><div class="line">drawAvatar.line([<span class="number">0</span>, <span class="number">0.33</span> * ySize, xSize, <span class="number">0.33</span> * ySize],\</div><div class="line">    fill = (<span class="number">255</span>, <span class="number">100</span>, <span class="number">0</span>), width = <span class="number">3</span>)</div><div class="line"><span class="comment"># 左下角到中心点，右下角到中心点</span></div><div class="line">drawAvatar.line([(<span class="number">0</span>, ySize), (<span class="number">0.5</span> * xSize, <span class="number">0.5</span> * ySize), (xSize, ySize)],\</div><div class="line">    fill = (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), width = <span class="number">3</span>)</div><div class="line"></div><div class="line">im.save(<span class="string">'avatar_line.jpeg'</span>)</div></pre></td></tr></table></figure><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-08-21-t22.jpeg" alt="t22"><br>这里边，我们画了一条平行线和两条短线组成的折线（虽然看着有点像喷鼻血 ORZ ）。</p><h3 id="画弧线"><a href="#画弧线" class="headerlink" title="画弧线"></a>画弧线</h3><p><code>Draw</code> 类也提供了 <code>arc(xy, start, end, options)</code> 函数来绘制弧线。</p><p><code>xy</code> 是个长度为4的列表，用来表示一个 bounding box(边界区域)。如[x0, y0, x1, y1]，分别表示 弧线最左侧距离左边、弧线最顶点距离上边、弧线最右侧距离左边、弧线最低点距离上边的距离。<br><code>start</code> 和 <code>end</code> 则是弧的起止角度，单位是 °。其中水平向右的方向为 0°，竖直向下的方向为 90°，水平向左的方向为 180°，竖直向上的方向为 270°。<br><code>options</code> 中可用选项：</p><ul><li>fill = (R, G, B) ：指定线条颜色</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image,ImageDraw</div><div class="line">im = Image.open(<span class="string">'avatar.jpeg'</span>)</div><div class="line">drawAvatar = ImageDraw.Draw(im)</div><div class="line"></div><div class="line">drawAvatar.arc([<span class="number">10</span>,<span class="number">20</span>,<span class="number">100</span>,<span class="number">300</span>],<span class="number">0</span>,<span class="number">270</span>,fill=(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>))</div><div class="line"></div><div class="line">im.save(<span class="string">'avatar_arc.jpeg'</span>)</div></pre></td></tr></table></figure><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-08-22-avatar_arc.jpeg" alt="avatar_arc"><br><code>arc</code> 方法将在内切于 bounding box(边界区域) 的椭圆中，按照给定的起止角度切下一段弧，并绘制于 <code>Image</code> 实例之上。</p><h3 id="在图片上写字"><a href="#在图片上写字" class="headerlink" title="在图片上写字"></a>在图片上写字</h3><p><code>Draw</code> 类提供了 <code>text(xy, text, options)</code> 函数，可以在 <code>Image</code> 实例上写字。</p><p><code>xy</code> 指定的是文本左上角的顶点，而不是文本中心。<br><code>options</code> 中可用选项：</p><ul><li>fill = (R, G, B) ：指定线条颜色</li><li>font = ImageFont instance ：指定字体，接受一个 ImageFont 的实例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image,ImageDraw</div><div class="line"></div><div class="line">im = Image.open(<span class="string">'avatar.jpeg'</span>)</div><div class="line">drawAvatar = ImageDraw.Draw(im)</div><div class="line"></div><div class="line">xSize,ySize = im.size</div><div class="line"></div><div class="line">drawAvatar.text([<span class="number">0.95</span> * xSize,<span class="number">0.05</span> * ySize], <span class="string">"6"</span>, fill = (<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>))</div><div class="line"></div><div class="line">im.save(<span class="string">'avatar_text.jpeg'</span>)</div></pre></td></tr></table></figure><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-08-22-avatar_text.jpeg" alt="avatar_text"></p><p>这里不指定 <code>font</code> ，表示使用 <code>ImageDraw</code> 的默认字体。可以发现，默认字体太小了，为了调整字体，需要借助 <code>ImageFont</code> 模块。</p><h2 id="ImageFont模块"><a href="#ImageFont模块" class="headerlink" title="ImageFont模块"></a>ImageFont模块</h2><p><code>PIL</code> 可以使用 <code>bitmap</code> 字体或者 <code>OpenType/TrueType</code> 字体。<br><code>Bitmap</code> 字体被存储在 PIL 自己的格式中，一般包含两个文件：</p><ul><li>后缀是 <code>.pil</code> ，包含字体的矩阵；</li><li>后缀是 <code>.pbm</code>，包含栅格数据。</li></ul><p><code>ImageFont</code> 模块中，可以使用 <code>load()</code> 函数加载一个 <code>bitmap</code> 字体，使用 <code>truetype(fontfile, fontsize)</code> 函数加载一个 <code>OpenType/TrueType</code> 字体(注意，这个函数需要额外安装<code>_imageingft</code>模块)。</p><p><code>OpenType</code> 标准定义了 <code>OpenType</code> 文件名称的后缀名：</p><ul><li>包含TureType字体的OpenType文件后缀名为 <code>.ttf</code></li><li>包含PostScript字体的文件后缀名为 <code>.OTF</code></li><li>包含一系列TrueType字体的字体包文件，那么后缀名为 <code>.TTC</code></li></ul><p>例子：将你的 QQ 头像（或者微博头像）右上角加上红色的数字，类似于微信未读信息数量那种提示效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image,ImageDraw,ImageFont</div><div class="line"></div><div class="line"><span class="comment"># 需要传入参数：字符串，字体颜色</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawText</span><span class="params">(text,color,imageName,new_imageName)</span>:</span></div><div class="line">    avatar = Image.open(imageName)</div><div class="line">    drawAvatar = ImageDraw.Draw(avatar)</div><div class="line">    xSize,ySize = avatar.size</div><div class="line"></div><div class="line">    <span class="comment"># 指定字体大小</span></div><div class="line">    fontSize = min(xSize,ySize) // <span class="number">12</span></div><div class="line"></div><div class="line">    <span class="comment"># 引用本地TrueType格式的字体文件，创建一个ImageFont实例</span></div><div class="line">    myFont = ImageFont.truetype(<span class="string">'/Library/Fonts/Arial.ttf'</span>,fontSize)</div><div class="line"></div><div class="line">    <span class="comment"># 在图片上写字，y轴位置根据字体大小变化，fill参数指定字的颜色，font参数必须是ImageFont实例的值</span></div><div class="line">    drawAvatar.text([<span class="number">0.9</span> * xSize, <span class="number">0.1</span> * ySize - fontSize], text,fill = color, font = myFont)</div><div class="line"></div><div class="line">    avatar.save(new_imageName)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    color = (<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>)</div><div class="line">    drawText(<span class="string">'9'</span>,color,<span class="string">'avatar.jpeg'</span>,<span class="string">'avatar_new.jpeg'</span>)</div></pre></td></tr></table></figure><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-08-22-avatar_new1.jpeg" alt="avatar_new1"></p><h2 id="ImageFilter模块"><a href="#ImageFilter模块" class="headerlink" title="ImageFilter模块"></a>ImageFilter模块</h2><p><code>ImageFilter</code> 是 PIL 的滤镜模块，提供了滤波器的相关定义，这些滤波器主要用于 <code>Image</code> 类的 <code>filter()</code> 方法。</p><p>滤镜名称和含义说明：</p><ul><li>ImageFilter.BLUR ：模糊滤镜</li><li>ImageFilter.CONTOUR ：轮廓</li><li>ImageFilter.EDGE_ENHANCE ：边界加强</li><li>ImageFilter.EDGE_ENHANCE_MORE ：边界加强(阀值更大)</li><li>ImageFilter.EMBOSS ：浮雕滤镜</li><li>ImageFilter.FIND_EDGES ：边界滤镜</li><li>ImageFilter.SMOOTH ：平滑滤镜</li><li>ImageFilter.SMOOTH_MORE ：平滑滤镜(阀值更大)</li><li>ImageFilter.SHARPEN ：锐化滤镜</li></ul><p>例子：生成字母验证码图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># _*_ coding:utf-8 _*_</div><div class="line"></div><div class="line">from PIL import Image, ImageDraw, ImageFont, ImageFilter</div><div class="line">import random</div><div class="line"></div><div class="line"># 随机字母（大写）:</div><div class="line">def rndChar():</div><div class="line">    return chr(random.randint(65, 90))</div><div class="line"></div><div class="line"># 随机颜色1:</div><div class="line">def rndColor():</div><div class="line">    return (random.randint(64, 255), random.randint(64, 255), random.randint(64, 255))</div><div class="line"></div><div class="line"># 随机颜色2:</div><div class="line">def rndColor2():</div><div class="line">    return (random.randint(32, 127), random.randint(32, 127), random.randint(32, 127))</div><div class="line"></div><div class="line"># 图片大小：240 x 60</div><div class="line">width = 60 * 4</div><div class="line">height = 60</div><div class="line"></div><div class="line"># 创建Image对象，背景为白色</div><div class="line">image = Image.new(&apos;RGB&apos;, (width, height), (255, 255, 255))</div><div class="line"># 创建Draw对象</div><div class="line">draw = ImageDraw.Draw(image)</div><div class="line"># 创建Font对象，字体为“Arial.ttf”</div><div class="line">font = ImageFont.truetype(&apos;Arial.ttf&apos;, 36)</div><div class="line"></div><div class="line"># 用随机颜色填充每个像素</div><div class="line">for x in range(width):</div><div class="line">    for y in range(height):</div><div class="line">        draw.point((x, y), fill=rndColor())</div><div class="line">        </div><div class="line"># 输出4个字母，字母颜色随机</div><div class="line">for t in range(4):</div><div class="line">    draw.text((60 * t + 10, 10), rndChar(), font=font, fill=rndColor2())</div><div class="line">    </div><div class="line"># 对图像模糊</div><div class="line">image = image.filter(ImageFilter.BLUR)</div><div class="line"></div><div class="line">image.save(&apos;code.jpg&apos;, &apos;jpeg&apos;)</div></pre></td></tr></table></figure><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-08-22-code.jpg" alt="code"><br>用随机颜色填充图像的每个像素，再画上字母(颜色随机)，最后对图像进行模糊。</p><h2 id="强大图像处理库介绍"><a href="#强大图像处理库介绍" class="headerlink" title="强大图像处理库介绍"></a>强大图像处理库介绍</h2><p>Python还有个更强大的第三方图像处理库：OpenCV</p><p><code>OpenCV</code> 全称: <code>Open Source Computer Vision Library</code>，是一个开源的跨平台计算机视觉库，<a href="https://github.com/opencv/opencv" target="_blank" rel="external">GitHub地址</a>。<code>OpecCV</code> 主要用C/C++语言编写，也提供了Python、Java等语言的接口。</p><p>网上有几个写得挺不错的教程：<br><a href="https://www.kancloud.cn/aollo/aolloopencv/269602" target="_blank" rel="external">OpenCV-Python中文教程</a><br><a href="https://segmentfault.com/a/1190000003742481" target="_blank" rel="external">Python-OpenCV 图像与视频处理</a><br><a href="https://zhuanlan.zhihu.com/p/24425116" target="_blank" rel="external">给深度学习入门者的Python快速教程 - 番外篇之Python-OpenCV</a></p><h2 id="全文参考文档"><a href="#全文参考文档" class="headerlink" title="全文参考文档"></a>全文参考文档</h2><p><a href="https://liam0205.me/2015/04/22/pil-tutorial-basic-usage/" target="_blank" rel="external">PIL 简明教程 - 基本用法</a><br><a href="https://pillow.readthedocs.io/en/4.2.x/index.html" target="_blank" rel="external">Pillow官方文档</a><br><a href="http://python.jobbole.com/84956/" target="_blank" rel="external">Python图像处理库Pillow入门</a><br><a href="https://liam0205.me/2015/05/05/pil-tutorial-imagedraw-and-imagefont/" target="_blank" rel="external">PIL 简明教程 - 在现有的图片上涂涂改改</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PIL(Python Imaging Library) 是pyhton常用的图像处理库，&lt;a href=&quot;http://pythonware.com/products/pil/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;官方网站&lt;/strong&gt;&lt;/a&gt;，最新版本是 &lt;code&gt;1.1.7&lt;/code&gt; ，于2009年9月发布，支持Python &lt;code&gt;1.5.2 - 2.7&lt;/code&gt;。&lt;br&gt;PIL项目似乎已经停止开发了，&lt;a href=&quot;https://web.archive.org/web/20150315041249/http://hg.effbot.org/pil-2009-raclette&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;PIL仓库&lt;/strong&gt;&lt;/a&gt; 最后一次提交是2011年。&lt;br&gt;python 3.x 版本是无法使用原PIL库的，得使用Pillow库。&lt;/p&gt;
&lt;p&gt;Pillow 库则是 PIL 的一个友好Fork，维护和开发活跃，Pillow 兼容 PIL 的绝大多数语法，推荐使用。&lt;br&gt;Pillow 库提供了广泛的文件格式支持，强大的图像处理能力，主要包括图像储存、图像显示、格式转换以及基本的图像处理操作等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/python-pillow/Pillow&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Pillow项目仓库&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://python-pillow.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Pillow官网&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://pillow.readthedocs.io/en/latest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Pillow文档&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python时间模块</title>
    <link href="http://yoursite.com/2017/Python-time-module.html"/>
    <id>http://yoursite.com/2017/Python-time-module.html</id>
    <published>2017-08-09T10:21:35.000Z</published>
    <updated>2017-08-14T03:13:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>python关于时间和日期的处理模块，常见的有以下几个：</p><blockquote><p>内置模块：time、datetime、calendar<br>第三方模块：pytz</p></blockquote><p>time模块基于C语言的库函数(library functions)，提供的接口与C标准库 time.h 基本一致。<br>datetime模块是基于time模块扩展的，提供的接口则更直观、更容易调用。datetime模块有datetime.date(日期)、datetime.time(时间)、datetime.datetime(日期时间)三个类</p><a id="more"></a><h2 id="time模块"><a href="#time模块" class="headerlink" title="time模块"></a>time模块</h2><h3 id="时间戳、元组、字符串之间相互转换"><a href="#时间戳、元组、字符串之间相互转换" class="headerlink" title="时间戳、元组、字符串之间相互转换"></a>时间戳、元组、字符串之间相互转换</h3><p>在time模块中，时间日期有三种表现形式：</p><ul><li>时间戳：一般指Unix时间戳，从 1970/1/1 0:0:0 到现在的秒数</li><li>元组形式(struct_time)：本地时间、UTC时间</li><li>格式化字符串形式</li></ul><p>三种表现形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="comment"># 时间戳</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>time.time()</div><div class="line"><span class="number">1502333067.252786</span></div><div class="line"></div><div class="line"><span class="comment"># 元组形式，分别为本地时间和UTC时间</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>time.localtime()</div><div class="line">time.struct_time(tm_year=<span class="number">2017</span>, tm_mon=<span class="number">8</span>, tm_mday=<span class="number">10</span>, tm_hour=<span class="number">10</span>, tm_min=<span class="number">45</span>, tm_sec=<span class="number">54</span>, tm_wday=<span class="number">3</span>, tm_yday=<span class="number">222</span>, tm_isdst=<span class="number">0</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>time.gmtime()</div><div class="line">time.struct_time(tm_year=<span class="number">2017</span>, tm_mon=<span class="number">8</span>, tm_mday=<span class="number">10</span>, tm_hour=<span class="number">2</span>, tm_min=<span class="number">45</span>, tm_sec=<span class="number">59</span>, tm_wday=<span class="number">3</span>, tm_yday=<span class="number">222</span>, tm_isdst=<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment"># 格式化字符串</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</div><div class="line"><span class="string">'2017-08-10 10:46:43'</span></div></pre></td></tr></table></figure><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-08-10-15023338195274.png" alt=""></p><p>如上图，三种方式相互转换(不能时间戳转格式化字符串，或者格式化字符串转时间戳，要通过中间元组形式转换)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> time</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>timestamp = time.time()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(timestamp)</div><div class="line"><span class="number">1502679390.184194</span></div><div class="line"></div><div class="line"><span class="comment"># 时间戳 转 元组形式</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>time.localtime(timestamp)</div><div class="line">time.struct_time(tm_year=<span class="number">2017</span>, tm_mon=<span class="number">8</span>, tm_mday=<span class="number">14</span>, tm_hour=<span class="number">10</span>, tm_min=<span class="number">56</span>, tm_sec=<span class="number">30</span>, tm_wday=<span class="number">0</span>, tm_yday=<span class="number">226</span>, tm_isdst=<span class="number">0</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>time.gmtime(timestamp)</div><div class="line">time.struct_time(tm_year=<span class="number">2017</span>, tm_mon=<span class="number">8</span>, tm_mday=<span class="number">14</span>, tm_hour=<span class="number">2</span>, tm_min=<span class="number">56</span>, tm_sec=<span class="number">30</span>, tm_wday=<span class="number">0</span>, tm_yday=<span class="number">226</span>, tm_isdst=<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment"># 元组形式 转 时间戳</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>time.mktime(time.localtime(timestamp))</div><div class="line"><span class="number">1502679390.0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>time.mktime(time.gmtime(timestamp))</div><div class="line"><span class="number">1502650590.0</span></div><div class="line"></div><div class="line"><span class="comment"># 元组形式 转 字符串形式</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>,time.localtime(timestamp))</div><div class="line"><span class="string">'2017-08-14 10:56:30'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>,time.gmtime(timestamp))</div><div class="line"><span class="string">'2017-08-14 02:56:30'</span></div><div class="line"></div><div class="line"><span class="comment"># 字符串形式 转 元组形式</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>time.strptime(<span class="string">'2016-11-25'</span>, <span class="string">"%Y-%m-%d"</span>)</div><div class="line">time.struct_time(tm_year=<span class="number">2016</span>, tm_mon=<span class="number">11</span>, tm_mday=<span class="number">25</span>, tm_hour=<span class="number">0</span>, tm_min=<span class="number">0</span>, tm_sec=<span class="number">0</span>, tm_wday=<span class="number">4</span>, tm_yday=<span class="number">330</span>, tm_isdst=<span class="number">-1</span>)</div></pre></td></tr></table></figure><h2 id="datetime模块"><a href="#datetime模块" class="headerlink" title="datetime模块"></a>datetime模块</h2><h3 id="时间戳、datetime类型、字符串之间相互转换"><a href="#时间戳、datetime类型、字符串之间相互转换" class="headerlink" title="时间戳、datetime类型、字符串之间相互转换"></a>时间戳、datetime类型、字符串之间相互转换</h3><p>datetime模块中包含4个主要的类：</p><ul><li>datetime.time：时间类，只包含时、分、秒、微秒等时间信息。</li><li>datetime.date：日期类，只包含年、月、日、星期等日期信息。</li><li>datetime.datetime：日期时间类，包含以上两者的全部信息。</li><li>datetime.timedelta：时间日期差值类，用来表示两个datetime之间的差值。</li></ul><p>在datetime模块中，时间日期主要表现为三种常用形式：</p><ul><li>时间戳：一般指Unix时间戳，从 <code>1970-1-1 0:0:0</code> 到现在的秒数</li><li>datetime类型：本地时间、UTC时间</li><li>格式化字符串形式</li></ul><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-08-10-15023354142691.jpg" alt=""><br>如上图，datetime模块的三种形式相互转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="comment"># 获取datetime.datetime类型的本地时间和UTC时间</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>datetime_local = datetime.now()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>datetime_utc = datetime.utcnow()</div><div class="line"></div><div class="line"><span class="comment"># datetime类型 转 时间戳</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>datetime_local.timestamp()</div><div class="line"><span class="number">1502336341.267918</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>datetime_utc.timestamp()</div><div class="line"><span class="number">1502307553.165676</span></div><div class="line"></div><div class="line"><span class="comment"># 时间戳 转 datetime类型 （本地时间和UTC时间）</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.fromtimestamp(time.time())</div><div class="line">datetime.datetime(<span class="number">2017</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">46</span>, <span class="number">13</span>, <span class="number">106668</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.utcfromtimestamp(time.time())</div><div class="line">datetime.datetime(<span class="number">2017</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">46</span>, <span class="number">23</span>, <span class="number">873827</span>)</div><div class="line"></div><div class="line"><span class="comment"># datetime类型 转 字符串形式</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</div><div class="line"><span class="string">'2017-08-10 14:49:20'</span></div><div class="line"></div><div class="line"><span class="comment"># 字符串形式 转 datetime类型</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.strptime(<span class="string">"2017-8-10 14:47:12"</span>,<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</div><div class="line">datetime.datetime(<span class="number">2017</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">47</span>, <span class="number">12</span>)</div></pre></td></tr></table></figure><p>当然，也可以将 datetime类型 转为 元组形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># datetime类型 转 元组形式 （本地时间和UTC时间）</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>datetime_local.timetuple()</div><div class="line">time.struct_time(tm_year=<span class="number">2017</span>, tm_mon=<span class="number">8</span>, tm_mday=<span class="number">10</span>, tm_hour=<span class="number">11</span>, tm_min=<span class="number">39</span>, tm_sec=<span class="number">1</span>, tm_wday=<span class="number">3</span>, tm_yday=<span class="number">222</span>, tm_isdst=<span class="number">-1</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>datetime_utc.utctimetuple()</div><div class="line">time.struct_time(tm_year=<span class="number">2017</span>, tm_mon=<span class="number">8</span>, tm_mday=<span class="number">10</span>, tm_hour=<span class="number">3</span>, tm_min=<span class="number">39</span>, tm_sec=<span class="number">13</span>, tm_wday=<span class="number">3</span>, tm_yday=<span class="number">222</span>, tm_isdst=<span class="number">0</span>)</div></pre></td></tr></table></figure><h3 id="timedelta类"><a href="#timedelta类" class="headerlink" title="timedelta类"></a>timedelta类</h3><p>datetime模块中有个timedelta类，timedelta对象代表两个时间之间的时间差，两个date 或 datetime 类型对象相减时，可以返回一个timedelta对象。</p><p>原型如下：</p><blockquote><p>class datetime.timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)<br>所有参数可选，默认都是0，参数的值可以是整数、浮点数、正数或者负数。</p></blockquote><p>例子：计算昨天的日期时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from datetime import timedelta</div><div class="line">&gt;&gt;&gt; now = datetime.now()</div><div class="line">&gt;&gt;&gt; print(now)</div><div class="line">2017-08-14 11:11:19.815021</div><div class="line">&gt;&gt;&gt; now</div><div class="line">datetime.datetime(2017, 8, 14, 11, 11, 19, 815021)</div><div class="line">&gt;&gt;&gt; now - timedelta(days=1)</div><div class="line">datetime.datetime(2017, 8, 13, 11, 11, 19, 815021)</div></pre></td></tr></table></figure><h3 id="timezone类"><a href="#timezone类" class="headerlink" title="timezone类"></a>timezone类</h3><p>datetime模块中有个timezone类，是tzinfo的子类。timezone类，其每个实例表示由与UTC的固定偏移量定义的时区。</p><blockquote><p>class datetime.timezone(offset, name=None)</p></blockquote><ul><li>offset 参数必须指定为表示本地时间和UTC之间差异的 timedelta 对象。它必须严格地在 -timedelta(hours=24) 和 timedelta(hours=24) 之间，并且表示整数分钟，否则产生 ValueError。</li><li>name 参数是可选的。如果指定，它必须是将被用作 datetime.tzname() 方法返回值的字符串。</li></ul><p>Python3.2开始才提供了datetime.timezone类。</p><h4 id="本地时间转UTC时间"><a href="#本地时间转UTC时间" class="headerlink" title="本地时间转UTC时间"></a>本地时间转UTC时间</h4><p>本地时间是指系统设定时区的时间，例如北京时间是UTC+8:00时区的时间，而UTC时间指UTC+0:00时区的时间。</p><p>一个datetime类型有一个时区属性tzinfo，但是默认为None，所以无法区分这个datetime到底是哪个时区，除非强行给datetime设置一个时区：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timedelta,timezone</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>tz_utc_8 = timezone(timedelta(hours=<span class="number">8</span>))  <span class="comment"># 创建时区UTC+8:00</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>now = datetime.now()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>now</div><div class="line">datetime.datetime(<span class="number">2017</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">21</span>, <span class="number">35</span>, <span class="number">983594</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dt = now.replace(tzinfo=tz_utc_8)  <span class="comment"># 强制设置为UTC+8:00时区</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dt</div><div class="line">datetime.datetime(<span class="number">2017</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">21</span>, <span class="number">35</span>, <span class="number">983594</span>, tzinfo=datetime.timezone(datetime.timedelta(<span class="number">0</span>, <span class="number">28800</span>)))</div></pre></td></tr></table></figure><p>例子：获取用户输入的日期和时间，如<code>2017-8-10 15:02:11</code>，以及一个时区信息<code>UTC+6:00</code>，均是字符串类型，编写一个函数将其转换为timestamp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timezone, timedelta</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_timestamp</span><span class="params">(dt_str, tz_str)</span>:</span></div><div class="line">    date = datetime.strptime(dt_str, <span class="string">'%Y-%m-%d %H:%M:%S'</span>)  <span class="comment"># 字符串 转 datetime类型</span></div><div class="line">    tz_int = int(re.search(<span class="string">'(\-|\+)\d+'</span>, tz_str).group())  <span class="comment"># 正则匹配，获取时区号(+或-)</span></div><div class="line">    tz_utc_x = timezone(timedelta(hours=tz_int)) <span class="comment"># 时区变量</span></div><div class="line">    date_utc = date.replace(tzinfo=tz_utc_x) <span class="comment"># 强制设置时区</span></div><div class="line">    tstamp = date_utc.timestamp()  <span class="comment"># datetime类型 转 时间戳</span></div><div class="line">    <span class="keyword">return</span> tstamp</div><div class="line"></div><div class="line"><span class="comment"># 测试</span></div><div class="line">t1 = to_timestamp(<span class="string">'2015-6-1 08:10:30'</span>, <span class="string">'UTC+7:00'</span>)</div><div class="line"><span class="keyword">assert</span> t1 == <span class="number">1433121030.0</span>, t1</div></pre></td></tr></table></figure><h2 id="time模块和datetime模块之间相互转换"><a href="#time模块和datetime模块之间相互转换" class="headerlink" title="time模块和datetime模块之间相互转换"></a>time模块和datetime模块之间相互转换</h2><p>time 转 datetime</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; timestamp = time.time()</div><div class="line">&gt;&gt;&gt; datetime.fromtimestamp(timestamp)</div><div class="line">datetime.datetime(2017, 8, 10, 14, 57, 47, 666371)</div></pre></td></tr></table></figure><p>datetime 转 time：先将datetime类型转为元组形式，再转为时间戳</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; datetime_local = datetime.now()</div><div class="line">&gt;&gt;&gt; time.mktime(datetime_local.timetuple())</div><div class="line">1502348313.0</div></pre></td></tr></table></figure><h2 id="pytz模块"><a href="#pytz模块" class="headerlink" title="pytz模块"></a>pytz模块</h2><p>pytz模块，使用<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" target="_blank" rel="external">Olson TZ Database</a>解决了跨平台的时区计算一致性问题，解决了夏令时带来的计算问题。</p><p>参考资料：<br><a href="https://zhuanlan.zhihu.com/p/23679915" target="_blank" rel="external">你真的了解Python中的日期时间处理吗？</a><br><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431937554888869fb52b812243dda6103214cd61d0c2000" target="_blank" rel="external">廖雪峰python教程-datetime模块</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python关于时间和日期的处理模块，常见的有以下几个：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;内置模块：time、datetime、calendar&lt;br&gt;第三方模块：pytz&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;time模块基于C语言的库函数(library functions)，提供的接口与C标准库 time.h 基本一致。&lt;br&gt;datetime模块是基于time模块扩展的，提供的接口则更直观、更容易调用。datetime模块有datetime.date(日期)、datetime.time(时间)、datetime.datetime(日期时间)三个类&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>换源总集</title>
    <link href="http://yoursite.com/2017/Change-source-collection.html"/>
    <id>http://yoursite.com/2017/Change-source-collection.html</id>
    <published>2017-08-08T09:46:26.000Z</published>
    <updated>2017-09-01T02:28:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多国外镜像，在国内访问会很慢。遇到这种情况，可以通过两种方法解决：</p><blockquote><p>使用代理<br>更换为国内源</p></blockquote><p>这里总结常用的换源和介绍国内较好的源。</p><a id="more"></a><h2 id="Pypi-换源"><a href="#Pypi-换源" class="headerlink" title="Pypi 换源"></a>Pypi 换源</h2><h3 id="mac系统"><a href="#mac系统" class="headerlink" title="mac系统"></a>mac系统</h3><p>要注意，mac在家目录中默认没有 <code>.pip</code> 目录，要自己创建<br>进入家目录，新建 <code>.pip</code> 目录，在该目录中新建一个文件 <code>pip.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cd ~</div><div class="line">$ mkdir .pip</div><div class="line">$ touch .pip/pip.conf</div></pre></td></tr></table></figure><p>编辑 <code>pip.conf</code> 配置文件，加入国内的pypi源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 阿里云的pypi源</span></div><div class="line">[global]</div><div class="line">index-url = http://mirrors.aliyun.com/pypi/simple/</div><div class="line"></div><div class="line">[install]</div><div class="line">trusted-host=mirrors.aliyun.com</div></pre></td></tr></table></figure><p>或者：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 豆瓣的pypi源</span></div><div class="line">[global]</div><div class="line">index-url = http://pypi.douban.com/simple</div><div class="line"></div><div class="line">[install]</div><div class="line">trusted-host=pypi.douban.com</div></pre></td></tr></table></figure><h2 id="Homebrew-换源"><a href="#Homebrew-换源" class="headerlink" title="Homebrew 换源"></a>Homebrew 换源</h2><p>Homebrew是一款自由及开放源代码的软件包管理系统，用以简化 Mac OS 系统上的软件安装过程。<br>Homebrew主要分两部分：git repo（位于GitHub）和 二进制bottles（位于bintray），这两者在国内访问都不太顺畅。可以替换成国内的镜像。</p><p><a href="https://lug.ustc.edu.cn/wiki/mirrors/help/brew.git" target="_blank" rel="external">USTC的官方文档</a></p><h3 id="替换和重置Homebrew默认源"><a href="#替换和重置Homebrew默认源" class="headerlink" title="替换和重置Homebrew默认源"></a>替换和重置Homebrew默认源</h3><p>这里使用中科大的镜像，速度蛮快的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 替换brew.git</span></div><div class="line">$ <span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></div><div class="line">$ git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/brew.git</div></pre></td></tr></table></figure><p>当中科大源失效或宕机时，可以切回官方源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 重置brew.git</div><div class="line">$ cd &quot;$(brew --repo)&quot;</div><div class="line">$ git remote set-url origin https://github.com/Homebrew/brew.git</div></pre></td></tr></table></figure><h3 id="替换和重置Homebrew-Bottles源"><a href="#替换和重置Homebrew-Bottles源" class="headerlink" title="替换和重置Homebrew Bottles源"></a>替换和重置Homebrew Bottles源</h3><p>Homebrew Bottles是Homebrew提供的二进制代码包。<br>对于bash用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ echo &apos;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&apos; &gt;&gt; ~/.bash_profile</div><div class="line">$ source ~/.bash_profile</div></pre></td></tr></table></figure><p>对于zsh用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ echo &apos;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&apos; &gt;&gt; ~/.zshrc</div><div class="line">$ source ~/.zshrc</div></pre></td></tr></table></figure><p>注释掉bash或zsh配置文件里的有关Homebrew Bottles即可恢复官方源。然后重读该配置文件使其生效。</p><h2 id="Docker换源"><a href="#Docker换源" class="headerlink" title="Docker换源"></a>Docker换源</h2><p>国内有3家的Docker镜像源蛮不错，速度挺快的：</p><ul><li>DaoCloud</li><li>USTC(中科大)</li><li>阿里云</li></ul><h3 id="DaoCloud的Docker加速器"><a href="#DaoCloud的Docker加速器" class="headerlink" title="DaoCloud的Docker加速器"></a>DaoCloud的Docker加速器</h3><p>DaoCloud加速器需要用户注册，每个用户每月限制10GB。注册登录后，访问<a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="external"><strong>配置Docker加速器</strong></a>，会介绍如何使用。</p><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-08-31-15041926638654.jpg" alt=""><br>红色涂改处的地址，会根据每个人ID不同而有不同。记得设置后，要重新启动docker服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># service docker restart</div></pre></td></tr></table></figure><p>注意，该Docker加速器对Docker版本有要求，需要 Docker 1.8 或更高版本才能使用。</p><h3 id="USTC的Docker镜像"><a href="#USTC的Docker镜像" class="headerlink" title="USTC的Docker镜像"></a>USTC的Docker镜像</h3><p>官方文档 <a href="https://lug.ustc.edu.cn/wiki/mirrors/help/docker" target="_blank" rel="external"><strong>Docker镜像使用帮助</strong></a> 里已写得很清楚，这里就不冗余的贴出来。<br>USTC的镜像源做的很好，速度很快，个人强烈推荐使用。</p><h3 id="阿里云的Docker加速器"><a href="#阿里云的Docker加速器" class="headerlink" title="阿里云的Docker加速器"></a>阿里云的Docker加速器</h3><p>阿里云的会繁琐点，不仅要注册为阿里云用户，还要加入<a href="https://dev.aliyun.com/search.html" target="_blank" rel="external">开发者平台</a>。<br>配置方法跟DaoCloud的类似，也是开通加速器后给一个URL，详情看：<a href="https://yq.aliyun.com/articles/29941" target="_blank" rel="external"><strong>Docker镜像加速器的配置</strong></a></p><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-08-31-15041942060010.jpg" alt=""><br>阿里云的Docker加速器，要求Docker版本 大于 1.10 。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多国外镜像，在国内访问会很慢。遇到这种情况，可以通过两种方法解决：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用代理&lt;br&gt;更换为国内源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里总结常用的换源和介绍国内较好的源。&lt;/p&gt;
    
    </summary>
    
      <category term="技术杂项" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="杂项" scheme="http://yoursite.com/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>Git常用操作</title>
    <link href="http://yoursite.com/2017/Git-common-operations.html"/>
    <id>http://yoursite.com/2017/Git-common-operations.html</id>
    <published>2017-07-26T03:22:04.000Z</published>
    <updated>2017-09-11T10:45:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理Git的常用命令，方便以后查找。</p><a id="more"></a><h3 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h3><p>Git的设置文件为 <code>.gitconfig</code> ，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><p>设置用户名称和邮箱地址，<code>--global</code> 表示全局设置，本机上所有的Git仓库通用该配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;[name]&quot;</div><div class="line">$ git config --global user.email &quot;[email address]&quot;</div></pre></td></tr></table></figure><p>查看配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看[仓库级|全局级|系统级]的 config</span></div><div class="line">$ git config [--<span class="built_in">local</span>|--global|--system] -l</div><div class="line"></div><div class="line"><span class="comment"># 查看当前生效的配置</span></div><div class="line">$ git config -l</div></pre></td></tr></table></figure><p>编辑配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看仓库级的config</span></div><div class="line">$ git config --<span class="built_in">local</span> -e</div><div class="line">$ git config -e </div><div class="line"></div><div class="line"><span class="comment"># 查看全局级的config</span></div><div class="line">$ git config --global -e</div><div class="line"></div><div class="line"><span class="comment"># 查看系统级的config</span></div><div class="line">$ git config --system -e</div></pre></td></tr></table></figure><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 添加指定文件到暂存区，可指定多个文件</span></div><div class="line">$ git add [file1] [dir/file2] ...</div><div class="line"></div><div class="line"><span class="comment"># 添加指定文件到暂存区，可指定通配符；如 *.txt，匹配所有txt文件</span></div><div class="line">$ git add [file-pattern]</div><div class="line"></div><div class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></div><div class="line">$ git add [dir]</div><div class="line"></div><div class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></div><div class="line">$ git add .</div></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 提交暂存区所有文件到仓库区，一定要记得添加提交信息(message)</span></div><div class="line">$ git commit -m [message]</div><div class="line"></div><div class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></div><div class="line">$ git commit [file1] [file2] ... -m [message]</div><div class="line"></div><div class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区 (省略 git add 那一步)</span></div><div class="line">$ git commit -a </div><div class="line"></div><div class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></div><div class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></div><div class="line">$ git commit --amend -m [message]</div><div class="line"></div><div class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></div><div class="line">$ git commit --amend [file1] [file2] ...</div></pre></td></tr></table></figure><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 删除工作区文件(已被追踪的文件)，并将这次删除放入暂存区</span></div><div class="line">$ git rm [file1] [file2] ...</div><div class="line"></div><div class="line"><span class="comment"># 停止追踪指定文件(在暂存区中删除)，但该文件会保留在工作区</span></div><div class="line">$ git rm --cached [file]</div><div class="line"></div><div class="line"><span class="comment"># 文件改名(工作区)，并将这个改名放入暂存区</span></div><div class="line">$ git mv [file-oldname] [file-newname]</div></pre></td></tr></table></figure><h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 检查当前文件状态</span></div><div class="line">$ git status</div><div class="line"></div><div class="line"><span class="comment"># 显示当前分支的版本历史(按提交时间排序)</span></div><div class="line">$ git <span class="built_in">log</span></div><div class="line"></div><div class="line"><span class="comment"># 简洁模式，每个提交只显示一行信息，包括 commit id（版本号）和 提交说明</span></div><div class="line">$ git <span class="built_in">log</span> --pretty=oneline</div><div class="line"></div><div class="line"><span class="comment"># 显示暂存区和工作区的差异</span></div><div class="line">$ git diff</div><div class="line"></div><div class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></div><div class="line">$ git diff --cached [file]</div><div class="line"></div><div class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></div><div class="line">$ git diff HEAD</div><div class="line"></div><div class="line"><span class="comment"># 显示两次提交之间的差异</span></div><div class="line">$ git diff [first-commit]..[second-commit]</div><div class="line"></div><div class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></div><div class="line">$ git show [commit-id]</div><div class="line"></div><div class="line"><span class="comment"># 显示当前分支的最近几次操作(操作历史)</span></div><div class="line">$ git reflog</div></pre></td></tr></table></figure><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 列出所有的分支，"*" 标识的是当前分支</span></div><div class="line">$ git branch </div><div class="line"></div><div class="line"><span class="comment"># 列出所有远程分支</span></div><div class="line">$ git branch -r</div><div class="line"></div><div class="line"><span class="comment"># 列出所有本地分支和远程分支</span></div><div class="line">$ git branch -a</div><div class="line"></div><div class="line"><span class="comment"># 新建分支，但仍停留在当前分支</span></div><div class="line">$ git branch [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 新建分支，并切换到该分支</span></div><div class="line">$ git checkout -b [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></div><div class="line">$ git checkout [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 合并指定分支到当前分支</span></div><div class="line">$ git merge [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 删除分支</span></div><div class="line">$ git branch -d [branch-name]</div></pre></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 列出所有tag</span></div><div class="line">$ git tag</div><div class="line"></div><div class="line"><span class="comment"># 新建一个tag在当前commit</span></div><div class="line">$ git tag [tag-name]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个tag在指定commit</span></div><div class="line">$ git tag [tag-name] [commit-id]</div><div class="line"></div><div class="line"><span class="comment"># 新建一个tag，并指定标签注释说明</span></div><div class="line">$ git tag -a [tag-name] -m <span class="string">"message"</span></div><div class="line"></div><div class="line"><span class="comment"># 提交指定tag到指定远程仓库（ git push 默认不提交标签到远程仓库）</span></div><div class="line">$ git push [remote-name] [tag-name]</div><div class="line"></div><div class="line"><span class="comment"># 提交所有的tag到指定远程仓库</span></div><div class="line">$ git push [remote-name] --tags</div><div class="line"></div><div class="line"><span class="comment"># 查看tag信息</span></div><div class="line">$ git show [tag-name]</div><div class="line"></div><div class="line"><span class="comment"># 删除本地tag</span></div><div class="line">$ git tag -d [tag-name]</div><div class="line"></div><div class="line"><span class="comment"># 删除指定远程仓库的tag</span></div><div class="line">$ git push [remote-name] :refs/tags/[tag-name]</div></pre></td></tr></table></figure><h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><p>默认远程仓库名：origin<br>默认分支：master</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 抓取指定远程仓库的所有变动，不做合并，不影响工作区</span></div><div class="line">$ git fetch [remote]</div><div class="line"></div><div class="line"><span class="comment"># 显示所有远程仓库(显示仓库地址)</span></div><div class="line">$ git remote -v</div><div class="line"></div><div class="line"><span class="comment"># 显示指定远程仓库的信息(仓库地址、HEAD指向分支、所有分支等)</span></div><div class="line">$ git remote show [remote-name]</div><div class="line"></div><div class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></div><div class="line">$ git remote add [remote-name] [url]</div><div class="line"></div><div class="line"><span class="comment"># 删除指定的远程仓库</span></div><div class="line">$ git remote remove [remote-name]</div><div class="line"></div><div class="line"><span class="comment"># 取回指定远程仓库的变化，并与本地分支合并</span></div><div class="line">$ git pull [remote-name] [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 上传本地指定分支到指定远程仓库</span></div><div class="line">$ git push [remote-name] [branch-name]</div><div class="line"></div><div class="line"><span class="comment"># 推送所有分支到指定远程仓库</span></div><div class="line">$ git push [remote-name] --all</div><div class="line"></div><div class="line"><span class="comment"># 强行推送当前分支到指定远程仓库，即使有冲突</span></div><div class="line">$ git push [remote-name] --force</div></pre></td></tr></table></figure><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 恢复暂存区指定文件到工作区( 没"--"，就变成切换分支了 )</span></div><div class="line">$ git checkout -- [file]</div><div class="line"></div><div class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></div><div class="line">$ git checkout [commit-id] [file]</div><div class="line"></div><div class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></div><div class="line">$ git checkout .</div><div class="line"></div><div class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></div><div class="line">$ git reset [file]</div><div class="line"></div><div class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></div><div class="line">$ git reset --hard</div><div class="line"></div><div class="line"><span class="comment"># 暂时将未提交的变化移到堆栈中(工作区变干净)</span></div><div class="line"><span class="comment"># 从堆栈中恢复最新的存储，--index 重新应用之前被暂存的变更</span></div><div class="line">$ git stash</div><div class="line">$ git stash pop [--index]</div></pre></td></tr></table></figure><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 新建一个commit，用来撤销指定的commit（commit历史会保留）</span></div><div class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></div><div class="line">$ git revert [commit-id]</div><div class="line"></div><div class="line"><span class="comment"># 回滚到commit-id，将该commit-id之后的commit都删除。(commit历史会被删掉)</span></div><div class="line"><span class="comment"># --hard 重设暂存区和工作区</span></div><div class="line">$ git reset --hard [commit-id]</div></pre></td></tr></table></figure><p>抄自阮一峰老师的博文：<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">常用 Git 命令清单</a></p><p>基本没啥自己整理的，该篇博文权当自己备忘用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理Git的常用命令，方便以后查找。&lt;/p&gt;
    
    </summary>
    
      <category term="版本控制" scheme="http://yoursite.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>利用GitLab的Webhooks功能，实现网站代码自动更新部署</title>
    <link href="http://yoursite.com/2017/The-site-code-auto-update-with-GitLab-webhooks.html"/>
    <id>http://yoursite.com/2017/The-site-code-auto-update-with-GitLab-webhooks.html</id>
    <published>2017-07-04T08:33:42.000Z</published>
    <updated>2017-07-06T10:16:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>根据业务需求，已部署GitLab-CE，网站代码上线流程如下图：</p><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-07-06-14993278977067.jpg" alt=""></p><p>开发者 push 推送代码之后，网站代码仍没更新，还需要操作多一步：<strong>登录前端web服务器，手动git pull 拉取更新的代码</strong>。这一步是运维的工作，很无趣又烦琐。</p><p>幸亏，GitLab提供了Webhooks功能，可以轻松实现网站代码自动更新部署。</p><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-07-06-14993282026422.jpg" alt=""></p><a id="more"></a><h2 id="一、webhooks原理"><a href="#一、webhooks原理" class="headerlink" title="一、webhooks原理"></a>一、webhooks原理</h2><p><a href="https://docs.gitlab.com/ce/user/project/integrations/webhooks.html" target="_blank" rel="external">Webhooks的原理</a></p><blockquote><p>Project webhooks allow you to trigger a URL if for example new code is pushed or a new issue is created.<br>You can configure webhooks to listen for specific events like pushes, issues or merge requests. GitLab will send a POST request with data to the webhook URL.<br>Webhooks can be used to update an external issue tracker, trigger CI jobs, update a backup mirror, or even deploy to your production server.</p></blockquote><p>简单说明</p><blockquote><p>webhooks允许指定一个URL，用于触发push或其他事件时进行自定义操作。<br>例如，当开发者push代码到GitLab服务器，会触发push事件，GitLab会发送一个POST请求连带数据（<a href="https://docs.gitlab.com/ce/user/project/integrations/webhooks.html#push-events" target="_blank" rel="external">数据格式</a>）给webhooks指定的URL，该URL可以是前端web的php程序或Python程序等。这样，每当GitLab有push事件，就能在前端web服务器上执行一个脚本程序。</p></blockquote><p>使用webhooks的步骤：</p><ul><li>在前端web服务器上安装Git客户端，用于拉取远程仓库 git pull</li><li>创建并添加公钥，以便免密码拉取远程仓库</li><li>创建脚本程序，并配置webhooks</li></ul><h2 id="二、安装Git客户端"><a href="#二、安装Git客户端" class="headerlink" title="二、安装Git客户端"></a>二、安装Git客户端</h2><p>在前端web服务器上，执行以下安装命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># yum install git</span></div></pre></td></tr></table></figure><h2 id="三、创建并添加公钥"><a href="#三、创建并添加公钥" class="headerlink" title="三、创建并添加公钥"></a>三、创建并添加公钥</h2><p>前端web服务器的 nginx 和 php-fpm 都是以 www 用户来运行的，所以要为www用户创建并添加公钥。</p><p>www 用户的家目录是:  /home/www/</p><p>修改 www 用户的 shell 为 /bin/bash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">www:x:511:511::/home/www:/bin/bash</div></pre></td></tr></table></figure><h3 id="创建用户的公钥"><a href="#创建用户的公钥" class="headerlink" title="创建用户的公钥"></a>创建用户的公钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># su www</span></div><div class="line">$ ssh-keygen -t rsa</div></pre></td></tr></table></figure><p>遇到交互，全部回车就好。<br>最后会在/home/www/.ssh 目录下生成两个文件，私钥文件：id_rsa，公钥文件：id_rsa.pub</p><h3 id="添加公钥到GitLab后台"><a href="#添加公钥到GitLab后台" class="headerlink" title="添加公钥到GitLab后台"></a>添加公钥到GitLab后台</h3><p>获取www用户的公钥文件内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /home/www/.ssh/id_rsa.pub</div></pre></td></tr></table></figure><p>复制公钥内容，添加公钥，GitLab后台添加公钥的位置：管理员 &gt; Settings &gt; SSH Keys</p><p><img src="http://orku2pa7o.bkt.clouddn.com/17-7-5/48924488.jpg" alt=""></p><h3 id="修改网站根目录的权限"><a href="#修改网站根目录的权限" class="headerlink" title="修改网站根目录的权限"></a>修改网站根目录的权限</h3><p>修改网站根目录( /home/www/test/ ) 的权限，否则以www用户git pull 会报权限问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># chmod 775 /home/www/test/ -R</div><div class="line"># chown www.www /home/www/test/ -R</div></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>测试www用户基于公钥是否能从Git服务器远程拉取代码</p><p>手动执行pull操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># su www</span></div><div class="line">$ <span class="built_in">cd</span> /home/www/<span class="built_in">test</span>/  </div><div class="line">$ git pull</div></pre></td></tr></table></figure><h2 id="四、部署webhooks"><a href="#四、部署webhooks" class="headerlink" title="四、部署webhooks"></a>四、部署webhooks</h2><h3 id="编写webhooks应用的PHP程序"><a href="#编写webhooks应用的PHP程序" class="headerlink" title="编写webhooks应用的PHP程序"></a>编写webhooks应用的PHP程序</h3><p>在前端web服务器的网站根目录（/home/www/test/）下新建一个webhooks.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//网站目录</span></div><div class="line">$www_file=<span class="string">'/home/www/test/'</span>;</div><div class="line"></div><div class="line"><span class="comment">//打开网站目录下的hooks.log文件,需要在服务器上创建,并给写权限</span></div><div class="line">$fs = fopen(<span class="string">'/home/www/test/hooks.log'</span>, <span class="string">'a'</span>);</div><div class="line"></div><div class="line">fwrite($fs, <span class="string">'================ Update Start ==============='</span>.PHP_EOL.PHP_EOL);</div><div class="line"></div><div class="line"><span class="comment">//自定义字串掩码 用于验证</span></div><div class="line">$access_token = <span class="string">'QhNO8YHqym5PHQQsexapF7041xOhzm62DRH'</span>;</div><div class="line"></div><div class="line"><span class="comment">//接受的ip数组，也就是允许哪些IP访问这个文件 这里是gitlab服务器IP</span></div><div class="line">$access_ip = <span class="keyword">array</span>(<span class="string">'192.168.1.15'</span>,<span class="string">'14.xxx.xxx.19'</span>);</div><div class="line"></div><div class="line"><span class="comment">//如果使用www.xxx.com/xxx.php?token=xxxxxxx 的方式来传送验证字符串，则用这个方法获取</span></div><div class="line"><span class="comment"># $client_token = $_GET['token'];</span></div><div class="line"></div><div class="line"><span class="comment">// 获取请求端的secret token</span></div><div class="line">$client_token = $_SERVER[<span class="string">"HTTP_X_GITLAB_TOKEN"</span>];</div><div class="line"></div><div class="line"><span class="comment">//获取请求端的IP</span></div><div class="line">$client_ip = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</div><div class="line"></div><div class="line"><span class="comment">//把请求的IP和时间写进log</span></div><div class="line">fwrite($fs, <span class="string">'Request on ['</span>.date(<span class="string">"Y-m-d H:i:s"</span>).<span class="string">'] from ['</span>.$client_ip.<span class="string">']'</span>.PHP_EOL);</div><div class="line"></div><div class="line"><span class="comment">//验证token 有错就写进日志并退出</span></div><div class="line"><span class="keyword">if</span> ($client_token !== $access_token)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"error 403"</span>;</div><div class="line">    fwrite($fs, <span class="string">"Invalid token [&#123;$client_token&#125;]"</span>.PHP_EOL);</div><div class="line">    <span class="keyword">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//验证ip</span></div><div class="line"><span class="keyword">if</span> ( !in_array($client_ip, $access_ip))</div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"error 503"</span>;</div><div class="line">    fwrite($fs, <span class="string">"Invalid ip [&#123;$client_ip&#125;]"</span>.PHP_EOL);</div><div class="line">    <span class="keyword">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获取请求端发送来的信息，具体格式参见gitlab的文档</span></div><div class="line">$json = file_get_contents(<span class="string">'php://input'</span>);</div><div class="line">$data = json_decode($json, <span class="keyword">true</span>);</div><div class="line"></div><div class="line"><span class="comment">//如果有需要 可以打开下面，把传送过来的信息写进log</span></div><div class="line"><span class="comment"># fwrite($fs, 'Data: '.print_r($data, true).PHP_EOL);</span></div><div class="line"></div><div class="line"><span class="comment">//执行shell命令并把返回信息写进日志</span></div><div class="line">$output=shell_exec(<span class="string">"cd $www_file &amp;&amp; git pull 2&gt;&amp;1"</span>);</div><div class="line">fwrite($fs, <span class="string">'Info:'</span>. $output.PHP_EOL);</div><div class="line"></div><div class="line">fwrite($fs,PHP_EOL. <span class="string">'================ Update End ==============='</span>.PHP_EOL.PHP_EOL);</div><div class="line"></div><div class="line">$fs <span class="keyword">and</span> fclose($fs);</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure><h3 id="修改PHP配置"><a href="#修改PHP配置" class="headerlink" title="修改PHP配置"></a>修改PHP配置</h3><p>因为webhooks用到的php代码中使用了 shell_exec 函数，一般配置php会禁止这个函数，需要打开 shell_exec 函数。<br>修改前端web服务器上php.ini的 disable_functions 列表，去掉 shell_exec 。<br>重启php-fpm服务。</p><h3 id="配置GitLab"><a href="#配置GitLab" class="headerlink" title="配置GitLab"></a>配置GitLab</h3><p>project &gt; Settings &gt; Integrations</p><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-07-06-14993335564376.jpg" alt=""></p><p>Secret Token中字符串的值，要跟webhooks.php中$access_token 的值相同。<br>Enable SSL verification 不要勾。</p><p><img src="http://orku2pa7o.bkt.clouddn.com/2017-07-06-14993342147315.jpg" alt=""></p><p>可以按 [Test] 按钮，测试配置是否生效。</p><h2 id="五、遇到的问题"><a href="#五、遇到的问题" class="headerlink" title="五、遇到的问题"></a>五、遇到的问题</h2><p>在部署webhooks中，遇到了个很诡异的问题。</p><p>前提说明</p><blockquote><p>GitLab-CE 版本：9.2.6<br>使用<a href="https://gitlab.com/xhang/gitlab" target="_blank" rel="external">xhang项目</a>对GitLab-CE进行汉化过</p></blockquote><p>问题描述：</p><blockquote><p>已成功部署webhooks，按 [Test] 按钮测试正常。<br>但在实际使用中，开发者push代码后，webhooks.php没有被执行，前端web代码没有git pull 记录，日志也没有记录。<strong>GitLab没有检测到开发者的push事件。</strong></p></blockquote><p>问题分析：</p><ul><li>通过另外部署一套同版本的、不打汉化补丁的GitLab-CE，发现不是汉化补丁的问题。</li><li>回想起之前遇到的一个问题，在GitLab-CE上新创建test项目时，开发者push后，GitLab上仍然显示该项目是空项目，无法检测到push事件，后来还是通过修改项目名来使得其能识别push事件。</li></ul><p>问题解决：</p><blockquote><p>后来偶然发现，webhooks时GitLab没有及时检测到开发者的push事件，是因为对 <strong>/var/opt/gitlab/</strong> 目录做了软链接的缘故。<br>去掉软链接，改为正常的目录路径。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据业务需求，已部署GitLab-CE，网站代码上线流程如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://orku2pa7o.bkt.clouddn.com/2017-07-06-14993278977067.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;开发者 push 推送代码之后，网站代码仍没更新，还需要操作多一步：&lt;strong&gt;登录前端web服务器，手动git pull 拉取更新的代码&lt;/strong&gt;。这一步是运维的工作，很无趣又烦琐。&lt;/p&gt;
&lt;p&gt;幸亏，GitLab提供了Webhooks功能，可以轻松实现网站代码自动更新部署。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://orku2pa7o.bkt.clouddn.com/2017-07-06-14993282026422.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="版本控制" scheme="http://yoursite.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Git问题集锦</title>
    <link href="http://yoursite.com/2017/Git-problem-sets.html"/>
    <id>http://yoursite.com/2017/Git-problem-sets.html</id>
    <published>2017-06-27T07:42:24.000Z</published>
    <updated>2017-10-26T14:43:26.832Z</updated>
    
    <content type="html"><![CDATA[<p>记录Git使用过程中出现的问题<br><a id="more"></a></p><h2 id="git子模块问题"><a href="#git子模块问题" class="headerlink" title="git子模块问题"></a>git子模块问题</h2><p>最近要将某个项目的代码加入Git版本控制，在该项目目录做Git初始化后，提交推送到Git服务器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cd test</span></div><div class="line"><span class="comment"># git init</span></div><div class="line"><span class="comment"># git remote add origin git@gitlab.xxx.com:test/test.git</span></div><div class="line"><span class="comment"># git add .</span></div><div class="line"><span class="comment"># git commit -m "Initial commit"</span></div><div class="line"><span class="comment"># git push -u origin master</span></div></pre></td></tr></table></figure><p>将该项目拉到本地电脑的时候，出现了问题，monolog目录下没有拉到任何文件</p><p><img src="http://orku2pa7o.bkt.clouddn.com/17-6-27/86605188.jpg" alt=""></p><p>手动在项目代码服务器上 git add 该目录下的文件，也报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fatal: Pathspec &apos;composer.json&apos; is in submodule &apos;web/passport_v3/vendor/monolog/monolog/&apos;</div></pre></td></tr></table></figure><p><strong>分析：</strong><br>monolog 本身就是一个git库，父目录被Git初始化后，monolog目录变成了子模块。</p><p>现在，不需要将monolog目录作为子模块。</p><p><strong>解决方法：</strong></p><ul><li>删除monolog目录下git相关的文件，如.git目录、.gitignore等</li><li>用git rm –cached 删除已经被提交到暂存区的特定文件，重新添加提交</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># cd test</span></div><div class="line"><span class="comment"># git rm -rf --cached web/passport_v3/vendor/monolog/monolog/</span></div><div class="line"><span class="comment"># git add web/passport_v3/vendor/monolog/monolog/</span></div><div class="line"><span class="comment"># git commit -m "子模块问题解决"</span></div></pre></td></tr></table></figure><h2 id="提取仓库根目录下的某目录文件，配置为另外一个Git仓库"><a href="#提取仓库根目录下的某目录文件，配置为另外一个Git仓库" class="headerlink" title="提取仓库根目录下的某目录文件，配置为另外一个Git仓库"></a>提取仓库根目录下的某目录文件，配置为另外一个Git仓库</h2><p>线上服务器中，<code>dev</code> 仓库下有个 <code>test</code> 目录，这是一个项目目录，现想将该目录内容提取出来，另外配置一个git仓库。</p><p>在Git服务器上创建一个裸仓库，裸仓库没有工作区，因服务器上的Git仓库纯粹为了共享，不让用户直接登录Git服务器改工作区，并且Git服务器上的仓库通常都以 <code>.git</code> 结尾。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># cd /git</div><div class="line"># git init --bare test.git</div><div class="line"># chown -R git.git test.git</div></pre></td></tr></table></figure><p>克隆空仓库 <code>test</code> 到线上服务器，拷贝 <code>test</code> 目录下的所有文件到空仓库 <code>test</code> 目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># cd /home/www</div><div class="line"># git clone git@xx.xx.xx.xx:/git/test.git</div><div class="line"># cp -a /home/www/dev/test/* /home/www/test/</div></pre></td></tr></table></figure><p>添加文件并提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># git add .</div><div class="line"># git commit -m &quot;初始化提交&quot;</div></pre></td></tr></table></figure><p>配置好 <code>.gitignore</code>，推送到Git服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># git push</div></pre></td></tr></table></figure><p>在版本库中删除 <code>dev</code> 仓库下的 <code>test</code> 目录，但本地工作区还会保留目录文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># cd /home/www/dev</div><div class="line"># git rm -r --cached test</div></pre></td></tr></table></figure><h2 id="清空所有-commit-log"><a href="#清空所有-commit-log" class="headerlink" title="清空所有 commit log"></a>清空所有 commit log</h2><p>情景：你在某分支上累积了无数次commit log，你又懒得去打理，你想删除之前所有的commit log，将工作区当前状态的代码作第一次提交。<br>注意：不能直接删 <code>.git</code> 目录，这回删除git仓库的配置，可能会直接导致git仓库出现问题的。如果有子模块，这种方法会使得子模块失效。</p><blockquote><p>git checkout –orphan [branch]<br>这命令会基于当前分支新建一个空白分支，没有任何commit log，工作区文件不发生变化。</p></blockquote><p>备份（必须确定已经备份好）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">切换到指定的分支</div><div class="line"># git checkout dev</div><div class="line"></div><div class="line">利用分支来备份</div><div class="line"># git branch backup</div></pre></td></tr></table></figure><p>清空 commit-log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">新建分支new</div><div class="line"># git checkout --orphan new</div><div class="line"></div><div class="line">添加所有文件</div><div class="line"># git add .</div><div class="line"></div><div class="line">提交</div><div class="line"># git commit -m &quot;init commit&quot;</div><div class="line"></div><div class="line">删除分支</div><div class="line"># git branch -D dev</div><div class="line"></div><div class="line">将当前分支重命名</div><div class="line"># git branch -m dev</div><div class="line"></div><div class="line">强制更新远程git仓库</div><div class="line"># git push -f origin dev</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录Git使用过程中出现的问题&lt;br&gt;
    
    </summary>
    
      <category term="版本控制" scheme="http://yoursite.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>GitLab汉化指南</title>
    <link href="http://yoursite.com/2017/GitLab-Chinesization-guide.html"/>
    <id>http://yoursite.com/2017/GitLab-Chinesization-guide.html</id>
    <published>2017-06-24T14:22:42.000Z</published>
    <updated>2017-06-24T14:56:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了方便，降低新手上手的难度，对GitLab进行汉化。</p><p>以下介绍GitLab汉化的两个方法</p><a id="more"></a><h2 id="1、直接安装中文版"><a href="#1、直接安装中文版" class="headerlink" title="1、直接安装中文版"></a>1、直接安装中文版</h2><p>GitLab中文社区有集成了中文版的rpm安装包，可以直接去下载安装。</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/" target="_blank" rel="external">GitLab中文社区的安装源</a>，目前汉化的最新版本是 gitlab-ce-9.3.0</p><p>CentOS 6.x 中，安装GitLab中文版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># curl -LJO https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el6/gitlab-ce-9.3.0-ce.0.el6.x86_64.rpm</div><div class="line"># rpm -i gitlab-ce-9.3.0-ce.0.el6.x86_64.rpm</div></pre></td></tr></table></figure><p>修改配置/etc/gitlab/gitlab.rb，绑定域名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">external_url &apos;http://gitlab.xxx.com&apos;</div></pre></td></tr></table></figure><blockquote><p>修改这个配置，会影响GitLab里面显示的仓库链接。</p></blockquote><p>使配置生效：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 重新生成配置，启动服务</div><div class="line">gitlab-ctl reconfigure   </div><div class="line"></div><div class="line"># 清空缓存</div><div class="line">gitlab-rake cache:clear RAILS_ENV=production</div><div class="line">  </div><div class="line"># 重启所有 gitlab 组件</div><div class="line">gitlab-ctl restart</div></pre></td></tr></table></figure><h2 id="2、汉化"><a href="#2、汉化" class="headerlink" title="2、汉化"></a>2、汉化</h2><h3 id="确定GitLab安装版本"><a href="#确定GitLab安装版本" class="headerlink" title="确定GitLab安装版本"></a>确定GitLab安装版本</h3><p>通过官方提供的GitLab-CE Omnibus安装包安装了GitLab CE 9.2.6</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</div></pre></td></tr></table></figure><h3 id="克隆GitLab汉化源代码仓库"><a href="#克隆GitLab汉化源代码仓库" class="headerlink" title="克隆GitLab汉化源代码仓库"></a>克隆GitLab汉化源代码仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 克隆 GitLab.com 仓库</div><div class="line">git clone https://gitlab.com/xhang/gitlab.git</div><div class="line"></div><div class="line"># 如果是8.8之前的版本可以使用这个</div><div class="line">git clone https://gitlab.com/larryli/gitlab.git</div></pre></td></tr></table></figure><ul><li><a href="https://gitlab.com/larryli/gitlab" target="_blank" rel="external"><strong>larryli项目</strong></a> ：只更新到8.8.5版本。</li><li><a href="https://gitlab.com/xhang/gitlab" target="_blank" rel="external"><strong>xhang项目</strong></a> ：延续Larry Li项目的8-8-zh中文版本进行更新，目前最新版本是9.3.0 。</li></ul><p>根据安装的版本到 <strong>LarryLi项目</strong> 或 <strong>xhang项目</strong> 查看汉化是否支持，注意只要前两位版本号一致就好，如：安装GitLab版本是8.8.6，可以使用 v8.8.0 汉化版本。</p><h3 id="打汉化补丁"><a href="#打汉化补丁" class="headerlink" title="打汉化补丁"></a>打汉化补丁</h3><p>以 9.2.6 版本为例（使用xhang的git仓库）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># 进入克隆仓库得到的gitlab目录</div><div class="line">cd gitlab </div><div class="line"></div><div class="line"># 查看tag版本，选择合适的汉化版本</div><div class="line">git tag</div><div class="line"></div><div class="line"># 对比不同，这里比较的是tag，v9.2.6为英文原版，v9.2.6-zh为汉化版本。diff结果是汉化补丁。</div><div class="line">git diff v9.2.6..v9.2.6-zh &gt; /tmp/9.2.6.diff</div><div class="line"></div><div class="line"># 停止gitlab</div><div class="line">gitlab-ctl stop</div><div class="line"></div><div class="line"># 应用汉化补丁</div><div class="line">cd /opt/gitlab/embedded/service/gitlab-rails</div><div class="line">git apply /tmp/9.2.6.diff</div><div class="line"></div><div class="line"># 启动gitlab</div><div class="line">gitlab-ctl start</div></pre></td></tr></table></figure><p>如果汉化中出现问题，请重新安装GitLab，<strong>注意要先备份数据</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了方便，降低新手上手的难度，对GitLab进行汉化。&lt;/p&gt;
&lt;p&gt;以下介绍GitLab汉化的两个方法&lt;/p&gt;
    
    </summary>
    
      <category term="版本控制" scheme="http://yoursite.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
</feed>
